<?php
/**
 * InlineResponse20024Attachments
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Omnichannel
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.67
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse20024Attachments Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20024Attachments implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_24_attachments';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ts' => 'string',
        'title' => 'string',
        'title_link' => 'string',
        'title_link_download' => 'bool',
        'image_dimensions' => '\Swagger\Client\Model\InlineResponse20024ImageDimensions',
        'image_preview' => 'string',
        'image_url' => 'string',
        'image_type' => 'string',
        'image_size' => 'int',
        'type' => 'string',
        'description' => 'string',
        'description_md' => '\Swagger\Client\Model\InlineResponse20019RoomLastMessageMd[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ts' => null,
        'title' => null,
        'title_link' => null,
        'title_link_download' => null,
        'image_dimensions' => null,
        'image_preview' => null,
        'image_url' => null,
        'image_type' => null,
        'image_size' => null,
        'type' => null,
        'description' => null,
        'description_md' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ts' => 'ts',
        'title' => 'title',
        'title_link' => 'title_link',
        'title_link_download' => 'title_link_download',
        'image_dimensions' => 'image_dimensions',
        'image_preview' => 'image_preview',
        'image_url' => 'image_url',
        'image_type' => 'image_type',
        'image_size' => 'image_size',
        'type' => 'type',
        'description' => 'description',
        'description_md' => 'descriptionMd'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ts' => 'setTs',
        'title' => 'setTitle',
        'title_link' => 'setTitleLink',
        'title_link_download' => 'setTitleLinkDownload',
        'image_dimensions' => 'setImageDimensions',
        'image_preview' => 'setImagePreview',
        'image_url' => 'setImageUrl',
        'image_type' => 'setImageType',
        'image_size' => 'setImageSize',
        'type' => 'setType',
        'description' => 'setDescription',
        'description_md' => 'setDescriptionMd'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ts' => 'getTs',
        'title' => 'getTitle',
        'title_link' => 'getTitleLink',
        'title_link_download' => 'getTitleLinkDownload',
        'image_dimensions' => 'getImageDimensions',
        'image_preview' => 'getImagePreview',
        'image_url' => 'getImageUrl',
        'image_type' => 'getImageType',
        'image_size' => 'getImageSize',
        'type' => 'getType',
        'description' => 'getDescription',
        'description_md' => 'getDescriptionMd'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ts'] = isset($data['ts']) ? $data['ts'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['title_link'] = isset($data['title_link']) ? $data['title_link'] : null;
        $this->container['title_link_download'] = isset($data['title_link_download']) ? $data['title_link_download'] : null;
        $this->container['image_dimensions'] = isset($data['image_dimensions']) ? $data['image_dimensions'] : null;
        $this->container['image_preview'] = isset($data['image_preview']) ? $data['image_preview'] : null;
        $this->container['image_url'] = isset($data['image_url']) ? $data['image_url'] : null;
        $this->container['image_type'] = isset($data['image_type']) ? $data['image_type'] : null;
        $this->container['image_size'] = isset($data['image_size']) ? $data['image_size'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['description_md'] = isset($data['description_md']) ? $data['description_md'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ts
     *
     * @return string
     */
    public function getTs()
    {
        return $this->container['ts'];
    }

    /**
     * Sets ts
     *
     * @param string $ts ts
     *
     * @return $this
     */
    public function setTs($ts)
    {
        $this->container['ts'] = $ts;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets title_link
     *
     * @return string
     */
    public function getTitleLink()
    {
        return $this->container['title_link'];
    }

    /**
     * Sets title_link
     *
     * @param string $title_link title_link
     *
     * @return $this
     */
    public function setTitleLink($title_link)
    {
        $this->container['title_link'] = $title_link;

        return $this;
    }

    /**
     * Gets title_link_download
     *
     * @return bool
     */
    public function getTitleLinkDownload()
    {
        return $this->container['title_link_download'];
    }

    /**
     * Sets title_link_download
     *
     * @param bool $title_link_download title_link_download
     *
     * @return $this
     */
    public function setTitleLinkDownload($title_link_download)
    {
        $this->container['title_link_download'] = $title_link_download;

        return $this;
    }

    /**
     * Gets image_dimensions
     *
     * @return \Swagger\Client\Model\InlineResponse20024ImageDimensions
     */
    public function getImageDimensions()
    {
        return $this->container['image_dimensions'];
    }

    /**
     * Sets image_dimensions
     *
     * @param \Swagger\Client\Model\InlineResponse20024ImageDimensions $image_dimensions image_dimensions
     *
     * @return $this
     */
    public function setImageDimensions($image_dimensions)
    {
        $this->container['image_dimensions'] = $image_dimensions;

        return $this;
    }

    /**
     * Gets image_preview
     *
     * @return string
     */
    public function getImagePreview()
    {
        return $this->container['image_preview'];
    }

    /**
     * Sets image_preview
     *
     * @param string $image_preview image_preview
     *
     * @return $this
     */
    public function setImagePreview($image_preview)
    {
        $this->container['image_preview'] = $image_preview;

        return $this;
    }

    /**
     * Gets image_url
     *
     * @return string
     */
    public function getImageUrl()
    {
        return $this->container['image_url'];
    }

    /**
     * Sets image_url
     *
     * @param string $image_url image_url
     *
     * @return $this
     */
    public function setImageUrl($image_url)
    {
        $this->container['image_url'] = $image_url;

        return $this;
    }

    /**
     * Gets image_type
     *
     * @return string
     */
    public function getImageType()
    {
        return $this->container['image_type'];
    }

    /**
     * Sets image_type
     *
     * @param string $image_type image_type
     *
     * @return $this
     */
    public function setImageType($image_type)
    {
        $this->container['image_type'] = $image_type;

        return $this;
    }

    /**
     * Gets image_size
     *
     * @return int
     */
    public function getImageSize()
    {
        return $this->container['image_size'];
    }

    /**
     * Sets image_size
     *
     * @param int $image_size image_size
     *
     * @return $this
     */
    public function setImageSize($image_size)
    {
        $this->container['image_size'] = $image_size;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets description_md
     *
     * @return \Swagger\Client\Model\InlineResponse20019RoomLastMessageMd[]
     */
    public function getDescriptionMd()
    {
        return $this->container['description_md'];
    }

    /**
     * Sets description_md
     *
     * @param \Swagger\Client\Model\InlineResponse20019RoomLastMessageMd[] $description_md description_md
     *
     * @return $this
     */
    public function setDescriptionMd($description_md)
    {
        $this->container['description_md'] = $description_md;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
