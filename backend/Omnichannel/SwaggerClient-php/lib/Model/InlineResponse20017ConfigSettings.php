<?php
/**
 * InlineResponse20017ConfigSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Omnichannel
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.67
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse20017ConfigSettings Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20017ConfigSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_17_config_settings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'registration_form' => 'bool',
        'allow_switching_departments' => 'bool',
        'name_field_registration_form' => 'bool',
        'email_field_registration_form' => 'bool',
        'display_offline_form' => 'bool',
        'video_call' => 'bool',
        'file_upload' => 'bool',
        'language' => 'string',
        'transcript' => 'bool',
        'history_monitor_type' => 'string',
        'force_accept_data_processing_consent' => 'bool',
        'show_connecting' => 'bool',
        'agent_hidden_info' => 'bool',
        'clear_local_storage_when_chat_ended' => 'bool',
        'limit_text_length' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'registration_form' => null,
        'allow_switching_departments' => null,
        'name_field_registration_form' => null,
        'email_field_registration_form' => null,
        'display_offline_form' => null,
        'video_call' => null,
        'file_upload' => null,
        'language' => null,
        'transcript' => null,
        'history_monitor_type' => null,
        'force_accept_data_processing_consent' => null,
        'show_connecting' => null,
        'agent_hidden_info' => null,
        'clear_local_storage_when_chat_ended' => null,
        'limit_text_length' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'registration_form' => 'registrationForm',
        'allow_switching_departments' => 'allowSwitchingDepartments',
        'name_field_registration_form' => 'nameFieldRegistrationForm',
        'email_field_registration_form' => 'emailFieldRegistrationForm',
        'display_offline_form' => 'displayOfflineForm',
        'video_call' => 'videoCall',
        'file_upload' => 'fileUpload',
        'language' => 'language',
        'transcript' => 'transcript',
        'history_monitor_type' => 'historyMonitorType',
        'force_accept_data_processing_consent' => 'forceAcceptDataProcessingConsent',
        'show_connecting' => 'showConnecting',
        'agent_hidden_info' => 'agentHiddenInfo',
        'clear_local_storage_when_chat_ended' => 'clearLocalStorageWhenChatEnded',
        'limit_text_length' => 'limitTextLength'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'registration_form' => 'setRegistrationForm',
        'allow_switching_departments' => 'setAllowSwitchingDepartments',
        'name_field_registration_form' => 'setNameFieldRegistrationForm',
        'email_field_registration_form' => 'setEmailFieldRegistrationForm',
        'display_offline_form' => 'setDisplayOfflineForm',
        'video_call' => 'setVideoCall',
        'file_upload' => 'setFileUpload',
        'language' => 'setLanguage',
        'transcript' => 'setTranscript',
        'history_monitor_type' => 'setHistoryMonitorType',
        'force_accept_data_processing_consent' => 'setForceAcceptDataProcessingConsent',
        'show_connecting' => 'setShowConnecting',
        'agent_hidden_info' => 'setAgentHiddenInfo',
        'clear_local_storage_when_chat_ended' => 'setClearLocalStorageWhenChatEnded',
        'limit_text_length' => 'setLimitTextLength'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'registration_form' => 'getRegistrationForm',
        'allow_switching_departments' => 'getAllowSwitchingDepartments',
        'name_field_registration_form' => 'getNameFieldRegistrationForm',
        'email_field_registration_form' => 'getEmailFieldRegistrationForm',
        'display_offline_form' => 'getDisplayOfflineForm',
        'video_call' => 'getVideoCall',
        'file_upload' => 'getFileUpload',
        'language' => 'getLanguage',
        'transcript' => 'getTranscript',
        'history_monitor_type' => 'getHistoryMonitorType',
        'force_accept_data_processing_consent' => 'getForceAcceptDataProcessingConsent',
        'show_connecting' => 'getShowConnecting',
        'agent_hidden_info' => 'getAgentHiddenInfo',
        'clear_local_storage_when_chat_ended' => 'getClearLocalStorageWhenChatEnded',
        'limit_text_length' => 'getLimitTextLength'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['registration_form'] = isset($data['registration_form']) ? $data['registration_form'] : null;
        $this->container['allow_switching_departments'] = isset($data['allow_switching_departments']) ? $data['allow_switching_departments'] : null;
        $this->container['name_field_registration_form'] = isset($data['name_field_registration_form']) ? $data['name_field_registration_form'] : null;
        $this->container['email_field_registration_form'] = isset($data['email_field_registration_form']) ? $data['email_field_registration_form'] : null;
        $this->container['display_offline_form'] = isset($data['display_offline_form']) ? $data['display_offline_form'] : null;
        $this->container['video_call'] = isset($data['video_call']) ? $data['video_call'] : null;
        $this->container['file_upload'] = isset($data['file_upload']) ? $data['file_upload'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['transcript'] = isset($data['transcript']) ? $data['transcript'] : null;
        $this->container['history_monitor_type'] = isset($data['history_monitor_type']) ? $data['history_monitor_type'] : null;
        $this->container['force_accept_data_processing_consent'] = isset($data['force_accept_data_processing_consent']) ? $data['force_accept_data_processing_consent'] : null;
        $this->container['show_connecting'] = isset($data['show_connecting']) ? $data['show_connecting'] : null;
        $this->container['agent_hidden_info'] = isset($data['agent_hidden_info']) ? $data['agent_hidden_info'] : null;
        $this->container['clear_local_storage_when_chat_ended'] = isset($data['clear_local_storage_when_chat_ended']) ? $data['clear_local_storage_when_chat_ended'] : null;
        $this->container['limit_text_length'] = isset($data['limit_text_length']) ? $data['limit_text_length'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets registration_form
     *
     * @return bool
     */
    public function getRegistrationForm()
    {
        return $this->container['registration_form'];
    }

    /**
     * Sets registration_form
     *
     * @param bool $registration_form registration_form
     *
     * @return $this
     */
    public function setRegistrationForm($registration_form)
    {
        $this->container['registration_form'] = $registration_form;

        return $this;
    }

    /**
     * Gets allow_switching_departments
     *
     * @return bool
     */
    public function getAllowSwitchingDepartments()
    {
        return $this->container['allow_switching_departments'];
    }

    /**
     * Sets allow_switching_departments
     *
     * @param bool $allow_switching_departments allow_switching_departments
     *
     * @return $this
     */
    public function setAllowSwitchingDepartments($allow_switching_departments)
    {
        $this->container['allow_switching_departments'] = $allow_switching_departments;

        return $this;
    }

    /**
     * Gets name_field_registration_form
     *
     * @return bool
     */
    public function getNameFieldRegistrationForm()
    {
        return $this->container['name_field_registration_form'];
    }

    /**
     * Sets name_field_registration_form
     *
     * @param bool $name_field_registration_form name_field_registration_form
     *
     * @return $this
     */
    public function setNameFieldRegistrationForm($name_field_registration_form)
    {
        $this->container['name_field_registration_form'] = $name_field_registration_form;

        return $this;
    }

    /**
     * Gets email_field_registration_form
     *
     * @return bool
     */
    public function getEmailFieldRegistrationForm()
    {
        return $this->container['email_field_registration_form'];
    }

    /**
     * Sets email_field_registration_form
     *
     * @param bool $email_field_registration_form email_field_registration_form
     *
     * @return $this
     */
    public function setEmailFieldRegistrationForm($email_field_registration_form)
    {
        $this->container['email_field_registration_form'] = $email_field_registration_form;

        return $this;
    }

    /**
     * Gets display_offline_form
     *
     * @return bool
     */
    public function getDisplayOfflineForm()
    {
        return $this->container['display_offline_form'];
    }

    /**
     * Sets display_offline_form
     *
     * @param bool $display_offline_form display_offline_form
     *
     * @return $this
     */
    public function setDisplayOfflineForm($display_offline_form)
    {
        $this->container['display_offline_form'] = $display_offline_form;

        return $this;
    }

    /**
     * Gets video_call
     *
     * @return bool
     */
    public function getVideoCall()
    {
        return $this->container['video_call'];
    }

    /**
     * Sets video_call
     *
     * @param bool $video_call video_call
     *
     * @return $this
     */
    public function setVideoCall($video_call)
    {
        $this->container['video_call'] = $video_call;

        return $this;
    }

    /**
     * Gets file_upload
     *
     * @return bool
     */
    public function getFileUpload()
    {
        return $this->container['file_upload'];
    }

    /**
     * Sets file_upload
     *
     * @param bool $file_upload file_upload
     *
     * @return $this
     */
    public function setFileUpload($file_upload)
    {
        $this->container['file_upload'] = $file_upload;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string $language language
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets transcript
     *
     * @return bool
     */
    public function getTranscript()
    {
        return $this->container['transcript'];
    }

    /**
     * Sets transcript
     *
     * @param bool $transcript transcript
     *
     * @return $this
     */
    public function setTranscript($transcript)
    {
        $this->container['transcript'] = $transcript;

        return $this;
    }

    /**
     * Gets history_monitor_type
     *
     * @return string
     */
    public function getHistoryMonitorType()
    {
        return $this->container['history_monitor_type'];
    }

    /**
     * Sets history_monitor_type
     *
     * @param string $history_monitor_type history_monitor_type
     *
     * @return $this
     */
    public function setHistoryMonitorType($history_monitor_type)
    {
        $this->container['history_monitor_type'] = $history_monitor_type;

        return $this;
    }

    /**
     * Gets force_accept_data_processing_consent
     *
     * @return bool
     */
    public function getForceAcceptDataProcessingConsent()
    {
        return $this->container['force_accept_data_processing_consent'];
    }

    /**
     * Sets force_accept_data_processing_consent
     *
     * @param bool $force_accept_data_processing_consent force_accept_data_processing_consent
     *
     * @return $this
     */
    public function setForceAcceptDataProcessingConsent($force_accept_data_processing_consent)
    {
        $this->container['force_accept_data_processing_consent'] = $force_accept_data_processing_consent;

        return $this;
    }

    /**
     * Gets show_connecting
     *
     * @return bool
     */
    public function getShowConnecting()
    {
        return $this->container['show_connecting'];
    }

    /**
     * Sets show_connecting
     *
     * @param bool $show_connecting show_connecting
     *
     * @return $this
     */
    public function setShowConnecting($show_connecting)
    {
        $this->container['show_connecting'] = $show_connecting;

        return $this;
    }

    /**
     * Gets agent_hidden_info
     *
     * @return bool
     */
    public function getAgentHiddenInfo()
    {
        return $this->container['agent_hidden_info'];
    }

    /**
     * Sets agent_hidden_info
     *
     * @param bool $agent_hidden_info agent_hidden_info
     *
     * @return $this
     */
    public function setAgentHiddenInfo($agent_hidden_info)
    {
        $this->container['agent_hidden_info'] = $agent_hidden_info;

        return $this;
    }

    /**
     * Gets clear_local_storage_when_chat_ended
     *
     * @return bool
     */
    public function getClearLocalStorageWhenChatEnded()
    {
        return $this->container['clear_local_storage_when_chat_ended'];
    }

    /**
     * Sets clear_local_storage_when_chat_ended
     *
     * @param bool $clear_local_storage_when_chat_ended clear_local_storage_when_chat_ended
     *
     * @return $this
     */
    public function setClearLocalStorageWhenChatEnded($clear_local_storage_when_chat_ended)
    {
        $this->container['clear_local_storage_when_chat_ended'] = $clear_local_storage_when_chat_ended;

        return $this;
    }

    /**
     * Gets limit_text_length
     *
     * @return bool
     */
    public function getLimitTextLength()
    {
        return $this->container['limit_text_length'];
    }

    /**
     * Sets limit_text_length
     *
     * @param bool $limit_text_length limit_text_length
     *
     * @return $this
     */
    public function setLimitTextLength($limit_text_length)
    {
        $this->container['limit_text_length'] = $limit_text_length;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
