<?php
/**
 * InlineResponse20062Inquiries
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Omnichannel
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.67
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse20062Inquiries Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20062Inquiries implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_62_inquiries';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        '_id' => 'string',
        'rid' => 'string',
        'name' => 'string',
        'ts' => 'string',
        'department' => 'string',
        'message' => 'string',
        'status' => 'string',
        'v' => '\Swagger\Client\Model\InlineResponse20018V',
        't' => 'string',
        'queue_order' => 'int',
        'estimated_waiting_time_queue' => 'int',
        'estimated_service_time_at' => 'string',
        '_updated_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        '_id' => null,
        'rid' => null,
        'name' => null,
        'ts' => null,
        'department' => null,
        'message' => null,
        'status' => null,
        'v' => null,
        't' => null,
        'queue_order' => null,
        'estimated_waiting_time_queue' => null,
        'estimated_service_time_at' => null,
        '_updated_at' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        '_id' => '_id',
        'rid' => 'rid',
        'name' => 'name',
        'ts' => 'ts',
        'department' => 'department',
        'message' => 'message',
        'status' => 'status',
        'v' => 'v',
        't' => 't',
        'queue_order' => 'queueOrder',
        'estimated_waiting_time_queue' => 'estimatedWaitingTimeQueue',
        'estimated_service_time_at' => 'estimatedServiceTimeAt',
        '_updated_at' => '_updatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        '_id' => 'setId',
        'rid' => 'setRid',
        'name' => 'setName',
        'ts' => 'setTs',
        'department' => 'setDepartment',
        'message' => 'setMessage',
        'status' => 'setStatus',
        'v' => 'setV',
        't' => 'setT',
        'queue_order' => 'setQueueOrder',
        'estimated_waiting_time_queue' => 'setEstimatedWaitingTimeQueue',
        'estimated_service_time_at' => 'setEstimatedServiceTimeAt',
        '_updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        '_id' => 'getId',
        'rid' => 'getRid',
        'name' => 'getName',
        'ts' => 'getTs',
        'department' => 'getDepartment',
        'message' => 'getMessage',
        'status' => 'getStatus',
        'v' => 'getV',
        't' => 'getT',
        'queue_order' => 'getQueueOrder',
        'estimated_waiting_time_queue' => 'getEstimatedWaitingTimeQueue',
        'estimated_service_time_at' => 'getEstimatedServiceTimeAt',
        '_updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['_id'] = isset($data['_id']) ? $data['_id'] : null;
        $this->container['rid'] = isset($data['rid']) ? $data['rid'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['ts'] = isset($data['ts']) ? $data['ts'] : null;
        $this->container['department'] = isset($data['department']) ? $data['department'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['v'] = isset($data['v']) ? $data['v'] : null;
        $this->container['t'] = isset($data['t']) ? $data['t'] : null;
        $this->container['queue_order'] = isset($data['queue_order']) ? $data['queue_order'] : null;
        $this->container['estimated_waiting_time_queue'] = isset($data['estimated_waiting_time_queue']) ? $data['estimated_waiting_time_queue'] : null;
        $this->container['estimated_service_time_at'] = isset($data['estimated_service_time_at']) ? $data['estimated_service_time_at'] : null;
        $this->container['_updated_at'] = isset($data['_updated_at']) ? $data['_updated_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets _id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['_id'];
    }

    /**
     * Sets _id
     *
     * @param string $_id _id
     *
     * @return $this
     */
    public function setId($_id)
    {
        $this->container['_id'] = $_id;

        return $this;
    }

    /**
     * Gets rid
     *
     * @return string
     */
    public function getRid()
    {
        return $this->container['rid'];
    }

    /**
     * Sets rid
     *
     * @param string $rid rid
     *
     * @return $this
     */
    public function setRid($rid)
    {
        $this->container['rid'] = $rid;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets ts
     *
     * @return string
     */
    public function getTs()
    {
        return $this->container['ts'];
    }

    /**
     * Sets ts
     *
     * @param string $ts ts
     *
     * @return $this
     */
    public function setTs($ts)
    {
        $this->container['ts'] = $ts;

        return $this;
    }

    /**
     * Gets department
     *
     * @return string
     */
    public function getDepartment()
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param string $department department
     *
     * @return $this
     */
    public function setDepartment($department)
    {
        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message message
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets v
     *
     * @return \Swagger\Client\Model\InlineResponse20018V
     */
    public function getV()
    {
        return $this->container['v'];
    }

    /**
     * Sets v
     *
     * @param \Swagger\Client\Model\InlineResponse20018V $v v
     *
     * @return $this
     */
    public function setV($v)
    {
        $this->container['v'] = $v;

        return $this;
    }

    /**
     * Gets t
     *
     * @return string
     */
    public function getT()
    {
        return $this->container['t'];
    }

    /**
     * Sets t
     *
     * @param string $t t
     *
     * @return $this
     */
    public function setT($t)
    {
        $this->container['t'] = $t;

        return $this;
    }

    /**
     * Gets queue_order
     *
     * @return int
     */
    public function getQueueOrder()
    {
        return $this->container['queue_order'];
    }

    /**
     * Sets queue_order
     *
     * @param int $queue_order queue_order
     *
     * @return $this
     */
    public function setQueueOrder($queue_order)
    {
        $this->container['queue_order'] = $queue_order;

        return $this;
    }

    /**
     * Gets estimated_waiting_time_queue
     *
     * @return int
     */
    public function getEstimatedWaitingTimeQueue()
    {
        return $this->container['estimated_waiting_time_queue'];
    }

    /**
     * Sets estimated_waiting_time_queue
     *
     * @param int $estimated_waiting_time_queue estimated_waiting_time_queue
     *
     * @return $this
     */
    public function setEstimatedWaitingTimeQueue($estimated_waiting_time_queue)
    {
        $this->container['estimated_waiting_time_queue'] = $estimated_waiting_time_queue;

        return $this;
    }

    /**
     * Gets estimated_service_time_at
     *
     * @return string
     */
    public function getEstimatedServiceTimeAt()
    {
        return $this->container['estimated_service_time_at'];
    }

    /**
     * Sets estimated_service_time_at
     *
     * @param string $estimated_service_time_at estimated_service_time_at
     *
     * @return $this
     */
    public function setEstimatedServiceTimeAt($estimated_service_time_at)
    {
        $this->container['estimated_service_time_at'] = $estimated_service_time_at;

        return $this;
    }

    /**
     * Gets _updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['_updated_at'];
    }

    /**
     * Sets _updated_at
     *
     * @param string $_updated_at _updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($_updated_at)
    {
        $this->container['_updated_at'] = $_updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
