<?php
/**
 * InlineResponse20029Departments
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Omnichannel
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.67
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse20029Departments Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20029Departments implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_29_departments';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        '_id' => 'string',
        'enabled' => 'bool',
        'name' => 'string',
        'description' => 'string',
        'show_on_registration' => 'bool',
        'show_on_offline_form' => 'bool',
        'request_tag_before_closing_chat' => 'bool',
        'email' => 'string',
        'chat_closing_tags' => 'object[]',
        'offline_message_channel_name' => 'string',
        'abandoned_rooms_close_custom_message' => 'string',
        'waiting_queue_message' => 'string',
        'departments_allowed_to_forward' => 'string',
        '_updated_at' => 'string',
        'num_agents' => 'int',
        'ancestors' => 'string[]',
        'max_number_simultaneous_chat' => 'string',
        'type' => 'string',
        'visitor_inactivity_timeout_in_seconds' => 'string',
        'parent_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        '_id' => null,
        'enabled' => null,
        'name' => null,
        'description' => null,
        'show_on_registration' => null,
        'show_on_offline_form' => null,
        'request_tag_before_closing_chat' => null,
        'email' => null,
        'chat_closing_tags' => null,
        'offline_message_channel_name' => null,
        'abandoned_rooms_close_custom_message' => null,
        'waiting_queue_message' => null,
        'departments_allowed_to_forward' => null,
        '_updated_at' => null,
        'num_agents' => null,
        'ancestors' => null,
        'max_number_simultaneous_chat' => null,
        'type' => null,
        'visitor_inactivity_timeout_in_seconds' => null,
        'parent_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        '_id' => '_id',
        'enabled' => 'enabled',
        'name' => 'name',
        'description' => 'description',
        'show_on_registration' => 'showOnRegistration',
        'show_on_offline_form' => 'showOnOfflineForm',
        'request_tag_before_closing_chat' => 'requestTagBeforeClosingChat',
        'email' => 'email',
        'chat_closing_tags' => 'chatClosingTags',
        'offline_message_channel_name' => 'offlineMessageChannelName',
        'abandoned_rooms_close_custom_message' => 'abandonedRoomsCloseCustomMessage',
        'waiting_queue_message' => 'waitingQueueMessage',
        'departments_allowed_to_forward' => 'departmentsAllowedToForward',
        '_updated_at' => '_updatedAt',
        'num_agents' => 'numAgents',
        'ancestors' => 'ancestors',
        'max_number_simultaneous_chat' => 'maxNumberSimultaneousChat',
        'type' => 'type',
        'visitor_inactivity_timeout_in_seconds' => 'visitorInactivityTimeoutInSeconds',
        'parent_id' => 'parentId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        '_id' => 'setId',
        'enabled' => 'setEnabled',
        'name' => 'setName',
        'description' => 'setDescription',
        'show_on_registration' => 'setShowOnRegistration',
        'show_on_offline_form' => 'setShowOnOfflineForm',
        'request_tag_before_closing_chat' => 'setRequestTagBeforeClosingChat',
        'email' => 'setEmail',
        'chat_closing_tags' => 'setChatClosingTags',
        'offline_message_channel_name' => 'setOfflineMessageChannelName',
        'abandoned_rooms_close_custom_message' => 'setAbandonedRoomsCloseCustomMessage',
        'waiting_queue_message' => 'setWaitingQueueMessage',
        'departments_allowed_to_forward' => 'setDepartmentsAllowedToForward',
        '_updated_at' => 'setUpdatedAt',
        'num_agents' => 'setNumAgents',
        'ancestors' => 'setAncestors',
        'max_number_simultaneous_chat' => 'setMaxNumberSimultaneousChat',
        'type' => 'setType',
        'visitor_inactivity_timeout_in_seconds' => 'setVisitorInactivityTimeoutInSeconds',
        'parent_id' => 'setParentId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        '_id' => 'getId',
        'enabled' => 'getEnabled',
        'name' => 'getName',
        'description' => 'getDescription',
        'show_on_registration' => 'getShowOnRegistration',
        'show_on_offline_form' => 'getShowOnOfflineForm',
        'request_tag_before_closing_chat' => 'getRequestTagBeforeClosingChat',
        'email' => 'getEmail',
        'chat_closing_tags' => 'getChatClosingTags',
        'offline_message_channel_name' => 'getOfflineMessageChannelName',
        'abandoned_rooms_close_custom_message' => 'getAbandonedRoomsCloseCustomMessage',
        'waiting_queue_message' => 'getWaitingQueueMessage',
        'departments_allowed_to_forward' => 'getDepartmentsAllowedToForward',
        '_updated_at' => 'getUpdatedAt',
        'num_agents' => 'getNumAgents',
        'ancestors' => 'getAncestors',
        'max_number_simultaneous_chat' => 'getMaxNumberSimultaneousChat',
        'type' => 'getType',
        'visitor_inactivity_timeout_in_seconds' => 'getVisitorInactivityTimeoutInSeconds',
        'parent_id' => 'getParentId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['_id'] = isset($data['_id']) ? $data['_id'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['show_on_registration'] = isset($data['show_on_registration']) ? $data['show_on_registration'] : null;
        $this->container['show_on_offline_form'] = isset($data['show_on_offline_form']) ? $data['show_on_offline_form'] : null;
        $this->container['request_tag_before_closing_chat'] = isset($data['request_tag_before_closing_chat']) ? $data['request_tag_before_closing_chat'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['chat_closing_tags'] = isset($data['chat_closing_tags']) ? $data['chat_closing_tags'] : null;
        $this->container['offline_message_channel_name'] = isset($data['offline_message_channel_name']) ? $data['offline_message_channel_name'] : null;
        $this->container['abandoned_rooms_close_custom_message'] = isset($data['abandoned_rooms_close_custom_message']) ? $data['abandoned_rooms_close_custom_message'] : null;
        $this->container['waiting_queue_message'] = isset($data['waiting_queue_message']) ? $data['waiting_queue_message'] : null;
        $this->container['departments_allowed_to_forward'] = isset($data['departments_allowed_to_forward']) ? $data['departments_allowed_to_forward'] : null;
        $this->container['_updated_at'] = isset($data['_updated_at']) ? $data['_updated_at'] : null;
        $this->container['num_agents'] = isset($data['num_agents']) ? $data['num_agents'] : null;
        $this->container['ancestors'] = isset($data['ancestors']) ? $data['ancestors'] : null;
        $this->container['max_number_simultaneous_chat'] = isset($data['max_number_simultaneous_chat']) ? $data['max_number_simultaneous_chat'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['visitor_inactivity_timeout_in_seconds'] = isset($data['visitor_inactivity_timeout_in_seconds']) ? $data['visitor_inactivity_timeout_in_seconds'] : null;
        $this->container['parent_id'] = isset($data['parent_id']) ? $data['parent_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets _id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['_id'];
    }

    /**
     * Sets _id
     *
     * @param string $_id _id
     *
     * @return $this
     */
    public function setId($_id)
    {
        $this->container['_id'] = $_id;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets show_on_registration
     *
     * @return bool
     */
    public function getShowOnRegistration()
    {
        return $this->container['show_on_registration'];
    }

    /**
     * Sets show_on_registration
     *
     * @param bool $show_on_registration show_on_registration
     *
     * @return $this
     */
    public function setShowOnRegistration($show_on_registration)
    {
        $this->container['show_on_registration'] = $show_on_registration;

        return $this;
    }

    /**
     * Gets show_on_offline_form
     *
     * @return bool
     */
    public function getShowOnOfflineForm()
    {
        return $this->container['show_on_offline_form'];
    }

    /**
     * Sets show_on_offline_form
     *
     * @param bool $show_on_offline_form show_on_offline_form
     *
     * @return $this
     */
    public function setShowOnOfflineForm($show_on_offline_form)
    {
        $this->container['show_on_offline_form'] = $show_on_offline_form;

        return $this;
    }

    /**
     * Gets request_tag_before_closing_chat
     *
     * @return bool
     */
    public function getRequestTagBeforeClosingChat()
    {
        return $this->container['request_tag_before_closing_chat'];
    }

    /**
     * Sets request_tag_before_closing_chat
     *
     * @param bool $request_tag_before_closing_chat request_tag_before_closing_chat
     *
     * @return $this
     */
    public function setRequestTagBeforeClosingChat($request_tag_before_closing_chat)
    {
        $this->container['request_tag_before_closing_chat'] = $request_tag_before_closing_chat;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets chat_closing_tags
     *
     * @return object[]
     */
    public function getChatClosingTags()
    {
        return $this->container['chat_closing_tags'];
    }

    /**
     * Sets chat_closing_tags
     *
     * @param object[] $chat_closing_tags chat_closing_tags
     *
     * @return $this
     */
    public function setChatClosingTags($chat_closing_tags)
    {
        $this->container['chat_closing_tags'] = $chat_closing_tags;

        return $this;
    }

    /**
     * Gets offline_message_channel_name
     *
     * @return string
     */
    public function getOfflineMessageChannelName()
    {
        return $this->container['offline_message_channel_name'];
    }

    /**
     * Sets offline_message_channel_name
     *
     * @param string $offline_message_channel_name offline_message_channel_name
     *
     * @return $this
     */
    public function setOfflineMessageChannelName($offline_message_channel_name)
    {
        $this->container['offline_message_channel_name'] = $offline_message_channel_name;

        return $this;
    }

    /**
     * Gets abandoned_rooms_close_custom_message
     *
     * @return string
     */
    public function getAbandonedRoomsCloseCustomMessage()
    {
        return $this->container['abandoned_rooms_close_custom_message'];
    }

    /**
     * Sets abandoned_rooms_close_custom_message
     *
     * @param string $abandoned_rooms_close_custom_message abandoned_rooms_close_custom_message
     *
     * @return $this
     */
    public function setAbandonedRoomsCloseCustomMessage($abandoned_rooms_close_custom_message)
    {
        $this->container['abandoned_rooms_close_custom_message'] = $abandoned_rooms_close_custom_message;

        return $this;
    }

    /**
     * Gets waiting_queue_message
     *
     * @return string
     */
    public function getWaitingQueueMessage()
    {
        return $this->container['waiting_queue_message'];
    }

    /**
     * Sets waiting_queue_message
     *
     * @param string $waiting_queue_message waiting_queue_message
     *
     * @return $this
     */
    public function setWaitingQueueMessage($waiting_queue_message)
    {
        $this->container['waiting_queue_message'] = $waiting_queue_message;

        return $this;
    }

    /**
     * Gets departments_allowed_to_forward
     *
     * @return string
     */
    public function getDepartmentsAllowedToForward()
    {
        return $this->container['departments_allowed_to_forward'];
    }

    /**
     * Sets departments_allowed_to_forward
     *
     * @param string $departments_allowed_to_forward departments_allowed_to_forward
     *
     * @return $this
     */
    public function setDepartmentsAllowedToForward($departments_allowed_to_forward)
    {
        $this->container['departments_allowed_to_forward'] = $departments_allowed_to_forward;

        return $this;
    }

    /**
     * Gets _updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['_updated_at'];
    }

    /**
     * Sets _updated_at
     *
     * @param string $_updated_at _updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($_updated_at)
    {
        $this->container['_updated_at'] = $_updated_at;

        return $this;
    }

    /**
     * Gets num_agents
     *
     * @return int
     */
    public function getNumAgents()
    {
        return $this->container['num_agents'];
    }

    /**
     * Sets num_agents
     *
     * @param int $num_agents num_agents
     *
     * @return $this
     */
    public function setNumAgents($num_agents)
    {
        $this->container['num_agents'] = $num_agents;

        return $this;
    }

    /**
     * Gets ancestors
     *
     * @return string[]
     */
    public function getAncestors()
    {
        return $this->container['ancestors'];
    }

    /**
     * Sets ancestors
     *
     * @param string[] $ancestors ancestors
     *
     * @return $this
     */
    public function setAncestors($ancestors)
    {
        $this->container['ancestors'] = $ancestors;

        return $this;
    }

    /**
     * Gets max_number_simultaneous_chat
     *
     * @return string
     */
    public function getMaxNumberSimultaneousChat()
    {
        return $this->container['max_number_simultaneous_chat'];
    }

    /**
     * Sets max_number_simultaneous_chat
     *
     * @param string $max_number_simultaneous_chat max_number_simultaneous_chat
     *
     * @return $this
     */
    public function setMaxNumberSimultaneousChat($max_number_simultaneous_chat)
    {
        $this->container['max_number_simultaneous_chat'] = $max_number_simultaneous_chat;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets visitor_inactivity_timeout_in_seconds
     *
     * @return string
     */
    public function getVisitorInactivityTimeoutInSeconds()
    {
        return $this->container['visitor_inactivity_timeout_in_seconds'];
    }

    /**
     * Sets visitor_inactivity_timeout_in_seconds
     *
     * @param string $visitor_inactivity_timeout_in_seconds visitor_inactivity_timeout_in_seconds
     *
     * @return $this
     */
    public function setVisitorInactivityTimeoutInSeconds($visitor_inactivity_timeout_in_seconds)
    {
        $this->container['visitor_inactivity_timeout_in_seconds'] = $visitor_inactivity_timeout_in_seconds;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return string
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param string $parent_id parent_id
     *
     * @return $this
     */
    public function setParentId($parent_id)
    {
        $this->container['parent_id'] = $parent_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
