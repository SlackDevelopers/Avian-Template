<?php
/**
 * InlineResponse20050Appearance
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Omnichannel
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.67
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse20050Appearance Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20050Appearance implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_50_appearance';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        '_id' => 'string',
        'type' => 'string',
        'group' => 'string',
        'public' => 'bool',
        'i18n_label' => 'string',
        'package_value' => 'bool',
        'value_source' => 'string',
        'hidden' => 'bool',
        'blocked' => 'bool',
        'sorter' => 'int',
        'i18n_description' => 'string',
        'autocomplete' => 'bool',
        'ts' => 'string',
        '_updated_at' => 'string',
        'created_at' => 'string',
        'value' => 'bool',
        'secret' => 'bool',
        'section' => 'string',
        'enterprise' => 'bool',
        'required_on_wizard' => 'bool',
        'env' => 'bool',
        'enable_query' => 'string',
        'editor' => 'string',
        'package_editor' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        '_id' => null,
        'type' => null,
        'group' => null,
        'public' => null,
        'i18n_label' => null,
        'package_value' => null,
        'value_source' => null,
        'hidden' => null,
        'blocked' => null,
        'sorter' => null,
        'i18n_description' => null,
        'autocomplete' => null,
        'ts' => null,
        '_updated_at' => null,
        'created_at' => null,
        'value' => null,
        'secret' => null,
        'section' => null,
        'enterprise' => null,
        'required_on_wizard' => null,
        'env' => null,
        'enable_query' => null,
        'editor' => null,
        'package_editor' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        '_id' => '_id',
        'type' => 'type',
        'group' => 'group',
        'public' => 'public',
        'i18n_label' => 'i18nLabel',
        'package_value' => 'packageValue',
        'value_source' => 'valueSource',
        'hidden' => 'hidden',
        'blocked' => 'blocked',
        'sorter' => 'sorter',
        'i18n_description' => 'i18nDescription',
        'autocomplete' => 'autocomplete',
        'ts' => 'ts',
        '_updated_at' => '_updatedAt',
        'created_at' => 'createdAt',
        'value' => 'value',
        'secret' => 'secret',
        'section' => 'section',
        'enterprise' => 'enterprise',
        'required_on_wizard' => 'requiredOnWizard',
        'env' => 'env',
        'enable_query' => 'enableQuery',
        'editor' => 'editor',
        'package_editor' => 'packageEditor'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        '_id' => 'setId',
        'type' => 'setType',
        'group' => 'setGroup',
        'public' => 'setPublic',
        'i18n_label' => 'setI18nLabel',
        'package_value' => 'setPackageValue',
        'value_source' => 'setValueSource',
        'hidden' => 'setHidden',
        'blocked' => 'setBlocked',
        'sorter' => 'setSorter',
        'i18n_description' => 'setI18nDescription',
        'autocomplete' => 'setAutocomplete',
        'ts' => 'setTs',
        '_updated_at' => 'setUpdatedAt',
        'created_at' => 'setCreatedAt',
        'value' => 'setValue',
        'secret' => 'setSecret',
        'section' => 'setSection',
        'enterprise' => 'setEnterprise',
        'required_on_wizard' => 'setRequiredOnWizard',
        'env' => 'setEnv',
        'enable_query' => 'setEnableQuery',
        'editor' => 'setEditor',
        'package_editor' => 'setPackageEditor'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        '_id' => 'getId',
        'type' => 'getType',
        'group' => 'getGroup',
        'public' => 'getPublic',
        'i18n_label' => 'getI18nLabel',
        'package_value' => 'getPackageValue',
        'value_source' => 'getValueSource',
        'hidden' => 'getHidden',
        'blocked' => 'getBlocked',
        'sorter' => 'getSorter',
        'i18n_description' => 'getI18nDescription',
        'autocomplete' => 'getAutocomplete',
        'ts' => 'getTs',
        '_updated_at' => 'getUpdatedAt',
        'created_at' => 'getCreatedAt',
        'value' => 'getValue',
        'secret' => 'getSecret',
        'section' => 'getSection',
        'enterprise' => 'getEnterprise',
        'required_on_wizard' => 'getRequiredOnWizard',
        'env' => 'getEnv',
        'enable_query' => 'getEnableQuery',
        'editor' => 'getEditor',
        'package_editor' => 'getPackageEditor'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['_id'] = isset($data['_id']) ? $data['_id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['group'] = isset($data['group']) ? $data['group'] : null;
        $this->container['public'] = isset($data['public']) ? $data['public'] : null;
        $this->container['i18n_label'] = isset($data['i18n_label']) ? $data['i18n_label'] : null;
        $this->container['package_value'] = isset($data['package_value']) ? $data['package_value'] : null;
        $this->container['value_source'] = isset($data['value_source']) ? $data['value_source'] : null;
        $this->container['hidden'] = isset($data['hidden']) ? $data['hidden'] : null;
        $this->container['blocked'] = isset($data['blocked']) ? $data['blocked'] : null;
        $this->container['sorter'] = isset($data['sorter']) ? $data['sorter'] : null;
        $this->container['i18n_description'] = isset($data['i18n_description']) ? $data['i18n_description'] : null;
        $this->container['autocomplete'] = isset($data['autocomplete']) ? $data['autocomplete'] : null;
        $this->container['ts'] = isset($data['ts']) ? $data['ts'] : null;
        $this->container['_updated_at'] = isset($data['_updated_at']) ? $data['_updated_at'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
        $this->container['secret'] = isset($data['secret']) ? $data['secret'] : null;
        $this->container['section'] = isset($data['section']) ? $data['section'] : null;
        $this->container['enterprise'] = isset($data['enterprise']) ? $data['enterprise'] : null;
        $this->container['required_on_wizard'] = isset($data['required_on_wizard']) ? $data['required_on_wizard'] : null;
        $this->container['env'] = isset($data['env']) ? $data['env'] : null;
        $this->container['enable_query'] = isset($data['enable_query']) ? $data['enable_query'] : null;
        $this->container['editor'] = isset($data['editor']) ? $data['editor'] : null;
        $this->container['package_editor'] = isset($data['package_editor']) ? $data['package_editor'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets _id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['_id'];
    }

    /**
     * Sets _id
     *
     * @param string $_id _id
     *
     * @return $this
     */
    public function setId($_id)
    {
        $this->container['_id'] = $_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets group
     *
     * @return string
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param string $group group
     *
     * @return $this
     */
    public function setGroup($group)
    {
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets public
     *
     * @return bool
     */
    public function getPublic()
    {
        return $this->container['public'];
    }

    /**
     * Sets public
     *
     * @param bool $public public
     *
     * @return $this
     */
    public function setPublic($public)
    {
        $this->container['public'] = $public;

        return $this;
    }

    /**
     * Gets i18n_label
     *
     * @return string
     */
    public function getI18nLabel()
    {
        return $this->container['i18n_label'];
    }

    /**
     * Sets i18n_label
     *
     * @param string $i18n_label i18n_label
     *
     * @return $this
     */
    public function setI18nLabel($i18n_label)
    {
        $this->container['i18n_label'] = $i18n_label;

        return $this;
    }

    /**
     * Gets package_value
     *
     * @return bool
     */
    public function getPackageValue()
    {
        return $this->container['package_value'];
    }

    /**
     * Sets package_value
     *
     * @param bool $package_value package_value
     *
     * @return $this
     */
    public function setPackageValue($package_value)
    {
        $this->container['package_value'] = $package_value;

        return $this;
    }

    /**
     * Gets value_source
     *
     * @return string
     */
    public function getValueSource()
    {
        return $this->container['value_source'];
    }

    /**
     * Sets value_source
     *
     * @param string $value_source value_source
     *
     * @return $this
     */
    public function setValueSource($value_source)
    {
        $this->container['value_source'] = $value_source;

        return $this;
    }

    /**
     * Gets hidden
     *
     * @return bool
     */
    public function getHidden()
    {
        return $this->container['hidden'];
    }

    /**
     * Sets hidden
     *
     * @param bool $hidden hidden
     *
     * @return $this
     */
    public function setHidden($hidden)
    {
        $this->container['hidden'] = $hidden;

        return $this;
    }

    /**
     * Gets blocked
     *
     * @return bool
     */
    public function getBlocked()
    {
        return $this->container['blocked'];
    }

    /**
     * Sets blocked
     *
     * @param bool $blocked blocked
     *
     * @return $this
     */
    public function setBlocked($blocked)
    {
        $this->container['blocked'] = $blocked;

        return $this;
    }

    /**
     * Gets sorter
     *
     * @return int
     */
    public function getSorter()
    {
        return $this->container['sorter'];
    }

    /**
     * Sets sorter
     *
     * @param int $sorter sorter
     *
     * @return $this
     */
    public function setSorter($sorter)
    {
        $this->container['sorter'] = $sorter;

        return $this;
    }

    /**
     * Gets i18n_description
     *
     * @return string
     */
    public function getI18nDescription()
    {
        return $this->container['i18n_description'];
    }

    /**
     * Sets i18n_description
     *
     * @param string $i18n_description i18n_description
     *
     * @return $this
     */
    public function setI18nDescription($i18n_description)
    {
        $this->container['i18n_description'] = $i18n_description;

        return $this;
    }

    /**
     * Gets autocomplete
     *
     * @return bool
     */
    public function getAutocomplete()
    {
        return $this->container['autocomplete'];
    }

    /**
     * Sets autocomplete
     *
     * @param bool $autocomplete autocomplete
     *
     * @return $this
     */
    public function setAutocomplete($autocomplete)
    {
        $this->container['autocomplete'] = $autocomplete;

        return $this;
    }

    /**
     * Gets ts
     *
     * @return string
     */
    public function getTs()
    {
        return $this->container['ts'];
    }

    /**
     * Sets ts
     *
     * @param string $ts ts
     *
     * @return $this
     */
    public function setTs($ts)
    {
        $this->container['ts'] = $ts;

        return $this;
    }

    /**
     * Gets _updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['_updated_at'];
    }

    /**
     * Sets _updated_at
     *
     * @param string $_updated_at _updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($_updated_at)
    {
        $this->container['_updated_at'] = $_updated_at;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets value
     *
     * @return bool
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param bool $value value
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets secret
     *
     * @return bool
     */
    public function getSecret()
    {
        return $this->container['secret'];
    }

    /**
     * Sets secret
     *
     * @param bool $secret secret
     *
     * @return $this
     */
    public function setSecret($secret)
    {
        $this->container['secret'] = $secret;

        return $this;
    }

    /**
     * Gets section
     *
     * @return string
     */
    public function getSection()
    {
        return $this->container['section'];
    }

    /**
     * Sets section
     *
     * @param string $section section
     *
     * @return $this
     */
    public function setSection($section)
    {
        $this->container['section'] = $section;

        return $this;
    }

    /**
     * Gets enterprise
     *
     * @return bool
     */
    public function getEnterprise()
    {
        return $this->container['enterprise'];
    }

    /**
     * Sets enterprise
     *
     * @param bool $enterprise enterprise
     *
     * @return $this
     */
    public function setEnterprise($enterprise)
    {
        $this->container['enterprise'] = $enterprise;

        return $this;
    }

    /**
     * Gets required_on_wizard
     *
     * @return bool
     */
    public function getRequiredOnWizard()
    {
        return $this->container['required_on_wizard'];
    }

    /**
     * Sets required_on_wizard
     *
     * @param bool $required_on_wizard required_on_wizard
     *
     * @return $this
     */
    public function setRequiredOnWizard($required_on_wizard)
    {
        $this->container['required_on_wizard'] = $required_on_wizard;

        return $this;
    }

    /**
     * Gets env
     *
     * @return bool
     */
    public function getEnv()
    {
        return $this->container['env'];
    }

    /**
     * Sets env
     *
     * @param bool $env env
     *
     * @return $this
     */
    public function setEnv($env)
    {
        $this->container['env'] = $env;

        return $this;
    }

    /**
     * Gets enable_query
     *
     * @return string
     */
    public function getEnableQuery()
    {
        return $this->container['enable_query'];
    }

    /**
     * Sets enable_query
     *
     * @param string $enable_query enable_query
     *
     * @return $this
     */
    public function setEnableQuery($enable_query)
    {
        $this->container['enable_query'] = $enable_query;

        return $this;
    }

    /**
     * Gets editor
     *
     * @return string
     */
    public function getEditor()
    {
        return $this->container['editor'];
    }

    /**
     * Sets editor
     *
     * @param string $editor editor
     *
     * @return $this
     */
    public function setEditor($editor)
    {
        $this->container['editor'] = $editor;

        return $this;
    }

    /**
     * Gets package_editor
     *
     * @return string
     */
    public function getPackageEditor()
    {
        return $this->container['package_editor'];
    }

    /**
     * Sets package_editor
     *
     * @param string $package_editor package_editor
     *
     * @return $this
     */
    public function setPackageEditor($package_editor)
    {
        $this->container['package_editor'] = $package_editor;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
