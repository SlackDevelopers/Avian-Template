<?php
/**
 * SmsincomingServiceBody
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Omnichannel
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.67
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SmsincomingServiceBody Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SmsincomingServiceBody implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'smsincoming_service_body';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'from' => 'string',
        'to' => 'string',
        'body' => 'string',
        'to_country' => 'string',
        'to_state' => 'string',
        'to_city' => 'string',
        'to_zip' => 'string',
        'from_country' => 'string',
        'from_state' => 'string',
        'from_city' => 'string',
        'from_zip' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'from' => null,
        'to' => null,
        'body' => null,
        'to_country' => null,
        'to_state' => null,
        'to_city' => null,
        'to_zip' => null,
        'from_country' => null,
        'from_state' => null,
        'from_city' => null,
        'from_zip' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'from' => 'From',
        'to' => 'To',
        'body' => 'Body',
        'to_country' => 'ToCountry',
        'to_state' => 'ToState',
        'to_city' => 'ToCity',
        'to_zip' => 'ToZip',
        'from_country' => 'FromCountry',
        'from_state' => 'FromState',
        'from_city' => 'FromCity',
        'from_zip' => 'FromZip'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'from' => 'setFrom',
        'to' => 'setTo',
        'body' => 'setBody',
        'to_country' => 'setToCountry',
        'to_state' => 'setToState',
        'to_city' => 'setToCity',
        'to_zip' => 'setToZip',
        'from_country' => 'setFromCountry',
        'from_state' => 'setFromState',
        'from_city' => 'setFromCity',
        'from_zip' => 'setFromZip'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'from' => 'getFrom',
        'to' => 'getTo',
        'body' => 'getBody',
        'to_country' => 'getToCountry',
        'to_state' => 'getToState',
        'to_city' => 'getToCity',
        'to_zip' => 'getToZip',
        'from_country' => 'getFromCountry',
        'from_state' => 'getFromState',
        'from_city' => 'getFromCity',
        'from_zip' => 'getFromZip'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['from'] = isset($data['from']) ? $data['from'] : null;
        $this->container['to'] = isset($data['to']) ? $data['to'] : null;
        $this->container['body'] = isset($data['body']) ? $data['body'] : null;
        $this->container['to_country'] = isset($data['to_country']) ? $data['to_country'] : null;
        $this->container['to_state'] = isset($data['to_state']) ? $data['to_state'] : null;
        $this->container['to_city'] = isset($data['to_city']) ? $data['to_city'] : null;
        $this->container['to_zip'] = isset($data['to_zip']) ? $data['to_zip'] : null;
        $this->container['from_country'] = isset($data['from_country']) ? $data['from_country'] : null;
        $this->container['from_state'] = isset($data['from_state']) ? $data['from_state'] : null;
        $this->container['from_city'] = isset($data['from_city']) ? $data['from_city'] : null;
        $this->container['from_zip'] = isset($data['from_zip']) ? $data['from_zip'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets from
     *
     * @return string
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param string $from from
     *
     * @return $this
     */
    public function setFrom($from)
    {
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets to
     *
     * @return string
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param string $to to
     *
     * @return $this
     */
    public function setTo($to)
    {
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets body
     *
     * @return string
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param string $body body
     *
     * @return $this
     */
    public function setBody($body)
    {
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets to_country
     *
     * @return string
     */
    public function getToCountry()
    {
        return $this->container['to_country'];
    }

    /**
     * Sets to_country
     *
     * @param string $to_country to_country
     *
     * @return $this
     */
    public function setToCountry($to_country)
    {
        $this->container['to_country'] = $to_country;

        return $this;
    }

    /**
     * Gets to_state
     *
     * @return string
     */
    public function getToState()
    {
        return $this->container['to_state'];
    }

    /**
     * Sets to_state
     *
     * @param string $to_state to_state
     *
     * @return $this
     */
    public function setToState($to_state)
    {
        $this->container['to_state'] = $to_state;

        return $this;
    }

    /**
     * Gets to_city
     *
     * @return string
     */
    public function getToCity()
    {
        return $this->container['to_city'];
    }

    /**
     * Sets to_city
     *
     * @param string $to_city to_city
     *
     * @return $this
     */
    public function setToCity($to_city)
    {
        $this->container['to_city'] = $to_city;

        return $this;
    }

    /**
     * Gets to_zip
     *
     * @return string
     */
    public function getToZip()
    {
        return $this->container['to_zip'];
    }

    /**
     * Sets to_zip
     *
     * @param string $to_zip to_zip
     *
     * @return $this
     */
    public function setToZip($to_zip)
    {
        $this->container['to_zip'] = $to_zip;

        return $this;
    }

    /**
     * Gets from_country
     *
     * @return string
     */
    public function getFromCountry()
    {
        return $this->container['from_country'];
    }

    /**
     * Sets from_country
     *
     * @param string $from_country from_country
     *
     * @return $this
     */
    public function setFromCountry($from_country)
    {
        $this->container['from_country'] = $from_country;

        return $this;
    }

    /**
     * Gets from_state
     *
     * @return string
     */
    public function getFromState()
    {
        return $this->container['from_state'];
    }

    /**
     * Sets from_state
     *
     * @param string $from_state from_state
     *
     * @return $this
     */
    public function setFromState($from_state)
    {
        $this->container['from_state'] = $from_state;

        return $this;
    }

    /**
     * Gets from_city
     *
     * @return string
     */
    public function getFromCity()
    {
        return $this->container['from_city'];
    }

    /**
     * Sets from_city
     *
     * @param string $from_city from_city
     *
     * @return $this
     */
    public function setFromCity($from_city)
    {
        $this->container['from_city'] = $from_city;

        return $this;
    }

    /**
     * Gets from_zip
     *
     * @return string
     */
    public function getFromZip()
    {
        return $this->container['from_zip'];
    }

    /**
     * Sets from_zip
     *
     * @param string $from_zip from_zip
     *
     * @return $this
     */
    public function setFromZip($from_zip)
    {
        $this->container['from_zip'] = $from_zip;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
