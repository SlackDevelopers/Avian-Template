<?php
/**
 * InlineResponse20018Rooms
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Omnichannel
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.67
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse20018Rooms Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20018Rooms implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_18_rooms';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        '_id' => 'string',
        'msgs' => 'int',
        'users_count' => 'int',
        'lm' => 'string',
        'fname' => 'string',
        't' => 'string',
        'ts' => 'string',
        'v' => '\Swagger\Client\Model\InlineResponse20018V',
        'served_by' => '\Swagger\Client\Model\InlineResponse20018ServedBy',
        'cl' => 'bool',
        'open' => 'bool',
        'waiting_response' => 'bool',
        'department_id' => 'string',
        '_updated_at' => 'string',
        'last_message' => '\Swagger\Client\Model\InlineResponse20018LastMessage',
        'metrics' => '\Swagger\Client\Model\InlineResponse20018Metrics',
        'livechat_data' => '\Swagger\Client\Model\InlineResponse20018LivechatData',
        'tags' => 'string[]',
        'name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        '_id' => null,
        'msgs' => null,
        'users_count' => null,
        'lm' => null,
        'fname' => null,
        't' => null,
        'ts' => null,
        'v' => null,
        'served_by' => null,
        'cl' => null,
        'open' => null,
        'waiting_response' => null,
        'department_id' => null,
        '_updated_at' => null,
        'last_message' => null,
        'metrics' => null,
        'livechat_data' => null,
        'tags' => null,
        'name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        '_id' => '_id',
        'msgs' => 'msgs',
        'users_count' => 'usersCount',
        'lm' => 'lm',
        'fname' => 'fname',
        't' => 't',
        'ts' => 'ts',
        'v' => 'v',
        'served_by' => 'servedBy',
        'cl' => 'cl',
        'open' => 'open',
        'waiting_response' => 'waitingResponse',
        'department_id' => 'departmentId',
        '_updated_at' => '_updatedAt',
        'last_message' => 'lastMessage',
        'metrics' => 'metrics',
        'livechat_data' => 'livechatData',
        'tags' => 'tags',
        'name' => 'name'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        '_id' => 'setId',
        'msgs' => 'setMsgs',
        'users_count' => 'setUsersCount',
        'lm' => 'setLm',
        'fname' => 'setFname',
        't' => 'setT',
        'ts' => 'setTs',
        'v' => 'setV',
        'served_by' => 'setServedBy',
        'cl' => 'setCl',
        'open' => 'setOpen',
        'waiting_response' => 'setWaitingResponse',
        'department_id' => 'setDepartmentId',
        '_updated_at' => 'setUpdatedAt',
        'last_message' => 'setLastMessage',
        'metrics' => 'setMetrics',
        'livechat_data' => 'setLivechatData',
        'tags' => 'setTags',
        'name' => 'setName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        '_id' => 'getId',
        'msgs' => 'getMsgs',
        'users_count' => 'getUsersCount',
        'lm' => 'getLm',
        'fname' => 'getFname',
        't' => 'getT',
        'ts' => 'getTs',
        'v' => 'getV',
        'served_by' => 'getServedBy',
        'cl' => 'getCl',
        'open' => 'getOpen',
        'waiting_response' => 'getWaitingResponse',
        'department_id' => 'getDepartmentId',
        '_updated_at' => 'getUpdatedAt',
        'last_message' => 'getLastMessage',
        'metrics' => 'getMetrics',
        'livechat_data' => 'getLivechatData',
        'tags' => 'getTags',
        'name' => 'getName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['_id'] = isset($data['_id']) ? $data['_id'] : null;
        $this->container['msgs'] = isset($data['msgs']) ? $data['msgs'] : null;
        $this->container['users_count'] = isset($data['users_count']) ? $data['users_count'] : null;
        $this->container['lm'] = isset($data['lm']) ? $data['lm'] : null;
        $this->container['fname'] = isset($data['fname']) ? $data['fname'] : null;
        $this->container['t'] = isset($data['t']) ? $data['t'] : null;
        $this->container['ts'] = isset($data['ts']) ? $data['ts'] : null;
        $this->container['v'] = isset($data['v']) ? $data['v'] : null;
        $this->container['served_by'] = isset($data['served_by']) ? $data['served_by'] : null;
        $this->container['cl'] = isset($data['cl']) ? $data['cl'] : null;
        $this->container['open'] = isset($data['open']) ? $data['open'] : null;
        $this->container['waiting_response'] = isset($data['waiting_response']) ? $data['waiting_response'] : null;
        $this->container['department_id'] = isset($data['department_id']) ? $data['department_id'] : null;
        $this->container['_updated_at'] = isset($data['_updated_at']) ? $data['_updated_at'] : null;
        $this->container['last_message'] = isset($data['last_message']) ? $data['last_message'] : null;
        $this->container['metrics'] = isset($data['metrics']) ? $data['metrics'] : null;
        $this->container['livechat_data'] = isset($data['livechat_data']) ? $data['livechat_data'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets _id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['_id'];
    }

    /**
     * Sets _id
     *
     * @param string $_id _id
     *
     * @return $this
     */
    public function setId($_id)
    {
        $this->container['_id'] = $_id;

        return $this;
    }

    /**
     * Gets msgs
     *
     * @return int
     */
    public function getMsgs()
    {
        return $this->container['msgs'];
    }

    /**
     * Sets msgs
     *
     * @param int $msgs msgs
     *
     * @return $this
     */
    public function setMsgs($msgs)
    {
        $this->container['msgs'] = $msgs;

        return $this;
    }

    /**
     * Gets users_count
     *
     * @return int
     */
    public function getUsersCount()
    {
        return $this->container['users_count'];
    }

    /**
     * Sets users_count
     *
     * @param int $users_count users_count
     *
     * @return $this
     */
    public function setUsersCount($users_count)
    {
        $this->container['users_count'] = $users_count;

        return $this;
    }

    /**
     * Gets lm
     *
     * @return string
     */
    public function getLm()
    {
        return $this->container['lm'];
    }

    /**
     * Sets lm
     *
     * @param string $lm lm
     *
     * @return $this
     */
    public function setLm($lm)
    {
        $this->container['lm'] = $lm;

        return $this;
    }

    /**
     * Gets fname
     *
     * @return string
     */
    public function getFname()
    {
        return $this->container['fname'];
    }

    /**
     * Sets fname
     *
     * @param string $fname fname
     *
     * @return $this
     */
    public function setFname($fname)
    {
        $this->container['fname'] = $fname;

        return $this;
    }

    /**
     * Gets t
     *
     * @return string
     */
    public function getT()
    {
        return $this->container['t'];
    }

    /**
     * Sets t
     *
     * @param string $t t
     *
     * @return $this
     */
    public function setT($t)
    {
        $this->container['t'] = $t;

        return $this;
    }

    /**
     * Gets ts
     *
     * @return string
     */
    public function getTs()
    {
        return $this->container['ts'];
    }

    /**
     * Sets ts
     *
     * @param string $ts ts
     *
     * @return $this
     */
    public function setTs($ts)
    {
        $this->container['ts'] = $ts;

        return $this;
    }

    /**
     * Gets v
     *
     * @return \Swagger\Client\Model\InlineResponse20018V
     */
    public function getV()
    {
        return $this->container['v'];
    }

    /**
     * Sets v
     *
     * @param \Swagger\Client\Model\InlineResponse20018V $v v
     *
     * @return $this
     */
    public function setV($v)
    {
        $this->container['v'] = $v;

        return $this;
    }

    /**
     * Gets served_by
     *
     * @return \Swagger\Client\Model\InlineResponse20018ServedBy
     */
    public function getServedBy()
    {
        return $this->container['served_by'];
    }

    /**
     * Sets served_by
     *
     * @param \Swagger\Client\Model\InlineResponse20018ServedBy $served_by served_by
     *
     * @return $this
     */
    public function setServedBy($served_by)
    {
        $this->container['served_by'] = $served_by;

        return $this;
    }

    /**
     * Gets cl
     *
     * @return bool
     */
    public function getCl()
    {
        return $this->container['cl'];
    }

    /**
     * Sets cl
     *
     * @param bool $cl cl
     *
     * @return $this
     */
    public function setCl($cl)
    {
        $this->container['cl'] = $cl;

        return $this;
    }

    /**
     * Gets open
     *
     * @return bool
     */
    public function getOpen()
    {
        return $this->container['open'];
    }

    /**
     * Sets open
     *
     * @param bool $open open
     *
     * @return $this
     */
    public function setOpen($open)
    {
        $this->container['open'] = $open;

        return $this;
    }

    /**
     * Gets waiting_response
     *
     * @return bool
     */
    public function getWaitingResponse()
    {
        return $this->container['waiting_response'];
    }

    /**
     * Sets waiting_response
     *
     * @param bool $waiting_response waiting_response
     *
     * @return $this
     */
    public function setWaitingResponse($waiting_response)
    {
        $this->container['waiting_response'] = $waiting_response;

        return $this;
    }

    /**
     * Gets department_id
     *
     * @return string
     */
    public function getDepartmentId()
    {
        return $this->container['department_id'];
    }

    /**
     * Sets department_id
     *
     * @param string $department_id department_id
     *
     * @return $this
     */
    public function setDepartmentId($department_id)
    {
        $this->container['department_id'] = $department_id;

        return $this;
    }

    /**
     * Gets _updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['_updated_at'];
    }

    /**
     * Sets _updated_at
     *
     * @param string $_updated_at _updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($_updated_at)
    {
        $this->container['_updated_at'] = $_updated_at;

        return $this;
    }

    /**
     * Gets last_message
     *
     * @return \Swagger\Client\Model\InlineResponse20018LastMessage
     */
    public function getLastMessage()
    {
        return $this->container['last_message'];
    }

    /**
     * Sets last_message
     *
     * @param \Swagger\Client\Model\InlineResponse20018LastMessage $last_message last_message
     *
     * @return $this
     */
    public function setLastMessage($last_message)
    {
        $this->container['last_message'] = $last_message;

        return $this;
    }

    /**
     * Gets metrics
     *
     * @return \Swagger\Client\Model\InlineResponse20018Metrics
     */
    public function getMetrics()
    {
        return $this->container['metrics'];
    }

    /**
     * Sets metrics
     *
     * @param \Swagger\Client\Model\InlineResponse20018Metrics $metrics metrics
     *
     * @return $this
     */
    public function setMetrics($metrics)
    {
        $this->container['metrics'] = $metrics;

        return $this;
    }

    /**
     * Gets livechat_data
     *
     * @return \Swagger\Client\Model\InlineResponse20018LivechatData
     */
    public function getLivechatData()
    {
        return $this->container['livechat_data'];
    }

    /**
     * Sets livechat_data
     *
     * @param \Swagger\Client\Model\InlineResponse20018LivechatData $livechat_data livechat_data
     *
     * @return $this
     */
    public function setLivechatData($livechat_data)
    {
        $this->container['livechat_data'] = $livechat_data;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
