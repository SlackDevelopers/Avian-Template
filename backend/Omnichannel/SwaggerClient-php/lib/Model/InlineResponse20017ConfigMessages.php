<?php
/**
 * InlineResponse20017ConfigMessages
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Omnichannel
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.67
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse20017ConfigMessages Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20017ConfigMessages implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_17_config_messages';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'offline_message' => 'string',
        'offline_success_message' => 'string',
        'offline_unavailable_message' => 'string',
        'conversation_finished_message' => 'string',
        'transcript_message' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'offline_message' => null,
        'offline_success_message' => null,
        'offline_unavailable_message' => null,
        'conversation_finished_message' => null,
        'transcript_message' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'offline_message' => 'offlineMessage',
        'offline_success_message' => 'offlineSuccessMessage',
        'offline_unavailable_message' => 'offlineUnavailableMessage',
        'conversation_finished_message' => 'conversationFinishedMessage',
        'transcript_message' => 'transcriptMessage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'offline_message' => 'setOfflineMessage',
        'offline_success_message' => 'setOfflineSuccessMessage',
        'offline_unavailable_message' => 'setOfflineUnavailableMessage',
        'conversation_finished_message' => 'setConversationFinishedMessage',
        'transcript_message' => 'setTranscriptMessage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'offline_message' => 'getOfflineMessage',
        'offline_success_message' => 'getOfflineSuccessMessage',
        'offline_unavailable_message' => 'getOfflineUnavailableMessage',
        'conversation_finished_message' => 'getConversationFinishedMessage',
        'transcript_message' => 'getTranscriptMessage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['offline_message'] = isset($data['offline_message']) ? $data['offline_message'] : null;
        $this->container['offline_success_message'] = isset($data['offline_success_message']) ? $data['offline_success_message'] : null;
        $this->container['offline_unavailable_message'] = isset($data['offline_unavailable_message']) ? $data['offline_unavailable_message'] : null;
        $this->container['conversation_finished_message'] = isset($data['conversation_finished_message']) ? $data['conversation_finished_message'] : null;
        $this->container['transcript_message'] = isset($data['transcript_message']) ? $data['transcript_message'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets offline_message
     *
     * @return string
     */
    public function getOfflineMessage()
    {
        return $this->container['offline_message'];
    }

    /**
     * Sets offline_message
     *
     * @param string $offline_message offline_message
     *
     * @return $this
     */
    public function setOfflineMessage($offline_message)
    {
        $this->container['offline_message'] = $offline_message;

        return $this;
    }

    /**
     * Gets offline_success_message
     *
     * @return string
     */
    public function getOfflineSuccessMessage()
    {
        return $this->container['offline_success_message'];
    }

    /**
     * Sets offline_success_message
     *
     * @param string $offline_success_message offline_success_message
     *
     * @return $this
     */
    public function setOfflineSuccessMessage($offline_success_message)
    {
        $this->container['offline_success_message'] = $offline_success_message;

        return $this;
    }

    /**
     * Gets offline_unavailable_message
     *
     * @return string
     */
    public function getOfflineUnavailableMessage()
    {
        return $this->container['offline_unavailable_message'];
    }

    /**
     * Sets offline_unavailable_message
     *
     * @param string $offline_unavailable_message offline_unavailable_message
     *
     * @return $this
     */
    public function setOfflineUnavailableMessage($offline_unavailable_message)
    {
        $this->container['offline_unavailable_message'] = $offline_unavailable_message;

        return $this;
    }

    /**
     * Gets conversation_finished_message
     *
     * @return string
     */
    public function getConversationFinishedMessage()
    {
        return $this->container['conversation_finished_message'];
    }

    /**
     * Sets conversation_finished_message
     *
     * @param string $conversation_finished_message conversation_finished_message
     *
     * @return $this
     */
    public function setConversationFinishedMessage($conversation_finished_message)
    {
        $this->container['conversation_finished_message'] = $conversation_finished_message;

        return $this;
    }

    /**
     * Gets transcript_message
     *
     * @return string
     */
    public function getTranscriptMessage()
    {
        return $this->container['transcript_message'];
    }

    /**
     * Sets transcript_message
     *
     * @param string $transcript_message transcript_message
     *
     * @return $this
     */
    public function setTranscriptMessage($transcript_message)
    {
        $this->container['transcript_message'] = $transcript_message;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
