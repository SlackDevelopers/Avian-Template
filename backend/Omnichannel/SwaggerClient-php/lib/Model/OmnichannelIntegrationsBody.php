<?php
/**
 * OmnichannelIntegrationsBody
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Omnichannel
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.67
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * OmnichannelIntegrationsBody Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OmnichannelIntegrationsBody implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'omnichannel_integrations_body';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'livechat_webhook_url' => 'string',
        'livechat_secret_token' => 'string',
        'livechat_http_timeout' => 'int',
        'livechat_webhook_on_start' => 'bool',
        'livechat_webhook_on_close' => 'bool',
        'livechat_webhook_on_chat_taken' => 'bool',
        'livechat_webhook_on_chat_queued' => 'bool',
        'livechat_webhook_on_forward' => 'bool',
        'livechat_webhook_on_offline_msg' => 'bool',
        'livechat_webhook_on_visitor_message' => 'bool',
        'livechat_webhook_on_agent_message' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'livechat_webhook_url' => null,
        'livechat_secret_token' => null,
        'livechat_http_timeout' => null,
        'livechat_webhook_on_start' => null,
        'livechat_webhook_on_close' => null,
        'livechat_webhook_on_chat_taken' => null,
        'livechat_webhook_on_chat_queued' => null,
        'livechat_webhook_on_forward' => null,
        'livechat_webhook_on_offline_msg' => null,
        'livechat_webhook_on_visitor_message' => null,
        'livechat_webhook_on_agent_message' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'livechat_webhook_url' => 'LivechatWebhookUrl',
        'livechat_secret_token' => 'LivechatSecretToken',
        'livechat_http_timeout' => 'LivechatHttpTimeout',
        'livechat_webhook_on_start' => 'LivechatWebhookOnStart',
        'livechat_webhook_on_close' => 'LivechatWebhookOnClose',
        'livechat_webhook_on_chat_taken' => 'LivechatWebhookOnChatTaken',
        'livechat_webhook_on_chat_queued' => 'LivechatWebhookOnChatQueued',
        'livechat_webhook_on_forward' => 'LivechatWebhookOnForward',
        'livechat_webhook_on_offline_msg' => 'LivechatWebhookOnOfflineMsg',
        'livechat_webhook_on_visitor_message' => 'LivechatWebhookOnVisitorMessage',
        'livechat_webhook_on_agent_message' => 'LivechatWebhookOnAgentMessage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'livechat_webhook_url' => 'setLivechatWebhookUrl',
        'livechat_secret_token' => 'setLivechatSecretToken',
        'livechat_http_timeout' => 'setLivechatHttpTimeout',
        'livechat_webhook_on_start' => 'setLivechatWebhookOnStart',
        'livechat_webhook_on_close' => 'setLivechatWebhookOnClose',
        'livechat_webhook_on_chat_taken' => 'setLivechatWebhookOnChatTaken',
        'livechat_webhook_on_chat_queued' => 'setLivechatWebhookOnChatQueued',
        'livechat_webhook_on_forward' => 'setLivechatWebhookOnForward',
        'livechat_webhook_on_offline_msg' => 'setLivechatWebhookOnOfflineMsg',
        'livechat_webhook_on_visitor_message' => 'setLivechatWebhookOnVisitorMessage',
        'livechat_webhook_on_agent_message' => 'setLivechatWebhookOnAgentMessage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'livechat_webhook_url' => 'getLivechatWebhookUrl',
        'livechat_secret_token' => 'getLivechatSecretToken',
        'livechat_http_timeout' => 'getLivechatHttpTimeout',
        'livechat_webhook_on_start' => 'getLivechatWebhookOnStart',
        'livechat_webhook_on_close' => 'getLivechatWebhookOnClose',
        'livechat_webhook_on_chat_taken' => 'getLivechatWebhookOnChatTaken',
        'livechat_webhook_on_chat_queued' => 'getLivechatWebhookOnChatQueued',
        'livechat_webhook_on_forward' => 'getLivechatWebhookOnForward',
        'livechat_webhook_on_offline_msg' => 'getLivechatWebhookOnOfflineMsg',
        'livechat_webhook_on_visitor_message' => 'getLivechatWebhookOnVisitorMessage',
        'livechat_webhook_on_agent_message' => 'getLivechatWebhookOnAgentMessage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['livechat_webhook_url'] = isset($data['livechat_webhook_url']) ? $data['livechat_webhook_url'] : null;
        $this->container['livechat_secret_token'] = isset($data['livechat_secret_token']) ? $data['livechat_secret_token'] : null;
        $this->container['livechat_http_timeout'] = isset($data['livechat_http_timeout']) ? $data['livechat_http_timeout'] : null;
        $this->container['livechat_webhook_on_start'] = isset($data['livechat_webhook_on_start']) ? $data['livechat_webhook_on_start'] : null;
        $this->container['livechat_webhook_on_close'] = isset($data['livechat_webhook_on_close']) ? $data['livechat_webhook_on_close'] : null;
        $this->container['livechat_webhook_on_chat_taken'] = isset($data['livechat_webhook_on_chat_taken']) ? $data['livechat_webhook_on_chat_taken'] : null;
        $this->container['livechat_webhook_on_chat_queued'] = isset($data['livechat_webhook_on_chat_queued']) ? $data['livechat_webhook_on_chat_queued'] : null;
        $this->container['livechat_webhook_on_forward'] = isset($data['livechat_webhook_on_forward']) ? $data['livechat_webhook_on_forward'] : null;
        $this->container['livechat_webhook_on_offline_msg'] = isset($data['livechat_webhook_on_offline_msg']) ? $data['livechat_webhook_on_offline_msg'] : null;
        $this->container['livechat_webhook_on_visitor_message'] = isset($data['livechat_webhook_on_visitor_message']) ? $data['livechat_webhook_on_visitor_message'] : null;
        $this->container['livechat_webhook_on_agent_message'] = isset($data['livechat_webhook_on_agent_message']) ? $data['livechat_webhook_on_agent_message'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets livechat_webhook_url
     *
     * @return string
     */
    public function getLivechatWebhookUrl()
    {
        return $this->container['livechat_webhook_url'];
    }

    /**
     * Sets livechat_webhook_url
     *
     * @param string $livechat_webhook_url The destination webhook URL where the data will be sent.
     *
     * @return $this
     */
    public function setLivechatWebhookUrl($livechat_webhook_url)
    {
        $this->container['livechat_webhook_url'] = $livechat_webhook_url;

        return $this;
    }

    /**
     * Gets livechat_secret_token
     *
     * @return string
     */
    public function getLivechatSecretToken()
    {
        return $this->container['livechat_secret_token'];
    }

    /**
     * Sets livechat_secret_token
     *
     * @param string $livechat_secret_token A secret token that can be used to verify the webhook.
     *
     * @return $this
     */
    public function setLivechatSecretToken($livechat_secret_token)
    {
        $this->container['livechat_secret_token'] = $livechat_secret_token;

        return $this;
    }

    /**
     * Gets livechat_http_timeout
     *
     * @return int
     */
    public function getLivechatHttpTimeout()
    {
        return $this->container['livechat_http_timeout'];
    }

    /**
     * Sets livechat_http_timeout
     *
     * @param int $livechat_http_timeout The request timeout value
     *
     * @return $this
     */
    public function setLivechatHttpTimeout($livechat_http_timeout)
    {
        $this->container['livechat_http_timeout'] = $livechat_http_timeout;

        return $this;
    }

    /**
     * Gets livechat_webhook_on_start
     *
     * @return bool
     */
    public function getLivechatWebhookOnStart()
    {
        return $this->container['livechat_webhook_on_start'];
    }

    /**
     * Sets livechat_webhook_on_start
     *
     * @param bool $livechat_webhook_on_start When set to true, data is sent to the configured webhook URL each time a new chat starts.
     *
     * @return $this
     */
    public function setLivechatWebhookOnStart($livechat_webhook_on_start)
    {
        $this->container['livechat_webhook_on_start'] = $livechat_webhook_on_start;

        return $this;
    }

    /**
     * Gets livechat_webhook_on_close
     *
     * @return bool
     */
    public function getLivechatWebhookOnClose()
    {
        return $this->container['livechat_webhook_on_close'];
    }

    /**
     * Sets livechat_webhook_on_close
     *
     * @param bool $livechat_webhook_on_close When set to true, data is sent to the configured webhook URL each time a chat is closed.
     *
     * @return $this
     */
    public function setLivechatWebhookOnClose($livechat_webhook_on_close)
    {
        $this->container['livechat_webhook_on_close'] = $livechat_webhook_on_close;

        return $this;
    }

    /**
     * Gets livechat_webhook_on_chat_taken
     *
     * @return bool
     */
    public function getLivechatWebhookOnChatTaken()
    {
        return $this->container['livechat_webhook_on_chat_taken'];
    }

    /**
     * Sets livechat_webhook_on_chat_taken
     *
     * @param bool $livechat_webhook_on_chat_taken When set to true, data is sent to the configured webhook URL each time a chat is taken.
     *
     * @return $this
     */
    public function setLivechatWebhookOnChatTaken($livechat_webhook_on_chat_taken)
    {
        $this->container['livechat_webhook_on_chat_taken'] = $livechat_webhook_on_chat_taken;

        return $this;
    }

    /**
     * Gets livechat_webhook_on_chat_queued
     *
     * @return bool
     */
    public function getLivechatWebhookOnChatQueued()
    {
        return $this->container['livechat_webhook_on_chat_queued'];
    }

    /**
     * Sets livechat_webhook_on_chat_queued
     *
     * @param bool $livechat_webhook_on_chat_queued When set to true, data is sent to the configured webhook URL each time a chat is queued.
     *
     * @return $this
     */
    public function setLivechatWebhookOnChatQueued($livechat_webhook_on_chat_queued)
    {
        $this->container['livechat_webhook_on_chat_queued'] = $livechat_webhook_on_chat_queued;

        return $this;
    }

    /**
     * Gets livechat_webhook_on_forward
     *
     * @return bool
     */
    public function getLivechatWebhookOnForward()
    {
        return $this->container['livechat_webhook_on_forward'];
    }

    /**
     * Sets livechat_webhook_on_forward
     *
     * @param bool $livechat_webhook_on_forward When set to true, data is sent to the configured webhook URL each time a chat is forwarded.
     *
     * @return $this
     */
    public function setLivechatWebhookOnForward($livechat_webhook_on_forward)
    {
        $this->container['livechat_webhook_on_forward'] = $livechat_webhook_on_forward;

        return $this;
    }

    /**
     * Gets livechat_webhook_on_offline_msg
     *
     * @return bool
     */
    public function getLivechatWebhookOnOfflineMsg()
    {
        return $this->container['livechat_webhook_on_offline_msg'];
    }

    /**
     * Sets livechat_webhook_on_offline_msg
     *
     * @param bool $livechat_webhook_on_offline_msg When set to true, data is sent to the configured webhook URL each time offline messages are sent.
     *
     * @return $this
     */
    public function setLivechatWebhookOnOfflineMsg($livechat_webhook_on_offline_msg)
    {
        $this->container['livechat_webhook_on_offline_msg'] = $livechat_webhook_on_offline_msg;

        return $this;
    }

    /**
     * Gets livechat_webhook_on_visitor_message
     *
     * @return bool
     */
    public function getLivechatWebhookOnVisitorMessage()
    {
        return $this->container['livechat_webhook_on_visitor_message'];
    }

    /**
     * Sets livechat_webhook_on_visitor_message
     *
     * @param bool $livechat_webhook_on_visitor_message When set to true, data is sent to the configured webhook URL each time a visitor sends a message.
     *
     * @return $this
     */
    public function setLivechatWebhookOnVisitorMessage($livechat_webhook_on_visitor_message)
    {
        $this->container['livechat_webhook_on_visitor_message'] = $livechat_webhook_on_visitor_message;

        return $this;
    }

    /**
     * Gets livechat_webhook_on_agent_message
     *
     * @return bool
     */
    public function getLivechatWebhookOnAgentMessage()
    {
        return $this->container['livechat_webhook_on_agent_message'];
    }

    /**
     * Sets livechat_webhook_on_agent_message
     *
     * @param bool $livechat_webhook_on_agent_message When set to true, data is sent to the configured webhook URL each time an agent sends a message.
     *
     * @return $this
     */
    public function setLivechatWebhookOnAgentMessage($livechat_webhook_on_agent_message)
    {
        $this->container['livechat_webhook_on_agent_message'] = $livechat_webhook_on_agent_message;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
