<?php
/**
 * InlineResponse20098
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Omnichannel
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.67
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse20098 Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20098 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_98';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'loggedin' => 'string',
        'available' => 'string',
        'callers' => 'string',
        'holdtime' => 'string',
        'talktime' => 'string',
        'logestholdtime' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'loggedin' => null,
        'available' => null,
        'callers' => null,
        'holdtime' => null,
        'talktime' => null,
        'logestholdtime' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'loggedin' => 'loggedin',
        'available' => 'available',
        'callers' => 'callers',
        'holdtime' => 'holdtime',
        'talktime' => 'talktime',
        'logestholdtime' => 'logestholdtime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'loggedin' => 'setLoggedin',
        'available' => 'setAvailable',
        'callers' => 'setCallers',
        'holdtime' => 'setHoldtime',
        'talktime' => 'setTalktime',
        'logestholdtime' => 'setLogestholdtime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'loggedin' => 'getLoggedin',
        'available' => 'getAvailable',
        'callers' => 'getCallers',
        'holdtime' => 'getHoldtime',
        'talktime' => 'getTalktime',
        'logestholdtime' => 'getLogestholdtime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['loggedin'] = isset($data['loggedin']) ? $data['loggedin'] : null;
        $this->container['available'] = isset($data['available']) ? $data['available'] : null;
        $this->container['callers'] = isset($data['callers']) ? $data['callers'] : null;
        $this->container['holdtime'] = isset($data['holdtime']) ? $data['holdtime'] : null;
        $this->container['talktime'] = isset($data['talktime']) ? $data['talktime'] : null;
        $this->container['logestholdtime'] = isset($data['logestholdtime']) ? $data['logestholdtime'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets loggedin
     *
     * @return string
     */
    public function getLoggedin()
    {
        return $this->container['loggedin'];
    }

    /**
     * Sets loggedin
     *
     * @param string $loggedin loggedin
     *
     * @return $this
     */
    public function setLoggedin($loggedin)
    {
        $this->container['loggedin'] = $loggedin;

        return $this;
    }

    /**
     * Gets available
     *
     * @return string
     */
    public function getAvailable()
    {
        return $this->container['available'];
    }

    /**
     * Sets available
     *
     * @param string $available available
     *
     * @return $this
     */
    public function setAvailable($available)
    {
        $this->container['available'] = $available;

        return $this;
    }

    /**
     * Gets callers
     *
     * @return string
     */
    public function getCallers()
    {
        return $this->container['callers'];
    }

    /**
     * Sets callers
     *
     * @param string $callers callers
     *
     * @return $this
     */
    public function setCallers($callers)
    {
        $this->container['callers'] = $callers;

        return $this;
    }

    /**
     * Gets holdtime
     *
     * @return string
     */
    public function getHoldtime()
    {
        return $this->container['holdtime'];
    }

    /**
     * Sets holdtime
     *
     * @param string $holdtime holdtime
     *
     * @return $this
     */
    public function setHoldtime($holdtime)
    {
        $this->container['holdtime'] = $holdtime;

        return $this;
    }

    /**
     * Gets talktime
     *
     * @return string
     */
    public function getTalktime()
    {
        return $this->container['talktime'];
    }

    /**
     * Sets talktime
     *
     * @param string $talktime talktime
     *
     * @return $this
     */
    public function setTalktime($talktime)
    {
        $this->container['talktime'] = $talktime;

        return $this;
    }

    /**
     * Gets logestholdtime
     *
     * @return string
     */
    public function getLogestholdtime()
    {
        return $this->container['logestholdtime'];
    }

    /**
     * Sets logestholdtime
     *
     * @param string $logestholdtime logestholdtime
     *
     * @return $this
     */
    public function setLogestholdtime($logestholdtime)
    {
        $this->container['logestholdtime'] = $logestholdtime;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
