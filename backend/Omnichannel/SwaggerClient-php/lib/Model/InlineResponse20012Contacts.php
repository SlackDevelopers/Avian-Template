<?php
/**
 * InlineResponse20012Contacts
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Omnichannel
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.67
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse20012Contacts Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20012Contacts implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_12_contacts';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        '_id' => 'string',
        'created_at' => 'string',
        'name' => 'string',
        'emails' => '\Swagger\Client\Model\InlineResponse2008ContactVisitorEmails[]',
        'phones' => 'object[]',
        'channels' => '\Swagger\Client\Model\InlineResponse20010ContactChannels[]',
        'custom_fields' => '\Swagger\Client\Model\InlineResponse20012CustomFields',
        'unknown' => 'bool',
        '_updated_at' => 'string',
        'conflicting_fields' => 'object[]',
        'last_chat' => '\Swagger\Client\Model\InlineResponse2008ContactLastChat',
        'contact_manager' => '\Swagger\Client\Model\InlineResponse20012ContactManager'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        '_id' => null,
        'created_at' => null,
        'name' => null,
        'emails' => null,
        'phones' => null,
        'channels' => null,
        'custom_fields' => null,
        'unknown' => null,
        '_updated_at' => null,
        'conflicting_fields' => null,
        'last_chat' => null,
        'contact_manager' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        '_id' => '_id',
        'created_at' => 'createdAt',
        'name' => 'name',
        'emails' => 'emails',
        'phones' => 'phones',
        'channels' => 'channels',
        'custom_fields' => 'customFields',
        'unknown' => 'unknown',
        '_updated_at' => '_updatedAt',
        'conflicting_fields' => 'conflictingFields',
        'last_chat' => 'lastChat',
        'contact_manager' => 'contactManager'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        '_id' => 'setId',
        'created_at' => 'setCreatedAt',
        'name' => 'setName',
        'emails' => 'setEmails',
        'phones' => 'setPhones',
        'channels' => 'setChannels',
        'custom_fields' => 'setCustomFields',
        'unknown' => 'setUnknown',
        '_updated_at' => 'setUpdatedAt',
        'conflicting_fields' => 'setConflictingFields',
        'last_chat' => 'setLastChat',
        'contact_manager' => 'setContactManager'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        '_id' => 'getId',
        'created_at' => 'getCreatedAt',
        'name' => 'getName',
        'emails' => 'getEmails',
        'phones' => 'getPhones',
        'channels' => 'getChannels',
        'custom_fields' => 'getCustomFields',
        'unknown' => 'getUnknown',
        '_updated_at' => 'getUpdatedAt',
        'conflicting_fields' => 'getConflictingFields',
        'last_chat' => 'getLastChat',
        'contact_manager' => 'getContactManager'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['_id'] = isset($data['_id']) ? $data['_id'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['emails'] = isset($data['emails']) ? $data['emails'] : null;
        $this->container['phones'] = isset($data['phones']) ? $data['phones'] : null;
        $this->container['channels'] = isset($data['channels']) ? $data['channels'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
        $this->container['unknown'] = isset($data['unknown']) ? $data['unknown'] : null;
        $this->container['_updated_at'] = isset($data['_updated_at']) ? $data['_updated_at'] : null;
        $this->container['conflicting_fields'] = isset($data['conflicting_fields']) ? $data['conflicting_fields'] : null;
        $this->container['last_chat'] = isset($data['last_chat']) ? $data['last_chat'] : null;
        $this->container['contact_manager'] = isset($data['contact_manager']) ? $data['contact_manager'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets _id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['_id'];
    }

    /**
     * Sets _id
     *
     * @param string $_id _id
     *
     * @return $this
     */
    public function setId($_id)
    {
        $this->container['_id'] = $_id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets emails
     *
     * @return \Swagger\Client\Model\InlineResponse2008ContactVisitorEmails[]
     */
    public function getEmails()
    {
        return $this->container['emails'];
    }

    /**
     * Sets emails
     *
     * @param \Swagger\Client\Model\InlineResponse2008ContactVisitorEmails[] $emails emails
     *
     * @return $this
     */
    public function setEmails($emails)
    {
        $this->container['emails'] = $emails;

        return $this;
    }

    /**
     * Gets phones
     *
     * @return object[]
     */
    public function getPhones()
    {
        return $this->container['phones'];
    }

    /**
     * Sets phones
     *
     * @param object[] $phones phones
     *
     * @return $this
     */
    public function setPhones($phones)
    {
        $this->container['phones'] = $phones;

        return $this;
    }

    /**
     * Gets channels
     *
     * @return \Swagger\Client\Model\InlineResponse20010ContactChannels[]
     */
    public function getChannels()
    {
        return $this->container['channels'];
    }

    /**
     * Sets channels
     *
     * @param \Swagger\Client\Model\InlineResponse20010ContactChannels[] $channels channels
     *
     * @return $this
     */
    public function setChannels($channels)
    {
        $this->container['channels'] = $channels;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return \Swagger\Client\Model\InlineResponse20012CustomFields
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param \Swagger\Client\Model\InlineResponse20012CustomFields $custom_fields custom_fields
     *
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets unknown
     *
     * @return bool
     */
    public function getUnknown()
    {
        return $this->container['unknown'];
    }

    /**
     * Sets unknown
     *
     * @param bool $unknown unknown
     *
     * @return $this
     */
    public function setUnknown($unknown)
    {
        $this->container['unknown'] = $unknown;

        return $this;
    }

    /**
     * Gets _updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['_updated_at'];
    }

    /**
     * Sets _updated_at
     *
     * @param string $_updated_at _updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($_updated_at)
    {
        $this->container['_updated_at'] = $_updated_at;

        return $this;
    }

    /**
     * Gets conflicting_fields
     *
     * @return object[]
     */
    public function getConflictingFields()
    {
        return $this->container['conflicting_fields'];
    }

    /**
     * Sets conflicting_fields
     *
     * @param object[] $conflicting_fields conflicting_fields
     *
     * @return $this
     */
    public function setConflictingFields($conflicting_fields)
    {
        $this->container['conflicting_fields'] = $conflicting_fields;

        return $this;
    }

    /**
     * Gets last_chat
     *
     * @return \Swagger\Client\Model\InlineResponse2008ContactLastChat
     */
    public function getLastChat()
    {
        return $this->container['last_chat'];
    }

    /**
     * Sets last_chat
     *
     * @param \Swagger\Client\Model\InlineResponse2008ContactLastChat $last_chat last_chat
     *
     * @return $this
     */
    public function setLastChat($last_chat)
    {
        $this->container['last_chat'] = $last_chat;

        return $this;
    }

    /**
     * Gets contact_manager
     *
     * @return \Swagger\Client\Model\InlineResponse20012ContactManager
     */
    public function getContactManager()
    {
        return $this->container['contact_manager'];
    }

    /**
     * Sets contact_manager
     *
     * @param \Swagger\Client\Model\InlineResponse20012ContactManager $contact_manager contact_manager
     *
     * @return $this
     */
    public function setContactManager($contact_manager)
    {
        $this->container['contact_manager'] = $contact_manager;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
