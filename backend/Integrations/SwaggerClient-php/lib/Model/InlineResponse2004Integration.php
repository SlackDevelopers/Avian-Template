<?php
/**
 * InlineResponse2004Integration
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Integrations
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.67
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse2004Integration Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2004Integration implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_4_integration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        '_id' => 'string',
        'enabled' => 'bool',
        'channel' => 'string[]',
        'username' => 'string',
        'name' => 'string',
        'alias' => 'string',
        'avatar_url' => 'string',
        'emoji' => 'string',
        'script_enabled' => 'bool',
        'script' => 'string',
        'type' => 'string',
        'token' => 'string',
        'user_id' => 'string',
        '_created_at' => 'string',
        '_created_by' => '\Swagger\Client\Model\InlineResponse2009CreatedBy',
        '_updated_at' => 'string',
        '_updated_by' => '\Swagger\Client\Model\InlineResponse2009CreatedBy'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        '_id' => null,
        'enabled' => null,
        'channel' => null,
        'username' => null,
        'name' => null,
        'alias' => null,
        'avatar_url' => null,
        'emoji' => null,
        'script_enabled' => null,
        'script' => null,
        'type' => null,
        'token' => null,
        'user_id' => null,
        '_created_at' => null,
        '_created_by' => null,
        '_updated_at' => null,
        '_updated_by' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        '_id' => '_id',
        'enabled' => 'enabled',
        'channel' => 'channel',
        'username' => 'username',
        'name' => 'name',
        'alias' => 'alias',
        'avatar_url' => 'avatarUrl',
        'emoji' => 'emoji',
        'script_enabled' => 'scriptEnabled',
        'script' => 'script',
        'type' => 'type',
        'token' => 'token',
        'user_id' => 'userId',
        '_created_at' => '_createdAt',
        '_created_by' => '_createdBy',
        '_updated_at' => '_updatedAt',
        '_updated_by' => '_updatedBy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        '_id' => 'setId',
        'enabled' => 'setEnabled',
        'channel' => 'setChannel',
        'username' => 'setUsername',
        'name' => 'setName',
        'alias' => 'setAlias',
        'avatar_url' => 'setAvatarUrl',
        'emoji' => 'setEmoji',
        'script_enabled' => 'setScriptEnabled',
        'script' => 'setScript',
        'type' => 'setType',
        'token' => 'setToken',
        'user_id' => 'setUserId',
        '_created_at' => 'setCreatedAt',
        '_created_by' => 'setCreatedBy',
        '_updated_at' => 'setUpdatedAt',
        '_updated_by' => 'setUpdatedBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        '_id' => 'getId',
        'enabled' => 'getEnabled',
        'channel' => 'getChannel',
        'username' => 'getUsername',
        'name' => 'getName',
        'alias' => 'getAlias',
        'avatar_url' => 'getAvatarUrl',
        'emoji' => 'getEmoji',
        'script_enabled' => 'getScriptEnabled',
        'script' => 'getScript',
        'type' => 'getType',
        'token' => 'getToken',
        'user_id' => 'getUserId',
        '_created_at' => 'getCreatedAt',
        '_created_by' => 'getCreatedBy',
        '_updated_at' => 'getUpdatedAt',
        '_updated_by' => 'getUpdatedBy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['_id'] = isset($data['_id']) ? $data['_id'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['channel'] = isset($data['channel']) ? $data['channel'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['alias'] = isset($data['alias']) ? $data['alias'] : null;
        $this->container['avatar_url'] = isset($data['avatar_url']) ? $data['avatar_url'] : null;
        $this->container['emoji'] = isset($data['emoji']) ? $data['emoji'] : null;
        $this->container['script_enabled'] = isset($data['script_enabled']) ? $data['script_enabled'] : null;
        $this->container['script'] = isset($data['script']) ? $data['script'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['token'] = isset($data['token']) ? $data['token'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['_created_at'] = isset($data['_created_at']) ? $data['_created_at'] : null;
        $this->container['_created_by'] = isset($data['_created_by']) ? $data['_created_by'] : null;
        $this->container['_updated_at'] = isset($data['_updated_at']) ? $data['_updated_at'] : null;
        $this->container['_updated_by'] = isset($data['_updated_by']) ? $data['_updated_by'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets _id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['_id'];
    }

    /**
     * Sets _id
     *
     * @param string $_id _id
     *
     * @return $this
     */
    public function setId($_id)
    {
        $this->container['_id'] = $_id;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return string[]
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param string[] $channel channel
     *
     * @return $this
     */
    public function setChannel($channel)
    {
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username username
     *
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets alias
     *
     * @return string
     */
    public function getAlias()
    {
        return $this->container['alias'];
    }

    /**
     * Sets alias
     *
     * @param string $alias alias
     *
     * @return $this
     */
    public function setAlias($alias)
    {
        $this->container['alias'] = $alias;

        return $this;
    }

    /**
     * Gets avatar_url
     *
     * @return string
     */
    public function getAvatarUrl()
    {
        return $this->container['avatar_url'];
    }

    /**
     * Sets avatar_url
     *
     * @param string $avatar_url avatar_url
     *
     * @return $this
     */
    public function setAvatarUrl($avatar_url)
    {
        $this->container['avatar_url'] = $avatar_url;

        return $this;
    }

    /**
     * Gets emoji
     *
     * @return string
     */
    public function getEmoji()
    {
        return $this->container['emoji'];
    }

    /**
     * Sets emoji
     *
     * @param string $emoji emoji
     *
     * @return $this
     */
    public function setEmoji($emoji)
    {
        $this->container['emoji'] = $emoji;

        return $this;
    }

    /**
     * Gets script_enabled
     *
     * @return bool
     */
    public function getScriptEnabled()
    {
        return $this->container['script_enabled'];
    }

    /**
     * Sets script_enabled
     *
     * @param bool $script_enabled script_enabled
     *
     * @return $this
     */
    public function setScriptEnabled($script_enabled)
    {
        $this->container['script_enabled'] = $script_enabled;

        return $this;
    }

    /**
     * Gets script
     *
     * @return string
     */
    public function getScript()
    {
        return $this->container['script'];
    }

    /**
     * Sets script
     *
     * @param string $script script
     *
     * @return $this
     */
    public function setScript($script)
    {
        $this->container['script'] = $script;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string $token token
     *
     * @return $this
     */
    public function setToken($token)
    {
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string $user_id user_id
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets _created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['_created_at'];
    }

    /**
     * Sets _created_at
     *
     * @param string $_created_at _created_at
     *
     * @return $this
     */
    public function setCreatedAt($_created_at)
    {
        $this->container['_created_at'] = $_created_at;

        return $this;
    }

    /**
     * Gets _created_by
     *
     * @return \Swagger\Client\Model\InlineResponse2009CreatedBy
     */
    public function getCreatedBy()
    {
        return $this->container['_created_by'];
    }

    /**
     * Sets _created_by
     *
     * @param \Swagger\Client\Model\InlineResponse2009CreatedBy $_created_by _created_by
     *
     * @return $this
     */
    public function setCreatedBy($_created_by)
    {
        $this->container['_created_by'] = $_created_by;

        return $this;
    }

    /**
     * Gets _updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['_updated_at'];
    }

    /**
     * Sets _updated_at
     *
     * @param string $_updated_at _updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($_updated_at)
    {
        $this->container['_updated_at'] = $_updated_at;

        return $this;
    }

    /**
     * Gets _updated_by
     *
     * @return \Swagger\Client\Model\InlineResponse2009CreatedBy
     */
    public function getUpdatedBy()
    {
        return $this->container['_updated_by'];
    }

    /**
     * Sets _updated_by
     *
     * @param \Swagger\Client\Model\InlineResponse2009CreatedBy $_updated_by _updated_by
     *
     * @return $this
     */
    public function setUpdatedBy($_updated_by)
    {
        $this->container['_updated_by'] = $_updated_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
