<?php
/**
 * V1IntegrationsUpdateBody
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Integrations
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.67
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * V1IntegrationsUpdateBody Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V1IntegrationsUpdateBody implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v1_integrations_update_body';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'type' => 'string',
        'name' => 'string',
        'enabled' => 'bool',
        'username' => 'string',
        'script_enabled' => 'bool',
        'channel' => 'string',
        'integration_id' => 'string',
        'urls' => 'string[]',
        'event' => 'string',
        'trigger_words' => 'string',
        'alias' => 'string',
        'avatar' => 'string',
        'emoji' => 'string',
        'token' => 'string',
        'script' => 'string',
        'target_channel' => 'string',
        'target_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'type' => null,
        'name' => null,
        'enabled' => null,
        'username' => null,
        'script_enabled' => null,
        'channel' => null,
        'integration_id' => null,
        'urls' => null,
        'event' => null,
        'trigger_words' => null,
        'alias' => null,
        'avatar' => null,
        'emoji' => null,
        'token' => null,
        'script' => null,
        'target_channel' => null,
        'target_url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'name' => 'name',
        'enabled' => 'enabled',
        'username' => 'username',
        'script_enabled' => 'scriptEnabled',
        'channel' => 'channel',
        'integration_id' => 'integrationId',
        'urls' => 'urls',
        'event' => 'event',
        'trigger_words' => 'triggerWords',
        'alias' => 'alias',
        'avatar' => 'avatar',
        'emoji' => 'emoji',
        'token' => 'token',
        'script' => 'script',
        'target_channel' => 'targetChannel',
        'target_url' => 'target_url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'name' => 'setName',
        'enabled' => 'setEnabled',
        'username' => 'setUsername',
        'script_enabled' => 'setScriptEnabled',
        'channel' => 'setChannel',
        'integration_id' => 'setIntegrationId',
        'urls' => 'setUrls',
        'event' => 'setEvent',
        'trigger_words' => 'setTriggerWords',
        'alias' => 'setAlias',
        'avatar' => 'setAvatar',
        'emoji' => 'setEmoji',
        'token' => 'setToken',
        'script' => 'setScript',
        'target_channel' => 'setTargetChannel',
        'target_url' => 'setTargetUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'name' => 'getName',
        'enabled' => 'getEnabled',
        'username' => 'getUsername',
        'script_enabled' => 'getScriptEnabled',
        'channel' => 'getChannel',
        'integration_id' => 'getIntegrationId',
        'urls' => 'getUrls',
        'event' => 'getEvent',
        'trigger_words' => 'getTriggerWords',
        'alias' => 'getAlias',
        'avatar' => 'getAvatar',
        'emoji' => 'getEmoji',
        'token' => 'getToken',
        'script' => 'getScript',
        'target_channel' => 'getTargetChannel',
        'target_url' => 'getTargetUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
        $this->container['script_enabled'] = isset($data['script_enabled']) ? $data['script_enabled'] : null;
        $this->container['channel'] = isset($data['channel']) ? $data['channel'] : null;
        $this->container['integration_id'] = isset($data['integration_id']) ? $data['integration_id'] : null;
        $this->container['urls'] = isset($data['urls']) ? $data['urls'] : null;
        $this->container['event'] = isset($data['event']) ? $data['event'] : null;
        $this->container['trigger_words'] = isset($data['trigger_words']) ? $data['trigger_words'] : null;
        $this->container['alias'] = isset($data['alias']) ? $data['alias'] : null;
        $this->container['avatar'] = isset($data['avatar']) ? $data['avatar'] : null;
        $this->container['emoji'] = isset($data['emoji']) ? $data['emoji'] : null;
        $this->container['token'] = isset($data['token']) ? $data['token'] : null;
        $this->container['script'] = isset($data['script']) ? $data['script'] : null;
        $this->container['target_channel'] = isset($data['target_channel']) ? $data['target_channel'] : null;
        $this->container['target_url'] = isset($data['target_url']) ? $data['target_url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['enabled'] === null) {
            $invalidProperties[] = "'enabled' can't be null";
        }
        if ($this->container['username'] === null) {
            $invalidProperties[] = "'username' can't be null";
        }
        if ($this->container['script_enabled'] === null) {
            $invalidProperties[] = "'script_enabled' can't be null";
        }
        if ($this->container['channel'] === null) {
            $invalidProperties[] = "'channel' can't be null";
        }
        if ($this->container['integration_id'] === null) {
            $invalidProperties[] = "'integration_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The type of integration. The possible values are:  * `webhook-outgoing`  * `webhook-incoming`
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the integration.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled Whether this integration should be enabled or not.
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username The username to post this the messages as.
     *
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets script_enabled
     *
     * @return bool
     */
    public function getScriptEnabled()
    {
        return $this->container['script_enabled'];
    }

    /**
     * Sets script_enabled
     *
     * @param bool $script_enabled Whether the script should be enabled.
     *
     * @return $this
     */
    public function setScriptEnabled($script_enabled)
    {
        $this->container['script_enabled'] = $script_enabled;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return string
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param string $channel The channel, group, or @username. The values can also be `all_public_channels`, `all_private_groups`, or `all_direct_messages`. Comma separated for more than one.
     *
     * @return $this
     */
    public function setChannel($channel)
    {
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets integration_id
     *
     * @return string
     */
    public function getIntegrationId()
    {
        return $this->container['integration_id'];
    }

    /**
     * Sets integration_id
     *
     * @param string $integration_id The integration ID.
     *
     * @return $this
     */
    public function setIntegrationId($integration_id)
    {
        $this->container['integration_id'] = $integration_id;

        return $this;
    }

    /**
     * Gets urls
     *
     * @return string[]
     */
    public function getUrls()
    {
        return $this->container['urls'];
    }

    /**
     * Sets urls
     *
     * @param string[] $urls The urls to call whenever this integration is triggered.
     *
     * @return $this
     */
    public function setUrls($urls)
    {
        $this->container['urls'] = $urls;

        return $this;
    }

    /**
     * Gets event
     *
     * @return string
     */
    public function getEvent()
    {
        return $this->container['event'];
    }

    /**
     * Sets event
     *
     * @param string $event This field is required only for outgoing integrations.   The type of event can be any of these: `sendMessage`, `fileUploaded`, `roomArchived`, `roomCreated`, `roomJoined`, `roomLeft`, `userCreated`.
     *
     * @return $this
     */
    public function setEvent($event)
    {
        $this->container['event'] = $event;

        return $this;
    }

    /**
     * Gets trigger_words
     *
     * @return string
     */
    public function getTriggerWords()
    {
        return $this->container['trigger_words'];
    }

    /**
     * Sets trigger_words
     *
     * @param string $trigger_words Specific words, separated by commas, which should trigger this integration.
     *
     * @return $this
     */
    public function setTriggerWords($trigger_words)
    {
        $this->container['trigger_words'] = $trigger_words;

        return $this;
    }

    /**
     * Gets alias
     *
     * @return string
     */
    public function getAlias()
    {
        return $this->container['alias'];
    }

    /**
     * Sets alias
     *
     * @param string $alias The alias which should be applied to messages when this integration is processed.
     *
     * @return $this
     */
    public function setAlias($alias)
    {
        $this->container['alias'] = $alias;

        return $this;
    }

    /**
     * Gets avatar
     *
     * @return string
     */
    public function getAvatar()
    {
        return $this->container['avatar'];
    }

    /**
     * Sets avatar
     *
     * @param string $avatar The logo to apply to the messages that this integration sends.
     *
     * @return $this
     */
    public function setAvatar($avatar)
    {
        $this->container['avatar'] = $avatar;

        return $this;
    }

    /**
     * Gets emoji
     *
     * @return string
     */
    public function getEmoji()
    {
        return $this->container['emoji'];
    }

    /**
     * Sets emoji
     *
     * @param string $emoji The emoji which should be displayed as the avatar for messages from this integration.
     *
     * @return $this
     */
    public function setEmoji($emoji)
    {
        $this->container['emoji'] = $emoji;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string $token If your integration requires a special token from the server (API key), use this parameter.
     *
     * @return $this
     */
    public function setToken($token)
    {
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets script
     *
     * @return string
     */
    public function getScript()
    {
        return $this->container['script'];
    }

    /**
     * Sets script
     *
     * @param string $script Script triggered when this integration is triggered.
     *
     * @return $this
     */
    public function setScript($script)
    {
        $this->container['script'] = $script;

        return $this;
    }

    /**
     * Gets target_channel
     *
     * @return string
     */
    public function getTargetChannel()
    {
        return $this->container['target_channel'];
    }

    /**
     * Sets target_channel
     *
     * @param string $target_channel The channel where messages will be sent to.
     *
     * @return $this
     */
    public function setTargetChannel($target_channel)
    {
        $this->container['target_channel'] = $target_channel;

        return $this;
    }

    /**
     * Gets target_url
     *
     * @return string
     */
    public function getTargetUrl()
    {
        return $this->container['target_url'];
    }

    /**
     * Sets target_url
     *
     * @param string $target_url The target url to set.
     *
     * @return $this
     */
    public function setTargetUrl($target_url)
    {
        $this->container['target_url'] = $target_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
