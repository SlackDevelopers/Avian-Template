<?php
/**
 * V1RoomsSaveRoomSettingsBody
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rooms
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.67
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * V1RoomsSaveRoomSettingsBody Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V1RoomsSaveRoomSettingsBody implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v1_rooms_saveRoomSettings_body';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'rid' => 'string',
        'room_name' => 'string',
        'room_description' => 'string',
        'room_avatar' => 'string',
        'featured' => 'bool',
        'room_topic' => 'string',
        'room_announcement' => 'string',
        'room_custom_fields' => 'object',
        'room_type' => 'string',
        'read_only' => 'bool',
        'react_when_read_only' => 'bool',
        'system_messages' => 'string[]',
        'default' => 'bool',
        'join_code' => 'string',
        'streaming_options' => 'object',
        'retention_enabled' => 'bool',
        'retention_max_age' => 'string',
        'retention_exclude_pinned' => 'bool',
        'retention_files_only' => 'bool',
        'retention_ignore_threads' => 'bool',
        'retention_override_global' => 'bool',
        'encrypted' => 'bool',
        'favorite' => 'object',
        'sidepanel' => '\Swagger\Client\Model\Apiv1roomsSaveRoomSettingsSidepanel'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'rid' => null,
        'room_name' => null,
        'room_description' => null,
        'room_avatar' => null,
        'featured' => null,
        'room_topic' => null,
        'room_announcement' => null,
        'room_custom_fields' => null,
        'room_type' => null,
        'read_only' => null,
        'react_when_read_only' => null,
        'system_messages' => null,
        'default' => null,
        'join_code' => null,
        'streaming_options' => null,
        'retention_enabled' => null,
        'retention_max_age' => null,
        'retention_exclude_pinned' => null,
        'retention_files_only' => null,
        'retention_ignore_threads' => null,
        'retention_override_global' => null,
        'encrypted' => null,
        'favorite' => null,
        'sidepanel' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'rid' => 'rid',
        'room_name' => 'roomName',
        'room_description' => 'roomDescription',
        'room_avatar' => 'roomAvatar',
        'featured' => 'featured',
        'room_topic' => 'roomTopic',
        'room_announcement' => 'roomAnnouncement',
        'room_custom_fields' => 'roomCustomFields',
        'room_type' => 'roomType',
        'read_only' => 'readOnly',
        'react_when_read_only' => 'reactWhenReadOnly',
        'system_messages' => 'systemMessages',
        'default' => 'default',
        'join_code' => 'joinCode',
        'streaming_options' => 'streamingOptions',
        'retention_enabled' => 'retentionEnabled',
        'retention_max_age' => 'retentionMaxAge',
        'retention_exclude_pinned' => 'retentionExcludePinned',
        'retention_files_only' => 'retentionFilesOnly',
        'retention_ignore_threads' => 'retentionIgnoreThreads',
        'retention_override_global' => 'retentionOverrideGlobal',
        'encrypted' => 'encrypted',
        'favorite' => 'favorite',
        'sidepanel' => 'sidepanel'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'rid' => 'setRid',
        'room_name' => 'setRoomName',
        'room_description' => 'setRoomDescription',
        'room_avatar' => 'setRoomAvatar',
        'featured' => 'setFeatured',
        'room_topic' => 'setRoomTopic',
        'room_announcement' => 'setRoomAnnouncement',
        'room_custom_fields' => 'setRoomCustomFields',
        'room_type' => 'setRoomType',
        'read_only' => 'setReadOnly',
        'react_when_read_only' => 'setReactWhenReadOnly',
        'system_messages' => 'setSystemMessages',
        'default' => 'setDefault',
        'join_code' => 'setJoinCode',
        'streaming_options' => 'setStreamingOptions',
        'retention_enabled' => 'setRetentionEnabled',
        'retention_max_age' => 'setRetentionMaxAge',
        'retention_exclude_pinned' => 'setRetentionExcludePinned',
        'retention_files_only' => 'setRetentionFilesOnly',
        'retention_ignore_threads' => 'setRetentionIgnoreThreads',
        'retention_override_global' => 'setRetentionOverrideGlobal',
        'encrypted' => 'setEncrypted',
        'favorite' => 'setFavorite',
        'sidepanel' => 'setSidepanel'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'rid' => 'getRid',
        'room_name' => 'getRoomName',
        'room_description' => 'getRoomDescription',
        'room_avatar' => 'getRoomAvatar',
        'featured' => 'getFeatured',
        'room_topic' => 'getRoomTopic',
        'room_announcement' => 'getRoomAnnouncement',
        'room_custom_fields' => 'getRoomCustomFields',
        'room_type' => 'getRoomType',
        'read_only' => 'getReadOnly',
        'react_when_read_only' => 'getReactWhenReadOnly',
        'system_messages' => 'getSystemMessages',
        'default' => 'getDefault',
        'join_code' => 'getJoinCode',
        'streaming_options' => 'getStreamingOptions',
        'retention_enabled' => 'getRetentionEnabled',
        'retention_max_age' => 'getRetentionMaxAge',
        'retention_exclude_pinned' => 'getRetentionExcludePinned',
        'retention_files_only' => 'getRetentionFilesOnly',
        'retention_ignore_threads' => 'getRetentionIgnoreThreads',
        'retention_override_global' => 'getRetentionOverrideGlobal',
        'encrypted' => 'getEncrypted',
        'favorite' => 'getFavorite',
        'sidepanel' => 'getSidepanel'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['rid'] = isset($data['rid']) ? $data['rid'] : null;
        $this->container['room_name'] = isset($data['room_name']) ? $data['room_name'] : null;
        $this->container['room_description'] = isset($data['room_description']) ? $data['room_description'] : null;
        $this->container['room_avatar'] = isset($data['room_avatar']) ? $data['room_avatar'] : null;
        $this->container['featured'] = isset($data['featured']) ? $data['featured'] : null;
        $this->container['room_topic'] = isset($data['room_topic']) ? $data['room_topic'] : null;
        $this->container['room_announcement'] = isset($data['room_announcement']) ? $data['room_announcement'] : null;
        $this->container['room_custom_fields'] = isset($data['room_custom_fields']) ? $data['room_custom_fields'] : null;
        $this->container['room_type'] = isset($data['room_type']) ? $data['room_type'] : null;
        $this->container['read_only'] = isset($data['read_only']) ? $data['read_only'] : null;
        $this->container['react_when_read_only'] = isset($data['react_when_read_only']) ? $data['react_when_read_only'] : null;
        $this->container['system_messages'] = isset($data['system_messages']) ? $data['system_messages'] : null;
        $this->container['default'] = isset($data['default']) ? $data['default'] : null;
        $this->container['join_code'] = isset($data['join_code']) ? $data['join_code'] : null;
        $this->container['streaming_options'] = isset($data['streaming_options']) ? $data['streaming_options'] : null;
        $this->container['retention_enabled'] = isset($data['retention_enabled']) ? $data['retention_enabled'] : null;
        $this->container['retention_max_age'] = isset($data['retention_max_age']) ? $data['retention_max_age'] : null;
        $this->container['retention_exclude_pinned'] = isset($data['retention_exclude_pinned']) ? $data['retention_exclude_pinned'] : null;
        $this->container['retention_files_only'] = isset($data['retention_files_only']) ? $data['retention_files_only'] : null;
        $this->container['retention_ignore_threads'] = isset($data['retention_ignore_threads']) ? $data['retention_ignore_threads'] : null;
        $this->container['retention_override_global'] = isset($data['retention_override_global']) ? $data['retention_override_global'] : null;
        $this->container['encrypted'] = isset($data['encrypted']) ? $data['encrypted'] : null;
        $this->container['favorite'] = isset($data['favorite']) ? $data['favorite'] : null;
        $this->container['sidepanel'] = isset($data['sidepanel']) ? $data['sidepanel'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['rid'] === null) {
            $invalidProperties[] = "'rid' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets rid
     *
     * @return string
     */
    public function getRid()
    {
        return $this->container['rid'];
    }

    /**
     * Sets rid
     *
     * @param string $rid The room ID.
     *
     * @return $this
     */
    public function setRid($rid)
    {
        $this->container['rid'] = $rid;

        return $this;
    }

    /**
     * Gets room_name
     *
     * @return string
     */
    public function getRoomName()
    {
        return $this->container['room_name'];
    }

    /**
     * Sets room_name
     *
     * @param string $room_name The name of the room.
     *
     * @return $this
     */
    public function setRoomName($room_name)
    {
        $this->container['room_name'] = $room_name;

        return $this;
    }

    /**
     * Gets room_description
     *
     * @return string
     */
    public function getRoomDescription()
    {
        return $this->container['room_description'];
    }

    /**
     * Sets room_description
     *
     * @param string $room_description The description of the room.
     *
     * @return $this
     */
    public function setRoomDescription($room_description)
    {
        $this->container['room_description'] = $room_description;

        return $this;
    }

    /**
     * Gets room_avatar
     *
     * @return string
     */
    public function getRoomAvatar()
    {
        return $this->container['room_avatar'];
    }

    /**
     * Sets room_avatar
     *
     * @param string $room_avatar The base64 image.
     *
     * @return $this
     */
    public function setRoomAvatar($room_avatar)
    {
        $this->container['room_avatar'] = $room_avatar;

        return $this;
    }

    /**
     * Gets featured
     *
     * @return bool
     */
    public function getFeatured()
    {
        return $this->container['featured'];
    }

    /**
     * Sets featured
     *
     * @param bool $featured Whether the room is featured or not.
     *
     * @return $this
     */
    public function setFeatured($featured)
    {
        $this->container['featured'] = $featured;

        return $this;
    }

    /**
     * Gets room_topic
     *
     * @return string
     */
    public function getRoomTopic()
    {
        return $this->container['room_topic'];
    }

    /**
     * Sets room_topic
     *
     * @param string $room_topic The topic of the room.
     *
     * @return $this
     */
    public function setRoomTopic($room_topic)
    {
        $this->container['room_topic'] = $room_topic;

        return $this;
    }

    /**
     * Gets room_announcement
     *
     * @return string
     */
    public function getRoomAnnouncement()
    {
        return $this->container['room_announcement'];
    }

    /**
     * Sets room_announcement
     *
     * @param string $room_announcement The announcement of the room.
     *
     * @return $this
     */
    public function setRoomAnnouncement($room_announcement)
    {
        $this->container['room_announcement'] = $room_announcement;

        return $this;
    }

    /**
     * Gets room_custom_fields
     *
     * @return object
     */
    public function getRoomCustomFields()
    {
        return $this->container['room_custom_fields'];
    }

    /**
     * Sets room_custom_fields
     *
     * @param object $room_custom_fields An object of the custom fields of the room.
     *
     * @return $this
     */
    public function setRoomCustomFields($room_custom_fields)
    {
        $this->container['room_custom_fields'] = $room_custom_fields;

        return $this;
    }

    /**
     * Gets room_type
     *
     * @return string
     */
    public function getRoomType()
    {
        return $this->container['room_type'];
    }

    /**
     * Sets room_type
     *
     * @param string $room_type The type of the room. It could be `c` for public rooms or `p` for private rooms.
     *
     * @return $this
     */
    public function setRoomType($room_type)
    {
        $this->container['room_type'] = $room_type;

        return $this;
    }

    /**
     * Gets read_only
     *
     * @return bool
     */
    public function getReadOnly()
    {
        return $this->container['read_only'];
    }

    /**
     * Sets read_only
     *
     * @param bool $read_only Whether the room is read-only or not.
     *
     * @return $this
     */
    public function setReadOnly($read_only)
    {
        $this->container['read_only'] = $read_only;

        return $this;
    }

    /**
     * Gets react_when_read_only
     *
     * @return bool
     */
    public function getReactWhenReadOnly()
    {
        return $this->container['react_when_read_only'];
    }

    /**
     * Sets react_when_read_only
     *
     * @param bool $react_when_read_only Whether users can react when the room is read-only.
     *
     * @return $this
     */
    public function setReactWhenReadOnly($react_when_read_only)
    {
        $this->container['react_when_read_only'] = $react_when_read_only;

        return $this;
    }

    /**
     * Gets system_messages
     *
     * @return string[]
     */
    public function getSystemMessages()
    {
        return $this->container['system_messages'];
    }

    /**
     * Sets system_messages
     *
     * @param string[] $system_messages The system messages that the room supports.
     *
     * @return $this
     */
    public function setSystemMessages($system_messages)
    {
        $this->container['system_messages'] = $system_messages;

        return $this;
    }

    /**
     * Gets default
     *
     * @return bool
     */
    public function getDefault()
    {
        return $this->container['default'];
    }

    /**
     * Sets default
     *
     * @param bool $default Whether the room is the default room or not.
     *
     * @return $this
     */
    public function setDefault($default)
    {
        $this->container['default'] = $default;

        return $this;
    }

    /**
     * Gets join_code
     *
     * @return string
     */
    public function getJoinCode()
    {
        return $this->container['join_code'];
    }

    /**
     * Sets join_code
     *
     * @param string $join_code The join code of the room.
     *
     * @return $this
     */
    public function setJoinCode($join_code)
    {
        $this->container['join_code'] = $join_code;

        return $this;
    }

    /**
     * Gets streaming_options
     *
     * @return object
     */
    public function getStreamingOptions()
    {
        return $this->container['streaming_options'];
    }

    /**
     * Sets streaming_options
     *
     * @param object $streaming_options The streaming options of the room.
     *
     * @return $this
     */
    public function setStreamingOptions($streaming_options)
    {
        $this->container['streaming_options'] = $streaming_options;

        return $this;
    }

    /**
     * Gets retention_enabled
     *
     * @return bool
     */
    public function getRetentionEnabled()
    {
        return $this->container['retention_enabled'];
    }

    /**
     * Sets retention_enabled
     *
     * @param bool $retention_enabled Whether retention is enabled for the room or not.
     *
     * @return $this
     */
    public function setRetentionEnabled($retention_enabled)
    {
        $this->container['retention_enabled'] = $retention_enabled;

        return $this;
    }

    /**
     * Gets retention_max_age
     *
     * @return string
     */
    public function getRetentionMaxAge()
    {
        return $this->container['retention_max_age'];
    }

    /**
     * Sets retention_max_age
     *
     * @param string $retention_max_age The maximum age (in days) of messages to be retained in the room.
     *
     * @return $this
     */
    public function setRetentionMaxAge($retention_max_age)
    {
        $this->container['retention_max_age'] = $retention_max_age;

        return $this;
    }

    /**
     * Gets retention_exclude_pinned
     *
     * @return bool
     */
    public function getRetentionExcludePinned()
    {
        return $this->container['retention_exclude_pinned'];
    }

    /**
     * Sets retention_exclude_pinned
     *
     * @param bool $retention_exclude_pinned Whether to exclude pinned messages from retention or not.
     *
     * @return $this
     */
    public function setRetentionExcludePinned($retention_exclude_pinned)
    {
        $this->container['retention_exclude_pinned'] = $retention_exclude_pinned;

        return $this;
    }

    /**
     * Gets retention_files_only
     *
     * @return bool
     */
    public function getRetentionFilesOnly()
    {
        return $this->container['retention_files_only'];
    }

    /**
     * Sets retention_files_only
     *
     * @param bool $retention_files_only Whether to retain only files in the room or not.
     *
     * @return $this
     */
    public function setRetentionFilesOnly($retention_files_only)
    {
        $this->container['retention_files_only'] = $retention_files_only;

        return $this;
    }

    /**
     * Gets retention_ignore_threads
     *
     * @return bool
     */
    public function getRetentionIgnoreThreads()
    {
        return $this->container['retention_ignore_threads'];
    }

    /**
     * Sets retention_ignore_threads
     *
     * @param bool $retention_ignore_threads Whether to ignore threads when retaining messages or not.
     *
     * @return $this
     */
    public function setRetentionIgnoreThreads($retention_ignore_threads)
    {
        $this->container['retention_ignore_threads'] = $retention_ignore_threads;

        return $this;
    }

    /**
     * Gets retention_override_global
     *
     * @return bool
     */
    public function getRetentionOverrideGlobal()
    {
        return $this->container['retention_override_global'];
    }

    /**
     * Sets retention_override_global
     *
     * @param bool $retention_override_global Whether to override the global retention settings for the room or not.
     *
     * @return $this
     */
    public function setRetentionOverrideGlobal($retention_override_global)
    {
        $this->container['retention_override_global'] = $retention_override_global;

        return $this;
    }

    /**
     * Gets encrypted
     *
     * @return bool
     */
    public function getEncrypted()
    {
        return $this->container['encrypted'];
    }

    /**
     * Sets encrypted
     *
     * @param bool $encrypted Whether the room is encrypted or not.
     *
     * @return $this
     */
    public function setEncrypted($encrypted)
    {
        $this->container['encrypted'] = $encrypted;

        return $this;
    }

    /**
     * Gets favorite
     *
     * @return object
     */
    public function getFavorite()
    {
        return $this->container['favorite'];
    }

    /**
     * Sets favorite
     *
     * @param object $favorite The favorite settings of the room. Whether the room is marked as favorite and whether it is set as the default room.
     *
     * @return $this
     */
    public function setFavorite($favorite)
    {
        $this->container['favorite'] = $favorite;

        return $this;
    }

    /**
     * Gets sidepanel
     *
     * @return \Swagger\Client\Model\Apiv1roomsSaveRoomSettingsSidepanel
     */
    public function getSidepanel()
    {
        return $this->container['sidepanel'];
    }

    /**
     * Sets sidepanel
     *
     * @param \Swagger\Client\Model\Apiv1roomsSaveRoomSettingsSidepanel $sidepanel sidepanel
     *
     * @return $this
     */
    public function setSidepanel($sidepanel)
    {
        $this->container['sidepanel'] = $sidepanel;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
