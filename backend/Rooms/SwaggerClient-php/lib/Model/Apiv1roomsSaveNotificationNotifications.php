<?php
/**
 * Apiv1roomsSaveNotificationNotifications
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rooms
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.67
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Apiv1roomsSaveNotificationNotifications Class Doc Comment
 *
 * @category Class
 * @description The object that contains the following parameters.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Apiv1roomsSaveNotificationNotifications implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'apiv1rooms.saveNotification_notifications';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'desktop_notifications' => 'string',
        'disable_notifications' => 'string',
        'email_notifications' => 'string',
        'audio_notification_value' => 'string',
        'desktop_notification_duration' => 'string',
        'audio_notifications' => 'string',
        'unread_alert' => 'string',
        'hide_unread_status' => 'string',
        'mobile_push_notifications' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'desktop_notifications' => null,
        'disable_notifications' => null,
        'email_notifications' => null,
        'audio_notification_value' => null,
        'desktop_notification_duration' => null,
        'audio_notifications' => null,
        'unread_alert' => null,
        'hide_unread_status' => null,
        'mobile_push_notifications' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'desktop_notifications' => 'desktopNotifications',
        'disable_notifications' => 'disableNotifications',
        'email_notifications' => 'emailNotifications',
        'audio_notification_value' => 'audioNotificationValue',
        'desktop_notification_duration' => 'desktopNotificationDuration',
        'audio_notifications' => 'audioNotifications',
        'unread_alert' => 'unreadAlert',
        'hide_unread_status' => 'hideUnreadStatus',
        'mobile_push_notifications' => 'mobilePushNotifications'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'desktop_notifications' => 'setDesktopNotifications',
        'disable_notifications' => 'setDisableNotifications',
        'email_notifications' => 'setEmailNotifications',
        'audio_notification_value' => 'setAudioNotificationValue',
        'desktop_notification_duration' => 'setDesktopNotificationDuration',
        'audio_notifications' => 'setAudioNotifications',
        'unread_alert' => 'setUnreadAlert',
        'hide_unread_status' => 'setHideUnreadStatus',
        'mobile_push_notifications' => 'setMobilePushNotifications'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'desktop_notifications' => 'getDesktopNotifications',
        'disable_notifications' => 'getDisableNotifications',
        'email_notifications' => 'getEmailNotifications',
        'audio_notification_value' => 'getAudioNotificationValue',
        'desktop_notification_duration' => 'getDesktopNotificationDuration',
        'audio_notifications' => 'getAudioNotifications',
        'unread_alert' => 'getUnreadAlert',
        'hide_unread_status' => 'getHideUnreadStatus',
        'mobile_push_notifications' => 'getMobilePushNotifications'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['desktop_notifications'] = isset($data['desktop_notifications']) ? $data['desktop_notifications'] : null;
        $this->container['disable_notifications'] = isset($data['disable_notifications']) ? $data['disable_notifications'] : null;
        $this->container['email_notifications'] = isset($data['email_notifications']) ? $data['email_notifications'] : null;
        $this->container['audio_notification_value'] = isset($data['audio_notification_value']) ? $data['audio_notification_value'] : null;
        $this->container['desktop_notification_duration'] = isset($data['desktop_notification_duration']) ? $data['desktop_notification_duration'] : null;
        $this->container['audio_notifications'] = isset($data['audio_notifications']) ? $data['audio_notifications'] : null;
        $this->container['unread_alert'] = isset($data['unread_alert']) ? $data['unread_alert'] : null;
        $this->container['hide_unread_status'] = isset($data['hide_unread_status']) ? $data['hide_unread_status'] : null;
        $this->container['mobile_push_notifications'] = isset($data['mobile_push_notifications']) ? $data['mobile_push_notifications'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets desktop_notifications
     *
     * @return string
     */
    public function getDesktopNotifications()
    {
        return $this->container['desktop_notifications'];
    }

    /**
     * Sets desktop_notifications
     *
     * @param string $desktop_notifications The value for desktop notifications. The options are:  - nothing - mentions - all - default
     *
     * @return $this
     */
    public function setDesktopNotifications($desktop_notifications)
    {
        $this->container['desktop_notifications'] = $desktop_notifications;

        return $this;
    }

    /**
     * Gets disable_notifications
     *
     * @return string
     */
    public function getDisableNotifications()
    {
        return $this->container['disable_notifications'];
    }

    /**
     * Sets disable_notifications
     *
     * @param string $disable_notifications The value to disable/enable channel's notifications.   The options are: - 0 - 1
     *
     * @return $this
     */
    public function setDisableNotifications($disable_notifications)
    {
        $this->container['disable_notifications'] = $disable_notifications;

        return $this;
    }

    /**
     * Gets email_notifications
     *
     * @return string
     */
    public function getEmailNotifications()
    {
        return $this->container['email_notifications'];
    }

    /**
     * Sets email_notifications
     *
     * @param string $email_notifications The value for email notifications.  The options are: - nothing - mentions - all - default
     *
     * @return $this
     */
    public function setEmailNotifications($email_notifications)
    {
        $this->container['email_notifications'] = $email_notifications;

        return $this;
    }

    /**
     * Gets audio_notification_value
     *
     * @return string
     */
    public function getAudioNotificationValue()
    {
        return $this->container['audio_notification_value'];
    }

    /**
     * Sets audio_notification_value
     *
     * @param string $audio_notification_value The value for audio notification sound.
     *
     * @return $this
     */
    public function setAudioNotificationValue($audio_notification_value)
    {
        $this->container['audio_notification_value'] = $audio_notification_value;

        return $this;
    }

    /**
     * Gets desktop_notification_duration
     *
     * @return string
     */
    public function getDesktopNotificationDuration()
    {
        return $this->container['desktop_notification_duration'];
    }

    /**
     * Sets desktop_notification_duration
     *
     * @param string $desktop_notification_duration The value for desktop notification duration.
     *
     * @return $this
     */
    public function setDesktopNotificationDuration($desktop_notification_duration)
    {
        $this->container['desktop_notification_duration'] = $desktop_notification_duration;

        return $this;
    }

    /**
     * Gets audio_notifications
     *
     * @return string
     */
    public function getAudioNotifications()
    {
        return $this->container['audio_notifications'];
    }

    /**
     * Sets audio_notifications
     *
     * @param string $audio_notifications The value for audio notifications.   The options are: - nothing - mentions - all - default
     *
     * @return $this
     */
    public function setAudioNotifications($audio_notifications)
    {
        $this->container['audio_notifications'] = $audio_notifications;

        return $this;
    }

    /**
     * Gets unread_alert
     *
     * @return string
     */
    public function getUnreadAlert()
    {
        return $this->container['unread_alert'];
    }

    /**
     * Sets unread_alert
     *
     * @param string $unread_alert The value for unread alerts notifications.   The options are: - nothing - mentions - all - default
     *
     * @return $this
     */
    public function setUnreadAlert($unread_alert)
    {
        $this->container['unread_alert'] = $unread_alert;

        return $this;
    }

    /**
     * Gets hide_unread_status
     *
     * @return string
     */
    public function getHideUnreadStatus()
    {
        return $this->container['hide_unread_status'];
    }

    /**
     * Sets hide_unread_status
     *
     * @param string $hide_unread_status The value to disable/enable number of unread messages.  The options are: - 0 - 1
     *
     * @return $this
     */
    public function setHideUnreadStatus($hide_unread_status)
    {
        $this->container['hide_unread_status'] = $hide_unread_status;

        return $this;
    }

    /**
     * Gets mobile_push_notifications
     *
     * @return string
     */
    public function getMobilePushNotifications()
    {
        return $this->container['mobile_push_notifications'];
    }

    /**
     * Sets mobile_push_notifications
     *
     * @param string $mobile_push_notifications The value for mobile push notifications.   The options are: - nothing - mentions - all - default
     *
     * @return $this
     */
    public function setMobilePushNotifications($mobile_push_notifications)
    {
        $this->container['mobile_push_notifications'] = $mobile_push_notifications;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
