<?php
/**
 * V1RoomsCleanHistoryBody
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rooms
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.67
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * V1RoomsCleanHistoryBody Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V1RoomsCleanHistoryBody implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v1_rooms_cleanHistory_body';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'room_id' => 'string',
        'latest' => 'string',
        'oldest' => 'string',
        'inclusive' => 'bool',
        'exclude_pinned' => 'bool',
        'files_only' => 'bool',
        'users' => 'string[]',
        'limit' => 'int',
        'ignore_discussion' => 'bool',
        'ignore_threads' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'room_id' => null,
        'latest' => null,
        'oldest' => null,
        'inclusive' => null,
        'exclude_pinned' => null,
        'files_only' => null,
        'users' => null,
        'limit' => null,
        'ignore_discussion' => null,
        'ignore_threads' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'room_id' => 'roomId',
        'latest' => 'latest',
        'oldest' => 'oldest',
        'inclusive' => 'inclusive',
        'exclude_pinned' => 'excludePinned',
        'files_only' => 'filesOnly',
        'users' => 'users',
        'limit' => 'limit',
        'ignore_discussion' => 'ignoreDiscussion',
        'ignore_threads' => 'ignoreThreads'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'room_id' => 'setRoomId',
        'latest' => 'setLatest',
        'oldest' => 'setOldest',
        'inclusive' => 'setInclusive',
        'exclude_pinned' => 'setExcludePinned',
        'files_only' => 'setFilesOnly',
        'users' => 'setUsers',
        'limit' => 'setLimit',
        'ignore_discussion' => 'setIgnoreDiscussion',
        'ignore_threads' => 'setIgnoreThreads'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'room_id' => 'getRoomId',
        'latest' => 'getLatest',
        'oldest' => 'getOldest',
        'inclusive' => 'getInclusive',
        'exclude_pinned' => 'getExcludePinned',
        'files_only' => 'getFilesOnly',
        'users' => 'getUsers',
        'limit' => 'getLimit',
        'ignore_discussion' => 'getIgnoreDiscussion',
        'ignore_threads' => 'getIgnoreThreads'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['room_id'] = isset($data['room_id']) ? $data['room_id'] : null;
        $this->container['latest'] = isset($data['latest']) ? $data['latest'] : null;
        $this->container['oldest'] = isset($data['oldest']) ? $data['oldest'] : null;
        $this->container['inclusive'] = isset($data['inclusive']) ? $data['inclusive'] : null;
        $this->container['exclude_pinned'] = isset($data['exclude_pinned']) ? $data['exclude_pinned'] : null;
        $this->container['files_only'] = isset($data['files_only']) ? $data['files_only'] : null;
        $this->container['users'] = isset($data['users']) ? $data['users'] : null;
        $this->container['limit'] = isset($data['limit']) ? $data['limit'] : null;
        $this->container['ignore_discussion'] = isset($data['ignore_discussion']) ? $data['ignore_discussion'] : null;
        $this->container['ignore_threads'] = isset($data['ignore_threads']) ? $data['ignore_threads'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['room_id'] === null) {
            $invalidProperties[] = "'room_id' can't be null";
        }
        if ($this->container['latest'] === null) {
            $invalidProperties[] = "'latest' can't be null";
        }
        if ($this->container['oldest'] === null) {
            $invalidProperties[] = "'oldest' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets room_id
     *
     * @return string
     */
    public function getRoomId()
    {
        return $this->container['room_id'];
    }

    /**
     * Sets room_id
     *
     * @param string $room_id The room ID.
     *
     * @return $this
     */
    public function setRoomId($room_id)
    {
        $this->container['room_id'] = $room_id;

        return $this;
    }

    /**
     * Gets latest
     *
     * @return string
     */
    public function getLatest()
    {
        return $this->container['latest'];
    }

    /**
     * Sets latest
     *
     * @param string $latest The end of time range of messages.
     *
     * @return $this
     */
    public function setLatest($latest)
    {
        $this->container['latest'] = $latest;

        return $this;
    }

    /**
     * Gets oldest
     *
     * @return string
     */
    public function getOldest()
    {
        return $this->container['oldest'];
    }

    /**
     * Sets oldest
     *
     * @param string $oldest The start of the time range of messages.
     *
     * @return $this
     */
    public function setOldest($oldest)
    {
        $this->container['oldest'] = $oldest;

        return $this;
    }

    /**
     * Gets inclusive
     *
     * @return bool
     */
    public function getInclusive()
    {
        return $this->container['inclusive'];
    }

    /**
     * Sets inclusive
     *
     * @param bool $inclusive Whether messages which land on the latest and oldest dates should be included. By default, the value is false.
     *
     * @return $this
     */
    public function setInclusive($inclusive)
    {
        $this->container['inclusive'] = $inclusive;

        return $this;
    }

    /**
     * Gets exclude_pinned
     *
     * @return bool
     */
    public function getExcludePinned()
    {
        return $this->container['exclude_pinned'];
    }

    /**
     * Sets exclude_pinned
     *
     * @param bool $exclude_pinned Whether pinned messages should be deleted. By default, the value is false.
     *
     * @return $this
     */
    public function setExcludePinned($exclude_pinned)
    {
        $this->container['exclude_pinned'] = $exclude_pinned;

        return $this;
    }

    /**
     * Gets files_only
     *
     * @return bool
     */
    public function getFilesOnly()
    {
        return $this->container['files_only'];
    }

    /**
     * Sets files_only
     *
     * @param bool $files_only Whether to only delete files and keep messages intact. By default, the value is false.
     *
     * @return $this
     */
    public function setFilesOnly($files_only)
    {
        $this->container['files_only'] = $files_only;

        return $this;
    }

    /**
     * Gets users
     *
     * @return string[]
     */
    public function getUsers()
    {
        return $this->container['users'];
    }

    /**
     * Sets users
     *
     * @param string[] $users Specific set of users whose content to delete. By default, the value is [], that is, everyone.
     *
     * @return $this
     */
    public function setUsers($users)
    {
        $this->container['users'] = $users;

        return $this;
    }

    /**
     * Gets limit
     *
     * @return int
     */
    public function getLimit()
    {
        return $this->container['limit'];
    }

    /**
     * Sets limit
     *
     * @param int $limit The amount of messages to prune. By default, the value is 0 (all).
     *
     * @return $this
     */
    public function setLimit($limit)
    {
        $this->container['limit'] = $limit;

        return $this;
    }

    /**
     * Gets ignore_discussion
     *
     * @return bool
     */
    public function getIgnoreDiscussion()
    {
        return $this->container['ignore_discussion'];
    }

    /**
     * Sets ignore_discussion
     *
     * @param bool $ignore_discussion Determines if messages from discussions should be pruned. By default, the value is true.
     *
     * @return $this
     */
    public function setIgnoreDiscussion($ignore_discussion)
    {
        $this->container['ignore_discussion'] = $ignore_discussion;

        return $this;
    }

    /**
     * Gets ignore_threads
     *
     * @return bool
     */
    public function getIgnoreThreads()
    {
        return $this->container['ignore_threads'];
    }

    /**
     * Sets ignore_threads
     *
     * @param bool $ignore_threads Determines if messages from threads should be pruned. By default, the value is true.
     *
     * @return $this
     */
    public function setIgnoreThreads($ignore_threads)
    {
        $this->container['ignore_threads'] = $ignore_threads;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
