<?php
/**
 * DirectoryApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rooms
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.67
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * DirectoryApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DirectoryApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getApiV1Directory
     *
     * Directory
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param   $query The query to search the workspace directory. When &#x60;type&#x60; is users you can send an additional workspace field, that can be local (default) or all. Workspace&#x3D;all will work only if &lt;a href&#x3D;\&quot;https://docs.rocket.chat/use-rocket.chat/rocket.chat-federation\&quot; target&#x3D;\&quot;_blank\&quot;&gt;federation&lt;/a&gt; is enabled. (required)
     * @param  string $text The search term to be filtered (optional)
     * @param  string $type It can be &#x60;channels&#x60; or &#x60;users&#x60;. When &#x60;type&#x60; is users you can send an additional workspace field, that can be local (default) or all. Workspace&#x3D;all will work only if &lt;a href&#x3D;\&quot;https://docs.rocket.chat/use-rocket.chat/rocket.chat-federation\&quot; target&#x3D;\&quot;_blank\&quot;&gt;federation&lt;/a&gt; is enabled. (optional)
     * @param  string $workspace It can be &#x60;local&#x60; or &#x60;all&#x60;( if federation is enabled). It is &#x60;local&#x60; by default. (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count The number of items to return. (optional)
     * @param   $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  string $fields This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: &#x60;fields&#x3D;{ \&quot;username\&quot;: 1 }&#x60;. Refer to the [official documentation](https://developer.rocket.chat/apidocs/query-parameters#query-and-fields) to learn more. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20067
     */
    public function getApiV1Directory($x_auth_token, $x_user_id, $query, $text = null, $type = null, $workspace = null, $offset = null, $count = null, $sort = null, $fields = null)
    {
        list($response) = $this->getApiV1DirectoryWithHttpInfo($x_auth_token, $x_user_id, $query, $text, $type, $workspace, $offset, $count, $sort, $fields);
        return $response;
    }

    /**
     * Operation getApiV1DirectoryWithHttpInfo
     *
     * Directory
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param   $query The query to search the workspace directory. When &#x60;type&#x60; is users you can send an additional workspace field, that can be local (default) or all. Workspace&#x3D;all will work only if &lt;a href&#x3D;\&quot;https://docs.rocket.chat/use-rocket.chat/rocket.chat-federation\&quot; target&#x3D;\&quot;_blank\&quot;&gt;federation&lt;/a&gt; is enabled. (required)
     * @param  string $text The search term to be filtered (optional)
     * @param  string $type It can be &#x60;channels&#x60; or &#x60;users&#x60;. When &#x60;type&#x60; is users you can send an additional workspace field, that can be local (default) or all. Workspace&#x3D;all will work only if &lt;a href&#x3D;\&quot;https://docs.rocket.chat/use-rocket.chat/rocket.chat-federation\&quot; target&#x3D;\&quot;_blank\&quot;&gt;federation&lt;/a&gt; is enabled. (optional)
     * @param  string $workspace It can be &#x60;local&#x60; or &#x60;all&#x60;( if federation is enabled). It is &#x60;local&#x60; by default. (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count The number of items to return. (optional)
     * @param   $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  string $fields This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: &#x60;fields&#x3D;{ \&quot;username\&quot;: 1 }&#x60;. Refer to the [official documentation](https://developer.rocket.chat/apidocs/query-parameters#query-and-fields) to learn more. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20067, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1DirectoryWithHttpInfo($x_auth_token, $x_user_id, $query, $text = null, $type = null, $workspace = null, $offset = null, $count = null, $sort = null, $fields = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20067';
        $request = $this->getApiV1DirectoryRequest($x_auth_token, $x_user_id, $query, $text, $type, $workspace, $offset, $count, $sort, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20067',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1DirectoryAsync
     *
     * Directory
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param   $query The query to search the workspace directory. When &#x60;type&#x60; is users you can send an additional workspace field, that can be local (default) or all. Workspace&#x3D;all will work only if &lt;a href&#x3D;\&quot;https://docs.rocket.chat/use-rocket.chat/rocket.chat-federation\&quot; target&#x3D;\&quot;_blank\&quot;&gt;federation&lt;/a&gt; is enabled. (required)
     * @param  string $text The search term to be filtered (optional)
     * @param  string $type It can be &#x60;channels&#x60; or &#x60;users&#x60;. When &#x60;type&#x60; is users you can send an additional workspace field, that can be local (default) or all. Workspace&#x3D;all will work only if &lt;a href&#x3D;\&quot;https://docs.rocket.chat/use-rocket.chat/rocket.chat-federation\&quot; target&#x3D;\&quot;_blank\&quot;&gt;federation&lt;/a&gt; is enabled. (optional)
     * @param  string $workspace It can be &#x60;local&#x60; or &#x60;all&#x60;( if federation is enabled). It is &#x60;local&#x60; by default. (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count The number of items to return. (optional)
     * @param   $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  string $fields This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: &#x60;fields&#x3D;{ \&quot;username\&quot;: 1 }&#x60;. Refer to the [official documentation](https://developer.rocket.chat/apidocs/query-parameters#query-and-fields) to learn more. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1DirectoryAsync($x_auth_token, $x_user_id, $query, $text = null, $type = null, $workspace = null, $offset = null, $count = null, $sort = null, $fields = null)
    {
        return $this->getApiV1DirectoryAsyncWithHttpInfo($x_auth_token, $x_user_id, $query, $text, $type, $workspace, $offset, $count, $sort, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1DirectoryAsyncWithHttpInfo
     *
     * Directory
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param   $query The query to search the workspace directory. When &#x60;type&#x60; is users you can send an additional workspace field, that can be local (default) or all. Workspace&#x3D;all will work only if &lt;a href&#x3D;\&quot;https://docs.rocket.chat/use-rocket.chat/rocket.chat-federation\&quot; target&#x3D;\&quot;_blank\&quot;&gt;federation&lt;/a&gt; is enabled. (required)
     * @param  string $text The search term to be filtered (optional)
     * @param  string $type It can be &#x60;channels&#x60; or &#x60;users&#x60;. When &#x60;type&#x60; is users you can send an additional workspace field, that can be local (default) or all. Workspace&#x3D;all will work only if &lt;a href&#x3D;\&quot;https://docs.rocket.chat/use-rocket.chat/rocket.chat-federation\&quot; target&#x3D;\&quot;_blank\&quot;&gt;federation&lt;/a&gt; is enabled. (optional)
     * @param  string $workspace It can be &#x60;local&#x60; or &#x60;all&#x60;( if federation is enabled). It is &#x60;local&#x60; by default. (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count The number of items to return. (optional)
     * @param   $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  string $fields This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: &#x60;fields&#x3D;{ \&quot;username\&quot;: 1 }&#x60;. Refer to the [official documentation](https://developer.rocket.chat/apidocs/query-parameters#query-and-fields) to learn more. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1DirectoryAsyncWithHttpInfo($x_auth_token, $x_user_id, $query, $text = null, $type = null, $workspace = null, $offset = null, $count = null, $sort = null, $fields = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20067';
        $request = $this->getApiV1DirectoryRequest($x_auth_token, $x_user_id, $query, $text, $type, $workspace, $offset, $count, $sort, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1Directory'
     *
     * @param  string $x_auth_token The &#x60;authToken&#x60; of the authenticated user. (required)
     * @param  string $x_user_id The &#x60;userId&#x60; of the authenticated user. (required)
     * @param   $query The query to search the workspace directory. When &#x60;type&#x60; is users you can send an additional workspace field, that can be local (default) or all. Workspace&#x3D;all will work only if &lt;a href&#x3D;\&quot;https://docs.rocket.chat/use-rocket.chat/rocket.chat-federation\&quot; target&#x3D;\&quot;_blank\&quot;&gt;federation&lt;/a&gt; is enabled. (required)
     * @param  string $text The search term to be filtered (optional)
     * @param  string $type It can be &#x60;channels&#x60; or &#x60;users&#x60;. When &#x60;type&#x60; is users you can send an additional workspace field, that can be local (default) or all. Workspace&#x3D;all will work only if &lt;a href&#x3D;\&quot;https://docs.rocket.chat/use-rocket.chat/rocket.chat-federation\&quot; target&#x3D;\&quot;_blank\&quot;&gt;federation&lt;/a&gt; is enabled. (optional)
     * @param  string $workspace It can be &#x60;local&#x60; or &#x60;all&#x60;( if federation is enabled). It is &#x60;local&#x60; by default. (optional)
     * @param  int $offset Number of items to \&quot;skip\&quot; in the query, i.e. requests return count items, skipping the first offset items. (optional)
     * @param  int $count The number of items to return. (optional)
     * @param   $sort List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\&quot;value\&quot;: -1, \&quot;_id\&quot;: 1} (optional)
     * @param  string $fields This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: &#x60;fields&#x3D;{ \&quot;username\&quot;: 1 }&#x60;. Refer to the [official documentation](https://developer.rocket.chat/apidocs/query-parameters#query-and-fields) to learn more. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getApiV1DirectoryRequest($x_auth_token, $x_user_id, $query, $text = null, $type = null, $workspace = null, $offset = null, $count = null, $sort = null, $fields = null)
    {
        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null || (is_array($x_auth_token) && count($x_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_auth_token when calling getApiV1Directory'
            );
        }
        // verify the required parameter 'x_user_id' is set
        if ($x_user_id === null || (is_array($x_user_id) && count($x_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user_id when calling getApiV1Directory'
            );
        }
        // verify the required parameter 'query' is set
        if ($query === null || (is_array($query) && count($query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $query when calling getApiV1Directory'
            );
        }

        $resourcePath = '/api/v1/directory';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($text !== null) {
            $queryParams['text'] = ObjectSerializer::toQueryValue($text, null);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type, null);
        }
        // query params
        if ($workspace !== null) {
            $queryParams['workspace'] = ObjectSerializer::toQueryValue($workspace, null);
        }
        // query params
        if ($query !== null) {
            $queryParams['query'] = ObjectSerializer::toQueryValue($query, null);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset, null);
        }
        // query params
        if ($count !== null) {
            $queryParams['count'] = ObjectSerializer::toQueryValue($count, null);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort, null);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields, null);
        }
        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = ObjectSerializer::toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_user_id !== null) {
            $headerParams['X-User-Id'] = ObjectSerializer::toHeaderValue($x_user_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
