<?php
/**
 * InlineResponse20022
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Settings
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.67
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse20022 Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20022 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_22';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        '_id' => 'string',
        'type' => 'string',
        'session_id' => 'string',
        'instance_id' => 'string',
        'login_token' => 'string',
        'ip' => 'string',
        'host' => 'string',
        'device' => '\Swagger\Client\Model\InlineResponse20020Device',
        'user_id' => 'string',
        'roles' => 'string[]',
        'most_important_role' => 'string',
        'login_at' => 'string',
        'day' => 'int',
        'month' => 'int',
        'year' => 'int',
        'search_term' => 'string',
        'created_at' => 'string',
        '_updated_at' => 'string',
        'closed_at' => 'string',
        'last_activity_at' => 'string',
        'success' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        '_id' => null,
        'type' => null,
        'session_id' => null,
        'instance_id' => null,
        'login_token' => null,
        'ip' => null,
        'host' => null,
        'device' => null,
        'user_id' => null,
        'roles' => null,
        'most_important_role' => null,
        'login_at' => null,
        'day' => null,
        'month' => null,
        'year' => null,
        'search_term' => null,
        'created_at' => null,
        '_updated_at' => null,
        'closed_at' => null,
        'last_activity_at' => null,
        'success' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        '_id' => '_id',
        'type' => 'type',
        'session_id' => 'sessionId',
        'instance_id' => 'instanceId',
        'login_token' => 'loginToken',
        'ip' => 'ip',
        'host' => 'host',
        'device' => 'device',
        'user_id' => 'userId',
        'roles' => 'roles',
        'most_important_role' => 'mostImportantRole',
        'login_at' => 'loginAt',
        'day' => 'day',
        'month' => 'month',
        'year' => 'year',
        'search_term' => 'searchTerm',
        'created_at' => 'createdAt',
        '_updated_at' => '_updatedAt',
        'closed_at' => 'closedAt',
        'last_activity_at' => 'lastActivityAt',
        'success' => 'success'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        '_id' => 'setId',
        'type' => 'setType',
        'session_id' => 'setSessionId',
        'instance_id' => 'setInstanceId',
        'login_token' => 'setLoginToken',
        'ip' => 'setIp',
        'host' => 'setHost',
        'device' => 'setDevice',
        'user_id' => 'setUserId',
        'roles' => 'setRoles',
        'most_important_role' => 'setMostImportantRole',
        'login_at' => 'setLoginAt',
        'day' => 'setDay',
        'month' => 'setMonth',
        'year' => 'setYear',
        'search_term' => 'setSearchTerm',
        'created_at' => 'setCreatedAt',
        '_updated_at' => 'setUpdatedAt',
        'closed_at' => 'setClosedAt',
        'last_activity_at' => 'setLastActivityAt',
        'success' => 'setSuccess'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        '_id' => 'getId',
        'type' => 'getType',
        'session_id' => 'getSessionId',
        'instance_id' => 'getInstanceId',
        'login_token' => 'getLoginToken',
        'ip' => 'getIp',
        'host' => 'getHost',
        'device' => 'getDevice',
        'user_id' => 'getUserId',
        'roles' => 'getRoles',
        'most_important_role' => 'getMostImportantRole',
        'login_at' => 'getLoginAt',
        'day' => 'getDay',
        'month' => 'getMonth',
        'year' => 'getYear',
        'search_term' => 'getSearchTerm',
        'created_at' => 'getCreatedAt',
        '_updated_at' => 'getUpdatedAt',
        'closed_at' => 'getClosedAt',
        'last_activity_at' => 'getLastActivityAt',
        'success' => 'getSuccess'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['_id'] = isset($data['_id']) ? $data['_id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['session_id'] = isset($data['session_id']) ? $data['session_id'] : null;
        $this->container['instance_id'] = isset($data['instance_id']) ? $data['instance_id'] : null;
        $this->container['login_token'] = isset($data['login_token']) ? $data['login_token'] : null;
        $this->container['ip'] = isset($data['ip']) ? $data['ip'] : null;
        $this->container['host'] = isset($data['host']) ? $data['host'] : null;
        $this->container['device'] = isset($data['device']) ? $data['device'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['roles'] = isset($data['roles']) ? $data['roles'] : null;
        $this->container['most_important_role'] = isset($data['most_important_role']) ? $data['most_important_role'] : null;
        $this->container['login_at'] = isset($data['login_at']) ? $data['login_at'] : null;
        $this->container['day'] = isset($data['day']) ? $data['day'] : null;
        $this->container['month'] = isset($data['month']) ? $data['month'] : null;
        $this->container['year'] = isset($data['year']) ? $data['year'] : null;
        $this->container['search_term'] = isset($data['search_term']) ? $data['search_term'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['_updated_at'] = isset($data['_updated_at']) ? $data['_updated_at'] : null;
        $this->container['closed_at'] = isset($data['closed_at']) ? $data['closed_at'] : null;
        $this->container['last_activity_at'] = isset($data['last_activity_at']) ? $data['last_activity_at'] : null;
        $this->container['success'] = isset($data['success']) ? $data['success'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets _id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['_id'];
    }

    /**
     * Sets _id
     *
     * @param string $_id _id
     *
     * @return $this
     */
    public function setId($_id)
    {
        $this->container['_id'] = $_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets session_id
     *
     * @return string
     */
    public function getSessionId()
    {
        return $this->container['session_id'];
    }

    /**
     * Sets session_id
     *
     * @param string $session_id session_id
     *
     * @return $this
     */
    public function setSessionId($session_id)
    {
        $this->container['session_id'] = $session_id;

        return $this;
    }

    /**
     * Gets instance_id
     *
     * @return string
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     *
     * @param string $instance_id instance_id
     *
     * @return $this
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }

    /**
     * Gets login_token
     *
     * @return string
     */
    public function getLoginToken()
    {
        return $this->container['login_token'];
    }

    /**
     * Sets login_token
     *
     * @param string $login_token login_token
     *
     * @return $this
     */
    public function setLoginToken($login_token)
    {
        $this->container['login_token'] = $login_token;

        return $this;
    }

    /**
     * Gets ip
     *
     * @return string
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string $ip ip
     *
     * @return $this
     */
    public function setIp($ip)
    {
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets host
     *
     * @return string
     */
    public function getHost()
    {
        return $this->container['host'];
    }

    /**
     * Sets host
     *
     * @param string $host host
     *
     * @return $this
     */
    public function setHost($host)
    {
        $this->container['host'] = $host;

        return $this;
    }

    /**
     * Gets device
     *
     * @return \Swagger\Client\Model\InlineResponse20020Device
     */
    public function getDevice()
    {
        return $this->container['device'];
    }

    /**
     * Sets device
     *
     * @param \Swagger\Client\Model\InlineResponse20020Device $device device
     *
     * @return $this
     */
    public function setDevice($device)
    {
        $this->container['device'] = $device;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string $user_id user_id
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets roles
     *
     * @return string[]
     */
    public function getRoles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     *
     * @param string[] $roles roles
     *
     * @return $this
     */
    public function setRoles($roles)
    {
        $this->container['roles'] = $roles;

        return $this;
    }

    /**
     * Gets most_important_role
     *
     * @return string
     */
    public function getMostImportantRole()
    {
        return $this->container['most_important_role'];
    }

    /**
     * Sets most_important_role
     *
     * @param string $most_important_role most_important_role
     *
     * @return $this
     */
    public function setMostImportantRole($most_important_role)
    {
        $this->container['most_important_role'] = $most_important_role;

        return $this;
    }

    /**
     * Gets login_at
     *
     * @return string
     */
    public function getLoginAt()
    {
        return $this->container['login_at'];
    }

    /**
     * Sets login_at
     *
     * @param string $login_at login_at
     *
     * @return $this
     */
    public function setLoginAt($login_at)
    {
        $this->container['login_at'] = $login_at;

        return $this;
    }

    /**
     * Gets day
     *
     * @return int
     */
    public function getDay()
    {
        return $this->container['day'];
    }

    /**
     * Sets day
     *
     * @param int $day day
     *
     * @return $this
     */
    public function setDay($day)
    {
        $this->container['day'] = $day;

        return $this;
    }

    /**
     * Gets month
     *
     * @return int
     */
    public function getMonth()
    {
        return $this->container['month'];
    }

    /**
     * Sets month
     *
     * @param int $month month
     *
     * @return $this
     */
    public function setMonth($month)
    {
        $this->container['month'] = $month;

        return $this;
    }

    /**
     * Gets year
     *
     * @return int
     */
    public function getYear()
    {
        return $this->container['year'];
    }

    /**
     * Sets year
     *
     * @param int $year year
     *
     * @return $this
     */
    public function setYear($year)
    {
        $this->container['year'] = $year;

        return $this;
    }

    /**
     * Gets search_term
     *
     * @return string
     */
    public function getSearchTerm()
    {
        return $this->container['search_term'];
    }

    /**
     * Sets search_term
     *
     * @param string $search_term search_term
     *
     * @return $this
     */
    public function setSearchTerm($search_term)
    {
        $this->container['search_term'] = $search_term;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets _updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['_updated_at'];
    }

    /**
     * Sets _updated_at
     *
     * @param string $_updated_at _updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($_updated_at)
    {
        $this->container['_updated_at'] = $_updated_at;

        return $this;
    }

    /**
     * Gets closed_at
     *
     * @return string
     */
    public function getClosedAt()
    {
        return $this->container['closed_at'];
    }

    /**
     * Sets closed_at
     *
     * @param string $closed_at closed_at
     *
     * @return $this
     */
    public function setClosedAt($closed_at)
    {
        $this->container['closed_at'] = $closed_at;

        return $this;
    }

    /**
     * Gets last_activity_at
     *
     * @return string
     */
    public function getLastActivityAt()
    {
        return $this->container['last_activity_at'];
    }

    /**
     * Sets last_activity_at
     *
     * @param string $last_activity_at last_activity_at
     *
     * @return $this
     */
    public function setLastActivityAt($last_activity_at)
    {
        $this->container['last_activity_at'] = $last_activity_at;

        return $this;
    }

    /**
     * Gets success
     *
     * @return bool
     */
    public function getSuccess()
    {
        return $this->container['success'];
    }

    /**
     * Sets success
     *
     * @param bool $success success
     *
     * @return $this
     */
    public function setSuccess($success)
    {
        $this->container['success'] = $success;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
