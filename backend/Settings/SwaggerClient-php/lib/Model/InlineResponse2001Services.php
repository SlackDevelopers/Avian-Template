<?php
/**
 * InlineResponse2001Services
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Settings
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.67
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse2001Services Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2001Services implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_1_services';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        '_id' => 'string',
        'name' => 'string',
        'client_id' => 'string',
        'button_label_text' => 'string',
        'button_color' => 'string',
        'button_label_color' => 'string',
        'custom' => 'bool',
        'service' => 'string',
        'server_url' => 'string',
        'token_path' => 'string',
        'identity_path' => 'string',
        'authorize_path' => 'string',
        'scope' => 'string',
        'login_style' => 'string',
        'token_sent_via' => 'string',
        'identity_token_sent_via' => 'string',
        'username_field' => 'string',
        'merge_users' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        '_id' => null,
        'name' => null,
        'client_id' => null,
        'button_label_text' => null,
        'button_color' => null,
        'button_label_color' => null,
        'custom' => null,
        'service' => null,
        'server_url' => null,
        'token_path' => null,
        'identity_path' => null,
        'authorize_path' => null,
        'scope' => null,
        'login_style' => null,
        'token_sent_via' => null,
        'identity_token_sent_via' => null,
        'username_field' => null,
        'merge_users' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        '_id' => '_id',
        'name' => 'name',
        'client_id' => 'clientId',
        'button_label_text' => 'buttonLabelText',
        'button_color' => 'buttonColor',
        'button_label_color' => 'buttonLabelColor',
        'custom' => 'custom',
        'service' => 'service',
        'server_url' => 'serverURL',
        'token_path' => 'tokenPath',
        'identity_path' => 'identityPath',
        'authorize_path' => 'authorizePath',
        'scope' => 'scope',
        'login_style' => 'loginStyle',
        'token_sent_via' => 'tokenSentVia',
        'identity_token_sent_via' => 'identityTokenSentVia',
        'username_field' => 'usernameField',
        'merge_users' => 'mergeUsers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        '_id' => 'setId',
        'name' => 'setName',
        'client_id' => 'setClientId',
        'button_label_text' => 'setButtonLabelText',
        'button_color' => 'setButtonColor',
        'button_label_color' => 'setButtonLabelColor',
        'custom' => 'setCustom',
        'service' => 'setService',
        'server_url' => 'setServerUrl',
        'token_path' => 'setTokenPath',
        'identity_path' => 'setIdentityPath',
        'authorize_path' => 'setAuthorizePath',
        'scope' => 'setScope',
        'login_style' => 'setLoginStyle',
        'token_sent_via' => 'setTokenSentVia',
        'identity_token_sent_via' => 'setIdentityTokenSentVia',
        'username_field' => 'setUsernameField',
        'merge_users' => 'setMergeUsers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        '_id' => 'getId',
        'name' => 'getName',
        'client_id' => 'getClientId',
        'button_label_text' => 'getButtonLabelText',
        'button_color' => 'getButtonColor',
        'button_label_color' => 'getButtonLabelColor',
        'custom' => 'getCustom',
        'service' => 'getService',
        'server_url' => 'getServerUrl',
        'token_path' => 'getTokenPath',
        'identity_path' => 'getIdentityPath',
        'authorize_path' => 'getAuthorizePath',
        'scope' => 'getScope',
        'login_style' => 'getLoginStyle',
        'token_sent_via' => 'getTokenSentVia',
        'identity_token_sent_via' => 'getIdentityTokenSentVia',
        'username_field' => 'getUsernameField',
        'merge_users' => 'getMergeUsers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['_id'] = isset($data['_id']) ? $data['_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['client_id'] = isset($data['client_id']) ? $data['client_id'] : null;
        $this->container['button_label_text'] = isset($data['button_label_text']) ? $data['button_label_text'] : null;
        $this->container['button_color'] = isset($data['button_color']) ? $data['button_color'] : null;
        $this->container['button_label_color'] = isset($data['button_label_color']) ? $data['button_label_color'] : null;
        $this->container['custom'] = isset($data['custom']) ? $data['custom'] : null;
        $this->container['service'] = isset($data['service']) ? $data['service'] : null;
        $this->container['server_url'] = isset($data['server_url']) ? $data['server_url'] : null;
        $this->container['token_path'] = isset($data['token_path']) ? $data['token_path'] : null;
        $this->container['identity_path'] = isset($data['identity_path']) ? $data['identity_path'] : null;
        $this->container['authorize_path'] = isset($data['authorize_path']) ? $data['authorize_path'] : null;
        $this->container['scope'] = isset($data['scope']) ? $data['scope'] : null;
        $this->container['login_style'] = isset($data['login_style']) ? $data['login_style'] : null;
        $this->container['token_sent_via'] = isset($data['token_sent_via']) ? $data['token_sent_via'] : null;
        $this->container['identity_token_sent_via'] = isset($data['identity_token_sent_via']) ? $data['identity_token_sent_via'] : null;
        $this->container['username_field'] = isset($data['username_field']) ? $data['username_field'] : null;
        $this->container['merge_users'] = isset($data['merge_users']) ? $data['merge_users'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets _id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['_id'];
    }

    /**
     * Sets _id
     *
     * @param string $_id _id
     *
     * @return $this
     */
    public function setId($_id)
    {
        $this->container['_id'] = $_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return string
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string $client_id client_id
     *
     * @return $this
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets button_label_text
     *
     * @return string
     */
    public function getButtonLabelText()
    {
        return $this->container['button_label_text'];
    }

    /**
     * Sets button_label_text
     *
     * @param string $button_label_text button_label_text
     *
     * @return $this
     */
    public function setButtonLabelText($button_label_text)
    {
        $this->container['button_label_text'] = $button_label_text;

        return $this;
    }

    /**
     * Gets button_color
     *
     * @return string
     */
    public function getButtonColor()
    {
        return $this->container['button_color'];
    }

    /**
     * Sets button_color
     *
     * @param string $button_color button_color
     *
     * @return $this
     */
    public function setButtonColor($button_color)
    {
        $this->container['button_color'] = $button_color;

        return $this;
    }

    /**
     * Gets button_label_color
     *
     * @return string
     */
    public function getButtonLabelColor()
    {
        return $this->container['button_label_color'];
    }

    /**
     * Sets button_label_color
     *
     * @param string $button_label_color button_label_color
     *
     * @return $this
     */
    public function setButtonLabelColor($button_label_color)
    {
        $this->container['button_label_color'] = $button_label_color;

        return $this;
    }

    /**
     * Gets custom
     *
     * @return bool
     */
    public function getCustom()
    {
        return $this->container['custom'];
    }

    /**
     * Sets custom
     *
     * @param bool $custom custom
     *
     * @return $this
     */
    public function setCustom($custom)
    {
        $this->container['custom'] = $custom;

        return $this;
    }

    /**
     * Gets service
     *
     * @return string
     */
    public function getService()
    {
        return $this->container['service'];
    }

    /**
     * Sets service
     *
     * @param string $service service
     *
     * @return $this
     */
    public function setService($service)
    {
        $this->container['service'] = $service;

        return $this;
    }

    /**
     * Gets server_url
     *
     * @return string
     */
    public function getServerUrl()
    {
        return $this->container['server_url'];
    }

    /**
     * Sets server_url
     *
     * @param string $server_url server_url
     *
     * @return $this
     */
    public function setServerUrl($server_url)
    {
        $this->container['server_url'] = $server_url;

        return $this;
    }

    /**
     * Gets token_path
     *
     * @return string
     */
    public function getTokenPath()
    {
        return $this->container['token_path'];
    }

    /**
     * Sets token_path
     *
     * @param string $token_path token_path
     *
     * @return $this
     */
    public function setTokenPath($token_path)
    {
        $this->container['token_path'] = $token_path;

        return $this;
    }

    /**
     * Gets identity_path
     *
     * @return string
     */
    public function getIdentityPath()
    {
        return $this->container['identity_path'];
    }

    /**
     * Sets identity_path
     *
     * @param string $identity_path identity_path
     *
     * @return $this
     */
    public function setIdentityPath($identity_path)
    {
        $this->container['identity_path'] = $identity_path;

        return $this;
    }

    /**
     * Gets authorize_path
     *
     * @return string
     */
    public function getAuthorizePath()
    {
        return $this->container['authorize_path'];
    }

    /**
     * Sets authorize_path
     *
     * @param string $authorize_path authorize_path
     *
     * @return $this
     */
    public function setAuthorizePath($authorize_path)
    {
        $this->container['authorize_path'] = $authorize_path;

        return $this;
    }

    /**
     * Gets scope
     *
     * @return string
     */
    public function getScope()
    {
        return $this->container['scope'];
    }

    /**
     * Sets scope
     *
     * @param string $scope scope
     *
     * @return $this
     */
    public function setScope($scope)
    {
        $this->container['scope'] = $scope;

        return $this;
    }

    /**
     * Gets login_style
     *
     * @return string
     */
    public function getLoginStyle()
    {
        return $this->container['login_style'];
    }

    /**
     * Sets login_style
     *
     * @param string $login_style login_style
     *
     * @return $this
     */
    public function setLoginStyle($login_style)
    {
        $this->container['login_style'] = $login_style;

        return $this;
    }

    /**
     * Gets token_sent_via
     *
     * @return string
     */
    public function getTokenSentVia()
    {
        return $this->container['token_sent_via'];
    }

    /**
     * Sets token_sent_via
     *
     * @param string $token_sent_via token_sent_via
     *
     * @return $this
     */
    public function setTokenSentVia($token_sent_via)
    {
        $this->container['token_sent_via'] = $token_sent_via;

        return $this;
    }

    /**
     * Gets identity_token_sent_via
     *
     * @return string
     */
    public function getIdentityTokenSentVia()
    {
        return $this->container['identity_token_sent_via'];
    }

    /**
     * Sets identity_token_sent_via
     *
     * @param string $identity_token_sent_via identity_token_sent_via
     *
     * @return $this
     */
    public function setIdentityTokenSentVia($identity_token_sent_via)
    {
        $this->container['identity_token_sent_via'] = $identity_token_sent_via;

        return $this;
    }

    /**
     * Gets username_field
     *
     * @return string
     */
    public function getUsernameField()
    {
        return $this->container['username_field'];
    }

    /**
     * Sets username_field
     *
     * @param string $username_field username_field
     *
     * @return $this
     */
    public function setUsernameField($username_field)
    {
        $this->container['username_field'] = $username_field;

        return $this;
    }

    /**
     * Gets merge_users
     *
     * @return bool
     */
    public function getMergeUsers()
    {
        return $this->container['merge_users'];
    }

    /**
     * Sets merge_users
     *
     * @param bool $merge_users merge_users
     *
     * @return $this
     */
    public function setMergeUsers($merge_users)
    {
        $this->container['merge_users'] = $merge_users;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
