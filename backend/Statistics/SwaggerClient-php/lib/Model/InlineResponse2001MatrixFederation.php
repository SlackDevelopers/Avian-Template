<?php
/**
 * InlineResponse2001MatrixFederation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Statistics
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.67
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse2001MatrixFederation Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2001MatrixFederation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_1_matrixFederation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'enabled' => 'bool',
        'maximum_size_of_public_rooms_users' => 'int',
        'biggest_room' => 'string',
        'smallest_room' => 'string',
        'amount_of_external_users' => 'int',
        'amount_of_federated_rooms' => 'int',
        'external_connected_servers' => '\Swagger\Client\Model\InlineResponse2001MatrixFederationExternalConnectedServers'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'enabled' => null,
        'maximum_size_of_public_rooms_users' => null,
        'biggest_room' => null,
        'smallest_room' => null,
        'amount_of_external_users' => null,
        'amount_of_federated_rooms' => null,
        'external_connected_servers' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enabled' => 'enabled',
        'maximum_size_of_public_rooms_users' => 'maximumSizeOfPublicRoomsUsers',
        'biggest_room' => 'biggestRoom',
        'smallest_room' => 'smallestRoom',
        'amount_of_external_users' => 'amountOfExternalUsers',
        'amount_of_federated_rooms' => 'amountOfFederatedRooms',
        'external_connected_servers' => 'externalConnectedServers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enabled' => 'setEnabled',
        'maximum_size_of_public_rooms_users' => 'setMaximumSizeOfPublicRoomsUsers',
        'biggest_room' => 'setBiggestRoom',
        'smallest_room' => 'setSmallestRoom',
        'amount_of_external_users' => 'setAmountOfExternalUsers',
        'amount_of_federated_rooms' => 'setAmountOfFederatedRooms',
        'external_connected_servers' => 'setExternalConnectedServers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enabled' => 'getEnabled',
        'maximum_size_of_public_rooms_users' => 'getMaximumSizeOfPublicRoomsUsers',
        'biggest_room' => 'getBiggestRoom',
        'smallest_room' => 'getSmallestRoom',
        'amount_of_external_users' => 'getAmountOfExternalUsers',
        'amount_of_federated_rooms' => 'getAmountOfFederatedRooms',
        'external_connected_servers' => 'getExternalConnectedServers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['maximum_size_of_public_rooms_users'] = isset($data['maximum_size_of_public_rooms_users']) ? $data['maximum_size_of_public_rooms_users'] : null;
        $this->container['biggest_room'] = isset($data['biggest_room']) ? $data['biggest_room'] : null;
        $this->container['smallest_room'] = isset($data['smallest_room']) ? $data['smallest_room'] : null;
        $this->container['amount_of_external_users'] = isset($data['amount_of_external_users']) ? $data['amount_of_external_users'] : null;
        $this->container['amount_of_federated_rooms'] = isset($data['amount_of_federated_rooms']) ? $data['amount_of_federated_rooms'] : null;
        $this->container['external_connected_servers'] = isset($data['external_connected_servers']) ? $data['external_connected_servers'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets maximum_size_of_public_rooms_users
     *
     * @return int
     */
    public function getMaximumSizeOfPublicRoomsUsers()
    {
        return $this->container['maximum_size_of_public_rooms_users'];
    }

    /**
     * Sets maximum_size_of_public_rooms_users
     *
     * @param int $maximum_size_of_public_rooms_users maximum_size_of_public_rooms_users
     *
     * @return $this
     */
    public function setMaximumSizeOfPublicRoomsUsers($maximum_size_of_public_rooms_users)
    {
        $this->container['maximum_size_of_public_rooms_users'] = $maximum_size_of_public_rooms_users;

        return $this;
    }

    /**
     * Gets biggest_room
     *
     * @return string
     */
    public function getBiggestRoom()
    {
        return $this->container['biggest_room'];
    }

    /**
     * Sets biggest_room
     *
     * @param string $biggest_room biggest_room
     *
     * @return $this
     */
    public function setBiggestRoom($biggest_room)
    {
        $this->container['biggest_room'] = $biggest_room;

        return $this;
    }

    /**
     * Gets smallest_room
     *
     * @return string
     */
    public function getSmallestRoom()
    {
        return $this->container['smallest_room'];
    }

    /**
     * Sets smallest_room
     *
     * @param string $smallest_room smallest_room
     *
     * @return $this
     */
    public function setSmallestRoom($smallest_room)
    {
        $this->container['smallest_room'] = $smallest_room;

        return $this;
    }

    /**
     * Gets amount_of_external_users
     *
     * @return int
     */
    public function getAmountOfExternalUsers()
    {
        return $this->container['amount_of_external_users'];
    }

    /**
     * Sets amount_of_external_users
     *
     * @param int $amount_of_external_users amount_of_external_users
     *
     * @return $this
     */
    public function setAmountOfExternalUsers($amount_of_external_users)
    {
        $this->container['amount_of_external_users'] = $amount_of_external_users;

        return $this;
    }

    /**
     * Gets amount_of_federated_rooms
     *
     * @return int
     */
    public function getAmountOfFederatedRooms()
    {
        return $this->container['amount_of_federated_rooms'];
    }

    /**
     * Sets amount_of_federated_rooms
     *
     * @param int $amount_of_federated_rooms amount_of_federated_rooms
     *
     * @return $this
     */
    public function setAmountOfFederatedRooms($amount_of_federated_rooms)
    {
        $this->container['amount_of_federated_rooms'] = $amount_of_federated_rooms;

        return $this;
    }

    /**
     * Gets external_connected_servers
     *
     * @return \Swagger\Client\Model\InlineResponse2001MatrixFederationExternalConnectedServers
     */
    public function getExternalConnectedServers()
    {
        return $this->container['external_connected_servers'];
    }

    /**
     * Sets external_connected_servers
     *
     * @param \Swagger\Client\Model\InlineResponse2001MatrixFederationExternalConnectedServers $external_connected_servers external_connected_servers
     *
     * @return $this
     */
    public function setExternalConnectedServers($external_connected_servers)
    {
        $this->container['external_connected_servers'] = $external_connected_servers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
