<?php
/**
 * InlineResponse2001ServicesSaml
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Statistics
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.67
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse2001ServicesSaml Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2001ServicesSaml implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_1_services_saml';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'enabled' => 'bool',
        'users' => 'int',
        'signature_validation_type' => 'string',
        'generate_username' => 'bool',
        'update_subscriptions_on_login' => 'bool',
        'sync_roles' => 'bool',
        'user_data_custom_field_map' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'enabled' => null,
        'users' => null,
        'signature_validation_type' => null,
        'generate_username' => null,
        'update_subscriptions_on_login' => null,
        'sync_roles' => null,
        'user_data_custom_field_map' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enabled' => 'enabled',
        'users' => 'users',
        'signature_validation_type' => 'signatureValidationType',
        'generate_username' => 'generateUsername',
        'update_subscriptions_on_login' => 'updateSubscriptionsOnLogin',
        'sync_roles' => 'syncRoles',
        'user_data_custom_field_map' => 'userDataCustomFieldMap'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enabled' => 'setEnabled',
        'users' => 'setUsers',
        'signature_validation_type' => 'setSignatureValidationType',
        'generate_username' => 'setGenerateUsername',
        'update_subscriptions_on_login' => 'setUpdateSubscriptionsOnLogin',
        'sync_roles' => 'setSyncRoles',
        'user_data_custom_field_map' => 'setUserDataCustomFieldMap'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enabled' => 'getEnabled',
        'users' => 'getUsers',
        'signature_validation_type' => 'getSignatureValidationType',
        'generate_username' => 'getGenerateUsername',
        'update_subscriptions_on_login' => 'getUpdateSubscriptionsOnLogin',
        'sync_roles' => 'getSyncRoles',
        'user_data_custom_field_map' => 'getUserDataCustomFieldMap'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['users'] = isset($data['users']) ? $data['users'] : null;
        $this->container['signature_validation_type'] = isset($data['signature_validation_type']) ? $data['signature_validation_type'] : null;
        $this->container['generate_username'] = isset($data['generate_username']) ? $data['generate_username'] : null;
        $this->container['update_subscriptions_on_login'] = isset($data['update_subscriptions_on_login']) ? $data['update_subscriptions_on_login'] : null;
        $this->container['sync_roles'] = isset($data['sync_roles']) ? $data['sync_roles'] : null;
        $this->container['user_data_custom_field_map'] = isset($data['user_data_custom_field_map']) ? $data['user_data_custom_field_map'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets users
     *
     * @return int
     */
    public function getUsers()
    {
        return $this->container['users'];
    }

    /**
     * Sets users
     *
     * @param int $users users
     *
     * @return $this
     */
    public function setUsers($users)
    {
        $this->container['users'] = $users;

        return $this;
    }

    /**
     * Gets signature_validation_type
     *
     * @return string
     */
    public function getSignatureValidationType()
    {
        return $this->container['signature_validation_type'];
    }

    /**
     * Sets signature_validation_type
     *
     * @param string $signature_validation_type signature_validation_type
     *
     * @return $this
     */
    public function setSignatureValidationType($signature_validation_type)
    {
        $this->container['signature_validation_type'] = $signature_validation_type;

        return $this;
    }

    /**
     * Gets generate_username
     *
     * @return bool
     */
    public function getGenerateUsername()
    {
        return $this->container['generate_username'];
    }

    /**
     * Sets generate_username
     *
     * @param bool $generate_username generate_username
     *
     * @return $this
     */
    public function setGenerateUsername($generate_username)
    {
        $this->container['generate_username'] = $generate_username;

        return $this;
    }

    /**
     * Gets update_subscriptions_on_login
     *
     * @return bool
     */
    public function getUpdateSubscriptionsOnLogin()
    {
        return $this->container['update_subscriptions_on_login'];
    }

    /**
     * Sets update_subscriptions_on_login
     *
     * @param bool $update_subscriptions_on_login update_subscriptions_on_login
     *
     * @return $this
     */
    public function setUpdateSubscriptionsOnLogin($update_subscriptions_on_login)
    {
        $this->container['update_subscriptions_on_login'] = $update_subscriptions_on_login;

        return $this;
    }

    /**
     * Gets sync_roles
     *
     * @return bool
     */
    public function getSyncRoles()
    {
        return $this->container['sync_roles'];
    }

    /**
     * Sets sync_roles
     *
     * @param bool $sync_roles sync_roles
     *
     * @return $this
     */
    public function setSyncRoles($sync_roles)
    {
        $this->container['sync_roles'] = $sync_roles;

        return $this;
    }

    /**
     * Gets user_data_custom_field_map
     *
     * @return bool
     */
    public function getUserDataCustomFieldMap()
    {
        return $this->container['user_data_custom_field_map'];
    }

    /**
     * Sets user_data_custom_field_map
     *
     * @param bool $user_data_custom_field_map user_data_custom_field_map
     *
     * @return $this
     */
    public function setUserDataCustomFieldMap($user_data_custom_field_map)
    {
        $this->container['user_data_custom_field_map'] = $user_data_custom_field_map;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
