<?php
/**
 * InlineResponse2001Settings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Statistics
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.67
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse2001Settings Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2001Settings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_1_settings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'accounts' => '\Swagger\Client\Model\InlineResponse2001SettingsAccounts',
        'canned_responses' => '\Swagger\Client\Model\InlineResponse2001SettingsCannedResponses',
        'e2ee' => '\Swagger\Client\Model\InlineResponse2001SettingsE2ee',
        'email' => '\Swagger\Client\Model\InlineResponse2001SettingsEmail',
        'file_upload' => '\Swagger\Client\Model\InlineResponse2001SettingsFileUpload',
        'general' => '\Swagger\Client\Model\InlineResponse2001SettingsGeneral',
        'live_stream_and_broadcasting' => 'object',
        'message' => '\Swagger\Client\Model\InlineResponse2001SettingsMessage',
        'otr' => '\Swagger\Client\Model\InlineResponse2001SettingsOtr',
        'push' => '\Swagger\Client\Model\InlineResponse2001SettingsPush',
        'search' => '\Swagger\Client\Model\InlineResponse2001SettingsSearch',
        'threads' => '\Swagger\Client\Model\InlineResponse2001SettingsThreads',
        'web_rtc' => '\Swagger\Client\Model\InlineResponse2001SettingsWebRTC'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'accounts' => null,
        'canned_responses' => null,
        'e2ee' => null,
        'email' => null,
        'file_upload' => null,
        'general' => null,
        'live_stream_and_broadcasting' => null,
        'message' => null,
        'otr' => null,
        'push' => null,
        'search' => null,
        'threads' => null,
        'web_rtc' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accounts' => 'accounts',
        'canned_responses' => 'cannedResponses',
        'e2ee' => 'e2ee',
        'email' => 'email',
        'file_upload' => 'fileUpload',
        'general' => 'general',
        'live_stream_and_broadcasting' => 'liveStreamAndBroadcasting',
        'message' => 'message',
        'otr' => 'otr',
        'push' => 'push',
        'search' => 'search',
        'threads' => 'threads',
        'web_rtc' => 'webRTC'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accounts' => 'setAccounts',
        'canned_responses' => 'setCannedResponses',
        'e2ee' => 'setE2ee',
        'email' => 'setEmail',
        'file_upload' => 'setFileUpload',
        'general' => 'setGeneral',
        'live_stream_and_broadcasting' => 'setLiveStreamAndBroadcasting',
        'message' => 'setMessage',
        'otr' => 'setOtr',
        'push' => 'setPush',
        'search' => 'setSearch',
        'threads' => 'setThreads',
        'web_rtc' => 'setWebRtc'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accounts' => 'getAccounts',
        'canned_responses' => 'getCannedResponses',
        'e2ee' => 'getE2ee',
        'email' => 'getEmail',
        'file_upload' => 'getFileUpload',
        'general' => 'getGeneral',
        'live_stream_and_broadcasting' => 'getLiveStreamAndBroadcasting',
        'message' => 'getMessage',
        'otr' => 'getOtr',
        'push' => 'getPush',
        'search' => 'getSearch',
        'threads' => 'getThreads',
        'web_rtc' => 'getWebRtc'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accounts'] = isset($data['accounts']) ? $data['accounts'] : null;
        $this->container['canned_responses'] = isset($data['canned_responses']) ? $data['canned_responses'] : null;
        $this->container['e2ee'] = isset($data['e2ee']) ? $data['e2ee'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['file_upload'] = isset($data['file_upload']) ? $data['file_upload'] : null;
        $this->container['general'] = isset($data['general']) ? $data['general'] : null;
        $this->container['live_stream_and_broadcasting'] = isset($data['live_stream_and_broadcasting']) ? $data['live_stream_and_broadcasting'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['otr'] = isset($data['otr']) ? $data['otr'] : null;
        $this->container['push'] = isset($data['push']) ? $data['push'] : null;
        $this->container['search'] = isset($data['search']) ? $data['search'] : null;
        $this->container['threads'] = isset($data['threads']) ? $data['threads'] : null;
        $this->container['web_rtc'] = isset($data['web_rtc']) ? $data['web_rtc'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accounts
     *
     * @return \Swagger\Client\Model\InlineResponse2001SettingsAccounts
     */
    public function getAccounts()
    {
        return $this->container['accounts'];
    }

    /**
     * Sets accounts
     *
     * @param \Swagger\Client\Model\InlineResponse2001SettingsAccounts $accounts accounts
     *
     * @return $this
     */
    public function setAccounts($accounts)
    {
        $this->container['accounts'] = $accounts;

        return $this;
    }

    /**
     * Gets canned_responses
     *
     * @return \Swagger\Client\Model\InlineResponse2001SettingsCannedResponses
     */
    public function getCannedResponses()
    {
        return $this->container['canned_responses'];
    }

    /**
     * Sets canned_responses
     *
     * @param \Swagger\Client\Model\InlineResponse2001SettingsCannedResponses $canned_responses canned_responses
     *
     * @return $this
     */
    public function setCannedResponses($canned_responses)
    {
        $this->container['canned_responses'] = $canned_responses;

        return $this;
    }

    /**
     * Gets e2ee
     *
     * @return \Swagger\Client\Model\InlineResponse2001SettingsE2ee
     */
    public function getE2ee()
    {
        return $this->container['e2ee'];
    }

    /**
     * Sets e2ee
     *
     * @param \Swagger\Client\Model\InlineResponse2001SettingsE2ee $e2ee e2ee
     *
     * @return $this
     */
    public function setE2ee($e2ee)
    {
        $this->container['e2ee'] = $e2ee;

        return $this;
    }

    /**
     * Gets email
     *
     * @return \Swagger\Client\Model\InlineResponse2001SettingsEmail
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param \Swagger\Client\Model\InlineResponse2001SettingsEmail $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets file_upload
     *
     * @return \Swagger\Client\Model\InlineResponse2001SettingsFileUpload
     */
    public function getFileUpload()
    {
        return $this->container['file_upload'];
    }

    /**
     * Sets file_upload
     *
     * @param \Swagger\Client\Model\InlineResponse2001SettingsFileUpload $file_upload file_upload
     *
     * @return $this
     */
    public function setFileUpload($file_upload)
    {
        $this->container['file_upload'] = $file_upload;

        return $this;
    }

    /**
     * Gets general
     *
     * @return \Swagger\Client\Model\InlineResponse2001SettingsGeneral
     */
    public function getGeneral()
    {
        return $this->container['general'];
    }

    /**
     * Sets general
     *
     * @param \Swagger\Client\Model\InlineResponse2001SettingsGeneral $general general
     *
     * @return $this
     */
    public function setGeneral($general)
    {
        $this->container['general'] = $general;

        return $this;
    }

    /**
     * Gets live_stream_and_broadcasting
     *
     * @return object
     */
    public function getLiveStreamAndBroadcasting()
    {
        return $this->container['live_stream_and_broadcasting'];
    }

    /**
     * Sets live_stream_and_broadcasting
     *
     * @param object $live_stream_and_broadcasting live_stream_and_broadcasting
     *
     * @return $this
     */
    public function setLiveStreamAndBroadcasting($live_stream_and_broadcasting)
    {
        $this->container['live_stream_and_broadcasting'] = $live_stream_and_broadcasting;

        return $this;
    }

    /**
     * Gets message
     *
     * @return \Swagger\Client\Model\InlineResponse2001SettingsMessage
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param \Swagger\Client\Model\InlineResponse2001SettingsMessage $message message
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets otr
     *
     * @return \Swagger\Client\Model\InlineResponse2001SettingsOtr
     */
    public function getOtr()
    {
        return $this->container['otr'];
    }

    /**
     * Sets otr
     *
     * @param \Swagger\Client\Model\InlineResponse2001SettingsOtr $otr otr
     *
     * @return $this
     */
    public function setOtr($otr)
    {
        $this->container['otr'] = $otr;

        return $this;
    }

    /**
     * Gets push
     *
     * @return \Swagger\Client\Model\InlineResponse2001SettingsPush
     */
    public function getPush()
    {
        return $this->container['push'];
    }

    /**
     * Sets push
     *
     * @param \Swagger\Client\Model\InlineResponse2001SettingsPush $push push
     *
     * @return $this
     */
    public function setPush($push)
    {
        $this->container['push'] = $push;

        return $this;
    }

    /**
     * Gets search
     *
     * @return \Swagger\Client\Model\InlineResponse2001SettingsSearch
     */
    public function getSearch()
    {
        return $this->container['search'];
    }

    /**
     * Sets search
     *
     * @param \Swagger\Client\Model\InlineResponse2001SettingsSearch $search search
     *
     * @return $this
     */
    public function setSearch($search)
    {
        $this->container['search'] = $search;

        return $this;
    }

    /**
     * Gets threads
     *
     * @return \Swagger\Client\Model\InlineResponse2001SettingsThreads
     */
    public function getThreads()
    {
        return $this->container['threads'];
    }

    /**
     * Sets threads
     *
     * @param \Swagger\Client\Model\InlineResponse2001SettingsThreads $threads threads
     *
     * @return $this
     */
    public function setThreads($threads)
    {
        $this->container['threads'] = $threads;

        return $this;
    }

    /**
     * Gets web_rtc
     *
     * @return \Swagger\Client\Model\InlineResponse2001SettingsWebRTC
     */
    public function getWebRtc()
    {
        return $this->container['web_rtc'];
    }

    /**
     * Sets web_rtc
     *
     * @param \Swagger\Client\Model\InlineResponse2001SettingsWebRTC $web_rtc web_rtc
     *
     * @return $this
     */
    public function setWebRtc($web_rtc)
    {
        $this->container['web_rtc'] = $web_rtc;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
