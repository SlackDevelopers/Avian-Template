<?php
/**
 * InlineResponse2001SettingsMessage
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Statistics
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.67
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse2001SettingsMessage Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2001SettingsMessage implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_1_settings_message';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'allow_editing' => 'bool',
        'allow_deleting' => 'bool',
        'allow_unrecognized_slash_command' => 'bool',
        'allow_bad_words_filter' => 'bool',
        'read_receipt_enabled' => 'bool',
        'read_receipt_store_users' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'allow_editing' => null,
        'allow_deleting' => null,
        'allow_unrecognized_slash_command' => null,
        'allow_bad_words_filter' => null,
        'read_receipt_enabled' => null,
        'read_receipt_store_users' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allow_editing' => 'allowEditing',
        'allow_deleting' => 'allowDeleting',
        'allow_unrecognized_slash_command' => 'allowUnrecognizedSlashCommand',
        'allow_bad_words_filter' => 'allowBadWordsFilter',
        'read_receipt_enabled' => 'readReceiptEnabled',
        'read_receipt_store_users' => 'readReceiptStoreUsers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allow_editing' => 'setAllowEditing',
        'allow_deleting' => 'setAllowDeleting',
        'allow_unrecognized_slash_command' => 'setAllowUnrecognizedSlashCommand',
        'allow_bad_words_filter' => 'setAllowBadWordsFilter',
        'read_receipt_enabled' => 'setReadReceiptEnabled',
        'read_receipt_store_users' => 'setReadReceiptStoreUsers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allow_editing' => 'getAllowEditing',
        'allow_deleting' => 'getAllowDeleting',
        'allow_unrecognized_slash_command' => 'getAllowUnrecognizedSlashCommand',
        'allow_bad_words_filter' => 'getAllowBadWordsFilter',
        'read_receipt_enabled' => 'getReadReceiptEnabled',
        'read_receipt_store_users' => 'getReadReceiptStoreUsers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['allow_editing'] = isset($data['allow_editing']) ? $data['allow_editing'] : null;
        $this->container['allow_deleting'] = isset($data['allow_deleting']) ? $data['allow_deleting'] : null;
        $this->container['allow_unrecognized_slash_command'] = isset($data['allow_unrecognized_slash_command']) ? $data['allow_unrecognized_slash_command'] : null;
        $this->container['allow_bad_words_filter'] = isset($data['allow_bad_words_filter']) ? $data['allow_bad_words_filter'] : null;
        $this->container['read_receipt_enabled'] = isset($data['read_receipt_enabled']) ? $data['read_receipt_enabled'] : null;
        $this->container['read_receipt_store_users'] = isset($data['read_receipt_store_users']) ? $data['read_receipt_store_users'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allow_editing
     *
     * @return bool
     */
    public function getAllowEditing()
    {
        return $this->container['allow_editing'];
    }

    /**
     * Sets allow_editing
     *
     * @param bool $allow_editing allow_editing
     *
     * @return $this
     */
    public function setAllowEditing($allow_editing)
    {
        $this->container['allow_editing'] = $allow_editing;

        return $this;
    }

    /**
     * Gets allow_deleting
     *
     * @return bool
     */
    public function getAllowDeleting()
    {
        return $this->container['allow_deleting'];
    }

    /**
     * Sets allow_deleting
     *
     * @param bool $allow_deleting allow_deleting
     *
     * @return $this
     */
    public function setAllowDeleting($allow_deleting)
    {
        $this->container['allow_deleting'] = $allow_deleting;

        return $this;
    }

    /**
     * Gets allow_unrecognized_slash_command
     *
     * @return bool
     */
    public function getAllowUnrecognizedSlashCommand()
    {
        return $this->container['allow_unrecognized_slash_command'];
    }

    /**
     * Sets allow_unrecognized_slash_command
     *
     * @param bool $allow_unrecognized_slash_command allow_unrecognized_slash_command
     *
     * @return $this
     */
    public function setAllowUnrecognizedSlashCommand($allow_unrecognized_slash_command)
    {
        $this->container['allow_unrecognized_slash_command'] = $allow_unrecognized_slash_command;

        return $this;
    }

    /**
     * Gets allow_bad_words_filter
     *
     * @return bool
     */
    public function getAllowBadWordsFilter()
    {
        return $this->container['allow_bad_words_filter'];
    }

    /**
     * Sets allow_bad_words_filter
     *
     * @param bool $allow_bad_words_filter allow_bad_words_filter
     *
     * @return $this
     */
    public function setAllowBadWordsFilter($allow_bad_words_filter)
    {
        $this->container['allow_bad_words_filter'] = $allow_bad_words_filter;

        return $this;
    }

    /**
     * Gets read_receipt_enabled
     *
     * @return bool
     */
    public function getReadReceiptEnabled()
    {
        return $this->container['read_receipt_enabled'];
    }

    /**
     * Sets read_receipt_enabled
     *
     * @param bool $read_receipt_enabled read_receipt_enabled
     *
     * @return $this
     */
    public function setReadReceiptEnabled($read_receipt_enabled)
    {
        $this->container['read_receipt_enabled'] = $read_receipt_enabled;

        return $this;
    }

    /**
     * Gets read_receipt_store_users
     *
     * @return bool
     */
    public function getReadReceiptStoreUsers()
    {
        return $this->container['read_receipt_store_users'];
    }

    /**
     * Sets read_receipt_store_users
     *
     * @param bool $read_receipt_store_users read_receipt_store_users
     *
     * @return $this
     */
    public function setReadReceiptStoreUsers($read_receipt_store_users)
    {
        $this->container['read_receipt_store_users'] = $read_receipt_store_users;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
