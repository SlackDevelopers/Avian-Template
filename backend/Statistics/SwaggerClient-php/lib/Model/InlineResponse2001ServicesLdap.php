<?php
/**
 * InlineResponse2001ServicesLdap
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Statistics
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.67
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse2001ServicesLdap Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2001ServicesLdap implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_1_services_ldap';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'users' => 'int',
        'enabled' => 'bool',
        'login_fallback' => 'bool',
        'encryption' => 'string',
        'merge_users' => 'bool',
        'sync_roles' => 'bool',
        'sync_roles_auto_remove' => 'bool',
        'sync_data' => 'bool',
        'sync_channels' => 'bool',
        'sync_avatar' => 'bool',
        'group_filter' => 'bool',
        'background_sync' => '\Swagger\Client\Model\InlineResponse2001ServicesLdapBackgroundSync',
        'ee' => '\Swagger\Client\Model\InlineResponse2001ServicesLdapEe'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'users' => null,
        'enabled' => null,
        'login_fallback' => null,
        'encryption' => null,
        'merge_users' => null,
        'sync_roles' => null,
        'sync_roles_auto_remove' => null,
        'sync_data' => null,
        'sync_channels' => null,
        'sync_avatar' => null,
        'group_filter' => null,
        'background_sync' => null,
        'ee' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'users' => 'users',
        'enabled' => 'enabled',
        'login_fallback' => 'loginFallback',
        'encryption' => 'encryption',
        'merge_users' => 'mergeUsers',
        'sync_roles' => 'syncRoles',
        'sync_roles_auto_remove' => 'syncRolesAutoRemove',
        'sync_data' => 'syncData',
        'sync_channels' => 'syncChannels',
        'sync_avatar' => 'syncAvatar',
        'group_filter' => 'groupFilter',
        'background_sync' => 'backgroundSync',
        'ee' => 'ee'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'users' => 'setUsers',
        'enabled' => 'setEnabled',
        'login_fallback' => 'setLoginFallback',
        'encryption' => 'setEncryption',
        'merge_users' => 'setMergeUsers',
        'sync_roles' => 'setSyncRoles',
        'sync_roles_auto_remove' => 'setSyncRolesAutoRemove',
        'sync_data' => 'setSyncData',
        'sync_channels' => 'setSyncChannels',
        'sync_avatar' => 'setSyncAvatar',
        'group_filter' => 'setGroupFilter',
        'background_sync' => 'setBackgroundSync',
        'ee' => 'setEe'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'users' => 'getUsers',
        'enabled' => 'getEnabled',
        'login_fallback' => 'getLoginFallback',
        'encryption' => 'getEncryption',
        'merge_users' => 'getMergeUsers',
        'sync_roles' => 'getSyncRoles',
        'sync_roles_auto_remove' => 'getSyncRolesAutoRemove',
        'sync_data' => 'getSyncData',
        'sync_channels' => 'getSyncChannels',
        'sync_avatar' => 'getSyncAvatar',
        'group_filter' => 'getGroupFilter',
        'background_sync' => 'getBackgroundSync',
        'ee' => 'getEe'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['users'] = isset($data['users']) ? $data['users'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['login_fallback'] = isset($data['login_fallback']) ? $data['login_fallback'] : null;
        $this->container['encryption'] = isset($data['encryption']) ? $data['encryption'] : null;
        $this->container['merge_users'] = isset($data['merge_users']) ? $data['merge_users'] : null;
        $this->container['sync_roles'] = isset($data['sync_roles']) ? $data['sync_roles'] : null;
        $this->container['sync_roles_auto_remove'] = isset($data['sync_roles_auto_remove']) ? $data['sync_roles_auto_remove'] : null;
        $this->container['sync_data'] = isset($data['sync_data']) ? $data['sync_data'] : null;
        $this->container['sync_channels'] = isset($data['sync_channels']) ? $data['sync_channels'] : null;
        $this->container['sync_avatar'] = isset($data['sync_avatar']) ? $data['sync_avatar'] : null;
        $this->container['group_filter'] = isset($data['group_filter']) ? $data['group_filter'] : null;
        $this->container['background_sync'] = isset($data['background_sync']) ? $data['background_sync'] : null;
        $this->container['ee'] = isset($data['ee']) ? $data['ee'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets users
     *
     * @return int
     */
    public function getUsers()
    {
        return $this->container['users'];
    }

    /**
     * Sets users
     *
     * @param int $users users
     *
     * @return $this
     */
    public function setUsers($users)
    {
        $this->container['users'] = $users;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets login_fallback
     *
     * @return bool
     */
    public function getLoginFallback()
    {
        return $this->container['login_fallback'];
    }

    /**
     * Sets login_fallback
     *
     * @param bool $login_fallback login_fallback
     *
     * @return $this
     */
    public function setLoginFallback($login_fallback)
    {
        $this->container['login_fallback'] = $login_fallback;

        return $this;
    }

    /**
     * Gets encryption
     *
     * @return string
     */
    public function getEncryption()
    {
        return $this->container['encryption'];
    }

    /**
     * Sets encryption
     *
     * @param string $encryption encryption
     *
     * @return $this
     */
    public function setEncryption($encryption)
    {
        $this->container['encryption'] = $encryption;

        return $this;
    }

    /**
     * Gets merge_users
     *
     * @return bool
     */
    public function getMergeUsers()
    {
        return $this->container['merge_users'];
    }

    /**
     * Sets merge_users
     *
     * @param bool $merge_users merge_users
     *
     * @return $this
     */
    public function setMergeUsers($merge_users)
    {
        $this->container['merge_users'] = $merge_users;

        return $this;
    }

    /**
     * Gets sync_roles
     *
     * @return bool
     */
    public function getSyncRoles()
    {
        return $this->container['sync_roles'];
    }

    /**
     * Sets sync_roles
     *
     * @param bool $sync_roles sync_roles
     *
     * @return $this
     */
    public function setSyncRoles($sync_roles)
    {
        $this->container['sync_roles'] = $sync_roles;

        return $this;
    }

    /**
     * Gets sync_roles_auto_remove
     *
     * @return bool
     */
    public function getSyncRolesAutoRemove()
    {
        return $this->container['sync_roles_auto_remove'];
    }

    /**
     * Sets sync_roles_auto_remove
     *
     * @param bool $sync_roles_auto_remove sync_roles_auto_remove
     *
     * @return $this
     */
    public function setSyncRolesAutoRemove($sync_roles_auto_remove)
    {
        $this->container['sync_roles_auto_remove'] = $sync_roles_auto_remove;

        return $this;
    }

    /**
     * Gets sync_data
     *
     * @return bool
     */
    public function getSyncData()
    {
        return $this->container['sync_data'];
    }

    /**
     * Sets sync_data
     *
     * @param bool $sync_data sync_data
     *
     * @return $this
     */
    public function setSyncData($sync_data)
    {
        $this->container['sync_data'] = $sync_data;

        return $this;
    }

    /**
     * Gets sync_channels
     *
     * @return bool
     */
    public function getSyncChannels()
    {
        return $this->container['sync_channels'];
    }

    /**
     * Sets sync_channels
     *
     * @param bool $sync_channels sync_channels
     *
     * @return $this
     */
    public function setSyncChannels($sync_channels)
    {
        $this->container['sync_channels'] = $sync_channels;

        return $this;
    }

    /**
     * Gets sync_avatar
     *
     * @return bool
     */
    public function getSyncAvatar()
    {
        return $this->container['sync_avatar'];
    }

    /**
     * Sets sync_avatar
     *
     * @param bool $sync_avatar sync_avatar
     *
     * @return $this
     */
    public function setSyncAvatar($sync_avatar)
    {
        $this->container['sync_avatar'] = $sync_avatar;

        return $this;
    }

    /**
     * Gets group_filter
     *
     * @return bool
     */
    public function getGroupFilter()
    {
        return $this->container['group_filter'];
    }

    /**
     * Sets group_filter
     *
     * @param bool $group_filter group_filter
     *
     * @return $this
     */
    public function setGroupFilter($group_filter)
    {
        $this->container['group_filter'] = $group_filter;

        return $this;
    }

    /**
     * Gets background_sync
     *
     * @return \Swagger\Client\Model\InlineResponse2001ServicesLdapBackgroundSync
     */
    public function getBackgroundSync()
    {
        return $this->container['background_sync'];
    }

    /**
     * Sets background_sync
     *
     * @param \Swagger\Client\Model\InlineResponse2001ServicesLdapBackgroundSync $background_sync background_sync
     *
     * @return $this
     */
    public function setBackgroundSync($background_sync)
    {
        $this->container['background_sync'] = $background_sync;

        return $this;
    }

    /**
     * Gets ee
     *
     * @return \Swagger\Client\Model\InlineResponse2001ServicesLdapEe
     */
    public function getEe()
    {
        return $this->container['ee'];
    }

    /**
     * Sets ee
     *
     * @param \Swagger\Client\Model\InlineResponse2001ServicesLdapEe $ee ee
     *
     * @return $this
     */
    public function setEe($ee)
    {
        $this->container['ee'] = $ee;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
