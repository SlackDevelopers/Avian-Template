<?php
/**
 * InlineResponse2001Enterprise
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Statistics
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.67
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse2001Enterprise Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2001Enterprise implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_1_enterprise';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'modules' => 'string[]',
        'tags' => 'string[]',
        'seat_requests' => 'int',
        'canned_responses' => 'int',
        'livechat_tags' => 'int',
        'slas' => 'int',
        'omnichannel_rooms_with_priorities' => 'int',
        'omnichannel_rooms_with_slas' => 'int',
        'business_units' => 'int',
        'livechat_monitors' => 'int',
        'omnichannel_pdf_transcript_succeeded' => 'int',
        'omnichannel_pdf_transcript_requested' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'modules' => null,
        'tags' => null,
        'seat_requests' => null,
        'canned_responses' => null,
        'livechat_tags' => null,
        'slas' => null,
        'omnichannel_rooms_with_priorities' => null,
        'omnichannel_rooms_with_slas' => null,
        'business_units' => null,
        'livechat_monitors' => null,
        'omnichannel_pdf_transcript_succeeded' => null,
        'omnichannel_pdf_transcript_requested' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'modules' => 'modules',
        'tags' => 'tags',
        'seat_requests' => 'seatRequests',
        'canned_responses' => 'cannedResponses',
        'livechat_tags' => 'livechatTags',
        'slas' => 'slas',
        'omnichannel_rooms_with_priorities' => 'omnichannelRoomsWithPriorities',
        'omnichannel_rooms_with_slas' => 'omnichannelRoomsWithSlas',
        'business_units' => 'businessUnits',
        'livechat_monitors' => 'livechatMonitors',
        'omnichannel_pdf_transcript_succeeded' => 'omnichannelPdfTranscriptSucceeded',
        'omnichannel_pdf_transcript_requested' => 'omnichannelPdfTranscriptRequested'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'modules' => 'setModules',
        'tags' => 'setTags',
        'seat_requests' => 'setSeatRequests',
        'canned_responses' => 'setCannedResponses',
        'livechat_tags' => 'setLivechatTags',
        'slas' => 'setSlas',
        'omnichannel_rooms_with_priorities' => 'setOmnichannelRoomsWithPriorities',
        'omnichannel_rooms_with_slas' => 'setOmnichannelRoomsWithSlas',
        'business_units' => 'setBusinessUnits',
        'livechat_monitors' => 'setLivechatMonitors',
        'omnichannel_pdf_transcript_succeeded' => 'setOmnichannelPdfTranscriptSucceeded',
        'omnichannel_pdf_transcript_requested' => 'setOmnichannelPdfTranscriptRequested'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'modules' => 'getModules',
        'tags' => 'getTags',
        'seat_requests' => 'getSeatRequests',
        'canned_responses' => 'getCannedResponses',
        'livechat_tags' => 'getLivechatTags',
        'slas' => 'getSlas',
        'omnichannel_rooms_with_priorities' => 'getOmnichannelRoomsWithPriorities',
        'omnichannel_rooms_with_slas' => 'getOmnichannelRoomsWithSlas',
        'business_units' => 'getBusinessUnits',
        'livechat_monitors' => 'getLivechatMonitors',
        'omnichannel_pdf_transcript_succeeded' => 'getOmnichannelPdfTranscriptSucceeded',
        'omnichannel_pdf_transcript_requested' => 'getOmnichannelPdfTranscriptRequested'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['modules'] = isset($data['modules']) ? $data['modules'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['seat_requests'] = isset($data['seat_requests']) ? $data['seat_requests'] : null;
        $this->container['canned_responses'] = isset($data['canned_responses']) ? $data['canned_responses'] : null;
        $this->container['livechat_tags'] = isset($data['livechat_tags']) ? $data['livechat_tags'] : null;
        $this->container['slas'] = isset($data['slas']) ? $data['slas'] : null;
        $this->container['omnichannel_rooms_with_priorities'] = isset($data['omnichannel_rooms_with_priorities']) ? $data['omnichannel_rooms_with_priorities'] : null;
        $this->container['omnichannel_rooms_with_slas'] = isset($data['omnichannel_rooms_with_slas']) ? $data['omnichannel_rooms_with_slas'] : null;
        $this->container['business_units'] = isset($data['business_units']) ? $data['business_units'] : null;
        $this->container['livechat_monitors'] = isset($data['livechat_monitors']) ? $data['livechat_monitors'] : null;
        $this->container['omnichannel_pdf_transcript_succeeded'] = isset($data['omnichannel_pdf_transcript_succeeded']) ? $data['omnichannel_pdf_transcript_succeeded'] : null;
        $this->container['omnichannel_pdf_transcript_requested'] = isset($data['omnichannel_pdf_transcript_requested']) ? $data['omnichannel_pdf_transcript_requested'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets modules
     *
     * @return string[]
     */
    public function getModules()
    {
        return $this->container['modules'];
    }

    /**
     * Sets modules
     *
     * @param string[] $modules modules
     *
     * @return $this
     */
    public function setModules($modules)
    {
        $this->container['modules'] = $modules;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets seat_requests
     *
     * @return int
     */
    public function getSeatRequests()
    {
        return $this->container['seat_requests'];
    }

    /**
     * Sets seat_requests
     *
     * @param int $seat_requests seat_requests
     *
     * @return $this
     */
    public function setSeatRequests($seat_requests)
    {
        $this->container['seat_requests'] = $seat_requests;

        return $this;
    }

    /**
     * Gets canned_responses
     *
     * @return int
     */
    public function getCannedResponses()
    {
        return $this->container['canned_responses'];
    }

    /**
     * Sets canned_responses
     *
     * @param int $canned_responses canned_responses
     *
     * @return $this
     */
    public function setCannedResponses($canned_responses)
    {
        $this->container['canned_responses'] = $canned_responses;

        return $this;
    }

    /**
     * Gets livechat_tags
     *
     * @return int
     */
    public function getLivechatTags()
    {
        return $this->container['livechat_tags'];
    }

    /**
     * Sets livechat_tags
     *
     * @param int $livechat_tags livechat_tags
     *
     * @return $this
     */
    public function setLivechatTags($livechat_tags)
    {
        $this->container['livechat_tags'] = $livechat_tags;

        return $this;
    }

    /**
     * Gets slas
     *
     * @return int
     */
    public function getSlas()
    {
        return $this->container['slas'];
    }

    /**
     * Sets slas
     *
     * @param int $slas slas
     *
     * @return $this
     */
    public function setSlas($slas)
    {
        $this->container['slas'] = $slas;

        return $this;
    }

    /**
     * Gets omnichannel_rooms_with_priorities
     *
     * @return int
     */
    public function getOmnichannelRoomsWithPriorities()
    {
        return $this->container['omnichannel_rooms_with_priorities'];
    }

    /**
     * Sets omnichannel_rooms_with_priorities
     *
     * @param int $omnichannel_rooms_with_priorities omnichannel_rooms_with_priorities
     *
     * @return $this
     */
    public function setOmnichannelRoomsWithPriorities($omnichannel_rooms_with_priorities)
    {
        $this->container['omnichannel_rooms_with_priorities'] = $omnichannel_rooms_with_priorities;

        return $this;
    }

    /**
     * Gets omnichannel_rooms_with_slas
     *
     * @return int
     */
    public function getOmnichannelRoomsWithSlas()
    {
        return $this->container['omnichannel_rooms_with_slas'];
    }

    /**
     * Sets omnichannel_rooms_with_slas
     *
     * @param int $omnichannel_rooms_with_slas omnichannel_rooms_with_slas
     *
     * @return $this
     */
    public function setOmnichannelRoomsWithSlas($omnichannel_rooms_with_slas)
    {
        $this->container['omnichannel_rooms_with_slas'] = $omnichannel_rooms_with_slas;

        return $this;
    }

    /**
     * Gets business_units
     *
     * @return int
     */
    public function getBusinessUnits()
    {
        return $this->container['business_units'];
    }

    /**
     * Sets business_units
     *
     * @param int $business_units business_units
     *
     * @return $this
     */
    public function setBusinessUnits($business_units)
    {
        $this->container['business_units'] = $business_units;

        return $this;
    }

    /**
     * Gets livechat_monitors
     *
     * @return int
     */
    public function getLivechatMonitors()
    {
        return $this->container['livechat_monitors'];
    }

    /**
     * Sets livechat_monitors
     *
     * @param int $livechat_monitors livechat_monitors
     *
     * @return $this
     */
    public function setLivechatMonitors($livechat_monitors)
    {
        $this->container['livechat_monitors'] = $livechat_monitors;

        return $this;
    }

    /**
     * Gets omnichannel_pdf_transcript_succeeded
     *
     * @return int
     */
    public function getOmnichannelPdfTranscriptSucceeded()
    {
        return $this->container['omnichannel_pdf_transcript_succeeded'];
    }

    /**
     * Sets omnichannel_pdf_transcript_succeeded
     *
     * @param int $omnichannel_pdf_transcript_succeeded omnichannel_pdf_transcript_succeeded
     *
     * @return $this
     */
    public function setOmnichannelPdfTranscriptSucceeded($omnichannel_pdf_transcript_succeeded)
    {
        $this->container['omnichannel_pdf_transcript_succeeded'] = $omnichannel_pdf_transcript_succeeded;

        return $this;
    }

    /**
     * Gets omnichannel_pdf_transcript_requested
     *
     * @return int
     */
    public function getOmnichannelPdfTranscriptRequested()
    {
        return $this->container['omnichannel_pdf_transcript_requested'];
    }

    /**
     * Sets omnichannel_pdf_transcript_requested
     *
     * @param int $omnichannel_pdf_transcript_requested omnichannel_pdf_transcript_requested
     *
     * @return $this
     */
    public function setOmnichannelPdfTranscriptRequested($omnichannel_pdf_transcript_requested)
    {
        $this->container['omnichannel_pdf_transcript_requested'] = $omnichannel_pdf_transcript_requested;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
