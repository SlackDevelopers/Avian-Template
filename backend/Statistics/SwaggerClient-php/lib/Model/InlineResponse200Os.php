<?php
/**
 * InlineResponse200Os
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Statistics
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.67
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse200Os Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse200Os implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_os';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'type' => 'string',
        'platform' => 'string',
        'arch' => 'string',
        'release' => 'string',
        'uptime' => 'float',
        'loadavg' => 'float[]',
        'totalmem' => 'int',
        'freemem' => 'int',
        'cpus' => '\Swagger\Client\Model\InlineResponse200OsCpus[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'type' => null,
        'platform' => null,
        'arch' => null,
        'release' => null,
        'uptime' => null,
        'loadavg' => null,
        'totalmem' => null,
        'freemem' => null,
        'cpus' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'platform' => 'platform',
        'arch' => 'arch',
        'release' => 'release',
        'uptime' => 'uptime',
        'loadavg' => 'loadavg',
        'totalmem' => 'totalmem',
        'freemem' => 'freemem',
        'cpus' => 'cpus'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'platform' => 'setPlatform',
        'arch' => 'setArch',
        'release' => 'setRelease',
        'uptime' => 'setUptime',
        'loadavg' => 'setLoadavg',
        'totalmem' => 'setTotalmem',
        'freemem' => 'setFreemem',
        'cpus' => 'setCpus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'platform' => 'getPlatform',
        'arch' => 'getArch',
        'release' => 'getRelease',
        'uptime' => 'getUptime',
        'loadavg' => 'getLoadavg',
        'totalmem' => 'getTotalmem',
        'freemem' => 'getFreemem',
        'cpus' => 'getCpus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['platform'] = isset($data['platform']) ? $data['platform'] : null;
        $this->container['arch'] = isset($data['arch']) ? $data['arch'] : null;
        $this->container['release'] = isset($data['release']) ? $data['release'] : null;
        $this->container['uptime'] = isset($data['uptime']) ? $data['uptime'] : null;
        $this->container['loadavg'] = isset($data['loadavg']) ? $data['loadavg'] : null;
        $this->container['totalmem'] = isset($data['totalmem']) ? $data['totalmem'] : null;
        $this->container['freemem'] = isset($data['freemem']) ? $data['freemem'] : null;
        $this->container['cpus'] = isset($data['cpus']) ? $data['cpus'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets platform
     *
     * @return string
     */
    public function getPlatform()
    {
        return $this->container['platform'];
    }

    /**
     * Sets platform
     *
     * @param string $platform platform
     *
     * @return $this
     */
    public function setPlatform($platform)
    {
        $this->container['platform'] = $platform;

        return $this;
    }

    /**
     * Gets arch
     *
     * @return string
     */
    public function getArch()
    {
        return $this->container['arch'];
    }

    /**
     * Sets arch
     *
     * @param string $arch arch
     *
     * @return $this
     */
    public function setArch($arch)
    {
        $this->container['arch'] = $arch;

        return $this;
    }

    /**
     * Gets release
     *
     * @return string
     */
    public function getRelease()
    {
        return $this->container['release'];
    }

    /**
     * Sets release
     *
     * @param string $release release
     *
     * @return $this
     */
    public function setRelease($release)
    {
        $this->container['release'] = $release;

        return $this;
    }

    /**
     * Gets uptime
     *
     * @return float
     */
    public function getUptime()
    {
        return $this->container['uptime'];
    }

    /**
     * Sets uptime
     *
     * @param float $uptime uptime
     *
     * @return $this
     */
    public function setUptime($uptime)
    {
        $this->container['uptime'] = $uptime;

        return $this;
    }

    /**
     * Gets loadavg
     *
     * @return float[]
     */
    public function getLoadavg()
    {
        return $this->container['loadavg'];
    }

    /**
     * Sets loadavg
     *
     * @param float[] $loadavg loadavg
     *
     * @return $this
     */
    public function setLoadavg($loadavg)
    {
        $this->container['loadavg'] = $loadavg;

        return $this;
    }

    /**
     * Gets totalmem
     *
     * @return int
     */
    public function getTotalmem()
    {
        return $this->container['totalmem'];
    }

    /**
     * Sets totalmem
     *
     * @param int $totalmem totalmem
     *
     * @return $this
     */
    public function setTotalmem($totalmem)
    {
        $this->container['totalmem'] = $totalmem;

        return $this;
    }

    /**
     * Gets freemem
     *
     * @return int
     */
    public function getFreemem()
    {
        return $this->container['freemem'];
    }

    /**
     * Sets freemem
     *
     * @param int $freemem freemem
     *
     * @return $this
     */
    public function setFreemem($freemem)
    {
        $this->container['freemem'] = $freemem;

        return $this;
    }

    /**
     * Gets cpus
     *
     * @return \Swagger\Client\Model\InlineResponse200OsCpus[]
     */
    public function getCpus()
    {
        return $this->container['cpus'];
    }

    /**
     * Sets cpus
     *
     * @param \Swagger\Client\Model\InlineResponse200OsCpus[] $cpus cpus
     *
     * @return $this
     */
    public function setCpus($cpus)
    {
        $this->container['cpus'] = $cpus;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
