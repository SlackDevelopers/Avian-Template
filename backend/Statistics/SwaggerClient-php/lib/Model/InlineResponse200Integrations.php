<?php
/**
 * InlineResponse200Integrations
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Statistics
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.67
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse200Integrations Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse200Integrations implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_integrations';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'total_integrations' => 'int',
        'total_incoming' => 'int',
        'total_incoming_active' => 'int',
        'total_outgoing' => 'int',
        'total_outgoing_active' => 'int',
        'total_with_script_enabled' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'total_integrations' => null,
        'total_incoming' => null,
        'total_incoming_active' => null,
        'total_outgoing' => null,
        'total_outgoing_active' => null,
        'total_with_script_enabled' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'total_integrations' => 'totalIntegrations',
        'total_incoming' => 'totalIncoming',
        'total_incoming_active' => 'totalIncomingActive',
        'total_outgoing' => 'totalOutgoing',
        'total_outgoing_active' => 'totalOutgoingActive',
        'total_with_script_enabled' => 'totalWithScriptEnabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'total_integrations' => 'setTotalIntegrations',
        'total_incoming' => 'setTotalIncoming',
        'total_incoming_active' => 'setTotalIncomingActive',
        'total_outgoing' => 'setTotalOutgoing',
        'total_outgoing_active' => 'setTotalOutgoingActive',
        'total_with_script_enabled' => 'setTotalWithScriptEnabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'total_integrations' => 'getTotalIntegrations',
        'total_incoming' => 'getTotalIncoming',
        'total_incoming_active' => 'getTotalIncomingActive',
        'total_outgoing' => 'getTotalOutgoing',
        'total_outgoing_active' => 'getTotalOutgoingActive',
        'total_with_script_enabled' => 'getTotalWithScriptEnabled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['total_integrations'] = isset($data['total_integrations']) ? $data['total_integrations'] : null;
        $this->container['total_incoming'] = isset($data['total_incoming']) ? $data['total_incoming'] : null;
        $this->container['total_incoming_active'] = isset($data['total_incoming_active']) ? $data['total_incoming_active'] : null;
        $this->container['total_outgoing'] = isset($data['total_outgoing']) ? $data['total_outgoing'] : null;
        $this->container['total_outgoing_active'] = isset($data['total_outgoing_active']) ? $data['total_outgoing_active'] : null;
        $this->container['total_with_script_enabled'] = isset($data['total_with_script_enabled']) ? $data['total_with_script_enabled'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets total_integrations
     *
     * @return int
     */
    public function getTotalIntegrations()
    {
        return $this->container['total_integrations'];
    }

    /**
     * Sets total_integrations
     *
     * @param int $total_integrations total_integrations
     *
     * @return $this
     */
    public function setTotalIntegrations($total_integrations)
    {
        $this->container['total_integrations'] = $total_integrations;

        return $this;
    }

    /**
     * Gets total_incoming
     *
     * @return int
     */
    public function getTotalIncoming()
    {
        return $this->container['total_incoming'];
    }

    /**
     * Sets total_incoming
     *
     * @param int $total_incoming total_incoming
     *
     * @return $this
     */
    public function setTotalIncoming($total_incoming)
    {
        $this->container['total_incoming'] = $total_incoming;

        return $this;
    }

    /**
     * Gets total_incoming_active
     *
     * @return int
     */
    public function getTotalIncomingActive()
    {
        return $this->container['total_incoming_active'];
    }

    /**
     * Sets total_incoming_active
     *
     * @param int $total_incoming_active total_incoming_active
     *
     * @return $this
     */
    public function setTotalIncomingActive($total_incoming_active)
    {
        $this->container['total_incoming_active'] = $total_incoming_active;

        return $this;
    }

    /**
     * Gets total_outgoing
     *
     * @return int
     */
    public function getTotalOutgoing()
    {
        return $this->container['total_outgoing'];
    }

    /**
     * Sets total_outgoing
     *
     * @param int $total_outgoing total_outgoing
     *
     * @return $this
     */
    public function setTotalOutgoing($total_outgoing)
    {
        $this->container['total_outgoing'] = $total_outgoing;

        return $this;
    }

    /**
     * Gets total_outgoing_active
     *
     * @return int
     */
    public function getTotalOutgoingActive()
    {
        return $this->container['total_outgoing_active'];
    }

    /**
     * Sets total_outgoing_active
     *
     * @param int $total_outgoing_active total_outgoing_active
     *
     * @return $this
     */
    public function setTotalOutgoingActive($total_outgoing_active)
    {
        $this->container['total_outgoing_active'] = $total_outgoing_active;

        return $this;
    }

    /**
     * Gets total_with_script_enabled
     *
     * @return int
     */
    public function getTotalWithScriptEnabled()
    {
        return $this->container['total_with_script_enabled'];
    }

    /**
     * Sets total_with_script_enabled
     *
     * @param int $total_with_script_enabled total_with_script_enabled
     *
     * @return $this
     */
    public function setTotalWithScriptEnabled($total_with_script_enabled)
    {
        $this->container['total_with_script_enabled'] = $total_with_script_enabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
