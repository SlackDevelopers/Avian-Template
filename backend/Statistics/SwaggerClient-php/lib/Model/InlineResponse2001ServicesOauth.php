<?php
/**
 * InlineResponse2001ServicesOauth
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Statistics
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.67
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse2001ServicesOauth Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2001ServicesOauth implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_1_services_oauth';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'apple' => '\Swagger\Client\Model\InlineResponse200ServicesOauthApple',
        'dolphin' => '\Swagger\Client\Model\InlineResponse200ServicesOauthApple',
        'drupal' => '\Swagger\Client\Model\InlineResponse200ServicesOauthApple',
        'facebook' => '\Swagger\Client\Model\InlineResponse200ServicesOauthApple',
        'github' => '\Swagger\Client\Model\InlineResponse200ServicesOauthApple',
        'github_enterprise' => '\Swagger\Client\Model\InlineResponse200ServicesOauthApple',
        'gitlab' => '\Swagger\Client\Model\InlineResponse200ServicesOauthApple',
        'google' => '\Swagger\Client\Model\InlineResponse200ServicesOauthApple',
        'linkedin' => '\Swagger\Client\Model\InlineResponse200ServicesOauthApple',
        'meteor' => '\Swagger\Client\Model\InlineResponse200ServicesOauthApple',
        'nextcloud' => '\Swagger\Client\Model\InlineResponse200ServicesOauthApple',
        'tokenpass' => '\Swagger\Client\Model\InlineResponse200ServicesOauthApple',
        'twitter' => '\Swagger\Client\Model\InlineResponse200ServicesOauthApple',
        'wordpress' => '\Swagger\Client\Model\InlineResponse200ServicesOauthApple',
        'custom' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'apple' => null,
        'dolphin' => null,
        'drupal' => null,
        'facebook' => null,
        'github' => null,
        'github_enterprise' => null,
        'gitlab' => null,
        'google' => null,
        'linkedin' => null,
        'meteor' => null,
        'nextcloud' => null,
        'tokenpass' => null,
        'twitter' => null,
        'wordpress' => null,
        'custom' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'apple' => 'apple',
        'dolphin' => 'dolphin',
        'drupal' => 'drupal',
        'facebook' => 'facebook',
        'github' => 'github',
        'github_enterprise' => 'githubEnterprise',
        'gitlab' => 'gitlab',
        'google' => 'google',
        'linkedin' => 'linkedin',
        'meteor' => 'meteor',
        'nextcloud' => 'nextcloud',
        'tokenpass' => 'tokenpass',
        'twitter' => 'twitter',
        'wordpress' => 'wordpress',
        'custom' => 'custom'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'apple' => 'setApple',
        'dolphin' => 'setDolphin',
        'drupal' => 'setDrupal',
        'facebook' => 'setFacebook',
        'github' => 'setGithub',
        'github_enterprise' => 'setGithubEnterprise',
        'gitlab' => 'setGitlab',
        'google' => 'setGoogle',
        'linkedin' => 'setLinkedin',
        'meteor' => 'setMeteor',
        'nextcloud' => 'setNextcloud',
        'tokenpass' => 'setTokenpass',
        'twitter' => 'setTwitter',
        'wordpress' => 'setWordpress',
        'custom' => 'setCustom'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'apple' => 'getApple',
        'dolphin' => 'getDolphin',
        'drupal' => 'getDrupal',
        'facebook' => 'getFacebook',
        'github' => 'getGithub',
        'github_enterprise' => 'getGithubEnterprise',
        'gitlab' => 'getGitlab',
        'google' => 'getGoogle',
        'linkedin' => 'getLinkedin',
        'meteor' => 'getMeteor',
        'nextcloud' => 'getNextcloud',
        'tokenpass' => 'getTokenpass',
        'twitter' => 'getTwitter',
        'wordpress' => 'getWordpress',
        'custom' => 'getCustom'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['apple'] = isset($data['apple']) ? $data['apple'] : null;
        $this->container['dolphin'] = isset($data['dolphin']) ? $data['dolphin'] : null;
        $this->container['drupal'] = isset($data['drupal']) ? $data['drupal'] : null;
        $this->container['facebook'] = isset($data['facebook']) ? $data['facebook'] : null;
        $this->container['github'] = isset($data['github']) ? $data['github'] : null;
        $this->container['github_enterprise'] = isset($data['github_enterprise']) ? $data['github_enterprise'] : null;
        $this->container['gitlab'] = isset($data['gitlab']) ? $data['gitlab'] : null;
        $this->container['google'] = isset($data['google']) ? $data['google'] : null;
        $this->container['linkedin'] = isset($data['linkedin']) ? $data['linkedin'] : null;
        $this->container['meteor'] = isset($data['meteor']) ? $data['meteor'] : null;
        $this->container['nextcloud'] = isset($data['nextcloud']) ? $data['nextcloud'] : null;
        $this->container['tokenpass'] = isset($data['tokenpass']) ? $data['tokenpass'] : null;
        $this->container['twitter'] = isset($data['twitter']) ? $data['twitter'] : null;
        $this->container['wordpress'] = isset($data['wordpress']) ? $data['wordpress'] : null;
        $this->container['custom'] = isset($data['custom']) ? $data['custom'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets apple
     *
     * @return \Swagger\Client\Model\InlineResponse200ServicesOauthApple
     */
    public function getApple()
    {
        return $this->container['apple'];
    }

    /**
     * Sets apple
     *
     * @param \Swagger\Client\Model\InlineResponse200ServicesOauthApple $apple apple
     *
     * @return $this
     */
    public function setApple($apple)
    {
        $this->container['apple'] = $apple;

        return $this;
    }

    /**
     * Gets dolphin
     *
     * @return \Swagger\Client\Model\InlineResponse200ServicesOauthApple
     */
    public function getDolphin()
    {
        return $this->container['dolphin'];
    }

    /**
     * Sets dolphin
     *
     * @param \Swagger\Client\Model\InlineResponse200ServicesOauthApple $dolphin dolphin
     *
     * @return $this
     */
    public function setDolphin($dolphin)
    {
        $this->container['dolphin'] = $dolphin;

        return $this;
    }

    /**
     * Gets drupal
     *
     * @return \Swagger\Client\Model\InlineResponse200ServicesOauthApple
     */
    public function getDrupal()
    {
        return $this->container['drupal'];
    }

    /**
     * Sets drupal
     *
     * @param \Swagger\Client\Model\InlineResponse200ServicesOauthApple $drupal drupal
     *
     * @return $this
     */
    public function setDrupal($drupal)
    {
        $this->container['drupal'] = $drupal;

        return $this;
    }

    /**
     * Gets facebook
     *
     * @return \Swagger\Client\Model\InlineResponse200ServicesOauthApple
     */
    public function getFacebook()
    {
        return $this->container['facebook'];
    }

    /**
     * Sets facebook
     *
     * @param \Swagger\Client\Model\InlineResponse200ServicesOauthApple $facebook facebook
     *
     * @return $this
     */
    public function setFacebook($facebook)
    {
        $this->container['facebook'] = $facebook;

        return $this;
    }

    /**
     * Gets github
     *
     * @return \Swagger\Client\Model\InlineResponse200ServicesOauthApple
     */
    public function getGithub()
    {
        return $this->container['github'];
    }

    /**
     * Sets github
     *
     * @param \Swagger\Client\Model\InlineResponse200ServicesOauthApple $github github
     *
     * @return $this
     */
    public function setGithub($github)
    {
        $this->container['github'] = $github;

        return $this;
    }

    /**
     * Gets github_enterprise
     *
     * @return \Swagger\Client\Model\InlineResponse200ServicesOauthApple
     */
    public function getGithubEnterprise()
    {
        return $this->container['github_enterprise'];
    }

    /**
     * Sets github_enterprise
     *
     * @param \Swagger\Client\Model\InlineResponse200ServicesOauthApple $github_enterprise github_enterprise
     *
     * @return $this
     */
    public function setGithubEnterprise($github_enterprise)
    {
        $this->container['github_enterprise'] = $github_enterprise;

        return $this;
    }

    /**
     * Gets gitlab
     *
     * @return \Swagger\Client\Model\InlineResponse200ServicesOauthApple
     */
    public function getGitlab()
    {
        return $this->container['gitlab'];
    }

    /**
     * Sets gitlab
     *
     * @param \Swagger\Client\Model\InlineResponse200ServicesOauthApple $gitlab gitlab
     *
     * @return $this
     */
    public function setGitlab($gitlab)
    {
        $this->container['gitlab'] = $gitlab;

        return $this;
    }

    /**
     * Gets google
     *
     * @return \Swagger\Client\Model\InlineResponse200ServicesOauthApple
     */
    public function getGoogle()
    {
        return $this->container['google'];
    }

    /**
     * Sets google
     *
     * @param \Swagger\Client\Model\InlineResponse200ServicesOauthApple $google google
     *
     * @return $this
     */
    public function setGoogle($google)
    {
        $this->container['google'] = $google;

        return $this;
    }

    /**
     * Gets linkedin
     *
     * @return \Swagger\Client\Model\InlineResponse200ServicesOauthApple
     */
    public function getLinkedin()
    {
        return $this->container['linkedin'];
    }

    /**
     * Sets linkedin
     *
     * @param \Swagger\Client\Model\InlineResponse200ServicesOauthApple $linkedin linkedin
     *
     * @return $this
     */
    public function setLinkedin($linkedin)
    {
        $this->container['linkedin'] = $linkedin;

        return $this;
    }

    /**
     * Gets meteor
     *
     * @return \Swagger\Client\Model\InlineResponse200ServicesOauthApple
     */
    public function getMeteor()
    {
        return $this->container['meteor'];
    }

    /**
     * Sets meteor
     *
     * @param \Swagger\Client\Model\InlineResponse200ServicesOauthApple $meteor meteor
     *
     * @return $this
     */
    public function setMeteor($meteor)
    {
        $this->container['meteor'] = $meteor;

        return $this;
    }

    /**
     * Gets nextcloud
     *
     * @return \Swagger\Client\Model\InlineResponse200ServicesOauthApple
     */
    public function getNextcloud()
    {
        return $this->container['nextcloud'];
    }

    /**
     * Sets nextcloud
     *
     * @param \Swagger\Client\Model\InlineResponse200ServicesOauthApple $nextcloud nextcloud
     *
     * @return $this
     */
    public function setNextcloud($nextcloud)
    {
        $this->container['nextcloud'] = $nextcloud;

        return $this;
    }

    /**
     * Gets tokenpass
     *
     * @return \Swagger\Client\Model\InlineResponse200ServicesOauthApple
     */
    public function getTokenpass()
    {
        return $this->container['tokenpass'];
    }

    /**
     * Sets tokenpass
     *
     * @param \Swagger\Client\Model\InlineResponse200ServicesOauthApple $tokenpass tokenpass
     *
     * @return $this
     */
    public function setTokenpass($tokenpass)
    {
        $this->container['tokenpass'] = $tokenpass;

        return $this;
    }

    /**
     * Gets twitter
     *
     * @return \Swagger\Client\Model\InlineResponse200ServicesOauthApple
     */
    public function getTwitter()
    {
        return $this->container['twitter'];
    }

    /**
     * Sets twitter
     *
     * @param \Swagger\Client\Model\InlineResponse200ServicesOauthApple $twitter twitter
     *
     * @return $this
     */
    public function setTwitter($twitter)
    {
        $this->container['twitter'] = $twitter;

        return $this;
    }

    /**
     * Gets wordpress
     *
     * @return \Swagger\Client\Model\InlineResponse200ServicesOauthApple
     */
    public function getWordpress()
    {
        return $this->container['wordpress'];
    }

    /**
     * Sets wordpress
     *
     * @param \Swagger\Client\Model\InlineResponse200ServicesOauthApple $wordpress wordpress
     *
     * @return $this
     */
    public function setWordpress($wordpress)
    {
        $this->container['wordpress'] = $wordpress;

        return $this;
    }

    /**
     * Gets custom
     *
     * @return object
     */
    public function getCustom()
    {
        return $this->container['custom'];
    }

    /**
     * Sets custom
     *
     * @param object $custom custom
     *
     * @return $this
     */
    public function setCustom($custom)
    {
        $this->container['custom'] = $custom;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
