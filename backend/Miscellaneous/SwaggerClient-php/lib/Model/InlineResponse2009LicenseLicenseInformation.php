<?php
/**
 * InlineResponse2009LicenseLicenseInformation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Miscellaneous
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.67
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse2009LicenseLicenseInformation Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2009LicenseLicenseInformation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_9_license_license_information';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'auto_renew' => 'bool',
        'created_at' => 'string',
        'visual_expiration' => 'string',
        'notify_admins_at' => 'string',
        'notify_users_at' => 'string',
        'trial' => 'bool',
        'cancellable' => 'bool',
        'offline' => 'bool',
        'granted_by' => 'object',
        'granted_to' => 'object',
        'tags' => '\Swagger\Client\Model\InlineResponse2009LicenseLicenseInformationTags[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'auto_renew' => null,
        'created_at' => null,
        'visual_expiration' => null,
        'notify_admins_at' => null,
        'notify_users_at' => null,
        'trial' => null,
        'cancellable' => null,
        'offline' => null,
        'granted_by' => null,
        'granted_to' => null,
        'tags' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'auto_renew' => 'autoRenew',
        'created_at' => 'createdAt',
        'visual_expiration' => 'visualExpiration',
        'notify_admins_at' => 'notifyAdminsAt',
        'notify_users_at' => 'notifyUsersAt',
        'trial' => 'trial',
        'cancellable' => 'cancellable',
        'offline' => 'offline',
        'granted_by' => 'grantedBy',
        'granted_to' => 'grantedTo',
        'tags' => 'tags'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'auto_renew' => 'setAutoRenew',
        'created_at' => 'setCreatedAt',
        'visual_expiration' => 'setVisualExpiration',
        'notify_admins_at' => 'setNotifyAdminsAt',
        'notify_users_at' => 'setNotifyUsersAt',
        'trial' => 'setTrial',
        'cancellable' => 'setCancellable',
        'offline' => 'setOffline',
        'granted_by' => 'setGrantedBy',
        'granted_to' => 'setGrantedTo',
        'tags' => 'setTags'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'auto_renew' => 'getAutoRenew',
        'created_at' => 'getCreatedAt',
        'visual_expiration' => 'getVisualExpiration',
        'notify_admins_at' => 'getNotifyAdminsAt',
        'notify_users_at' => 'getNotifyUsersAt',
        'trial' => 'getTrial',
        'cancellable' => 'getCancellable',
        'offline' => 'getOffline',
        'granted_by' => 'getGrantedBy',
        'granted_to' => 'getGrantedTo',
        'tags' => 'getTags'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['auto_renew'] = isset($data['auto_renew']) ? $data['auto_renew'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['visual_expiration'] = isset($data['visual_expiration']) ? $data['visual_expiration'] : null;
        $this->container['notify_admins_at'] = isset($data['notify_admins_at']) ? $data['notify_admins_at'] : null;
        $this->container['notify_users_at'] = isset($data['notify_users_at']) ? $data['notify_users_at'] : null;
        $this->container['trial'] = isset($data['trial']) ? $data['trial'] : null;
        $this->container['cancellable'] = isset($data['cancellable']) ? $data['cancellable'] : null;
        $this->container['offline'] = isset($data['offline']) ? $data['offline'] : null;
        $this->container['granted_by'] = isset($data['granted_by']) ? $data['granted_by'] : null;
        $this->container['granted_to'] = isset($data['granted_to']) ? $data['granted_to'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets auto_renew
     *
     * @return bool
     */
    public function getAutoRenew()
    {
        return $this->container['auto_renew'];
    }

    /**
     * Sets auto_renew
     *
     * @param bool $auto_renew auto_renew
     *
     * @return $this
     */
    public function setAutoRenew($auto_renew)
    {
        $this->container['auto_renew'] = $auto_renew;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets visual_expiration
     *
     * @return string
     */
    public function getVisualExpiration()
    {
        return $this->container['visual_expiration'];
    }

    /**
     * Sets visual_expiration
     *
     * @param string $visual_expiration visual_expiration
     *
     * @return $this
     */
    public function setVisualExpiration($visual_expiration)
    {
        $this->container['visual_expiration'] = $visual_expiration;

        return $this;
    }

    /**
     * Gets notify_admins_at
     *
     * @return string
     */
    public function getNotifyAdminsAt()
    {
        return $this->container['notify_admins_at'];
    }

    /**
     * Sets notify_admins_at
     *
     * @param string $notify_admins_at notify_admins_at
     *
     * @return $this
     */
    public function setNotifyAdminsAt($notify_admins_at)
    {
        $this->container['notify_admins_at'] = $notify_admins_at;

        return $this;
    }

    /**
     * Gets notify_users_at
     *
     * @return string
     */
    public function getNotifyUsersAt()
    {
        return $this->container['notify_users_at'];
    }

    /**
     * Sets notify_users_at
     *
     * @param string $notify_users_at notify_users_at
     *
     * @return $this
     */
    public function setNotifyUsersAt($notify_users_at)
    {
        $this->container['notify_users_at'] = $notify_users_at;

        return $this;
    }

    /**
     * Gets trial
     *
     * @return bool
     */
    public function getTrial()
    {
        return $this->container['trial'];
    }

    /**
     * Sets trial
     *
     * @param bool $trial trial
     *
     * @return $this
     */
    public function setTrial($trial)
    {
        $this->container['trial'] = $trial;

        return $this;
    }

    /**
     * Gets cancellable
     *
     * @return bool
     */
    public function getCancellable()
    {
        return $this->container['cancellable'];
    }

    /**
     * Sets cancellable
     *
     * @param bool $cancellable cancellable
     *
     * @return $this
     */
    public function setCancellable($cancellable)
    {
        $this->container['cancellable'] = $cancellable;

        return $this;
    }

    /**
     * Gets offline
     *
     * @return bool
     */
    public function getOffline()
    {
        return $this->container['offline'];
    }

    /**
     * Sets offline
     *
     * @param bool $offline offline
     *
     * @return $this
     */
    public function setOffline($offline)
    {
        $this->container['offline'] = $offline;

        return $this;
    }

    /**
     * Gets granted_by
     *
     * @return object
     */
    public function getGrantedBy()
    {
        return $this->container['granted_by'];
    }

    /**
     * Sets granted_by
     *
     * @param object $granted_by granted_by
     *
     * @return $this
     */
    public function setGrantedBy($granted_by)
    {
        $this->container['granted_by'] = $granted_by;

        return $this;
    }

    /**
     * Gets granted_to
     *
     * @return object
     */
    public function getGrantedTo()
    {
        return $this->container['granted_to'];
    }

    /**
     * Sets granted_to
     *
     * @param object $granted_to granted_to
     *
     * @return $this
     */
    public function setGrantedTo($granted_to)
    {
        $this->container['granted_to'] = $granted_to;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Swagger\Client\Model\InlineResponse2009LicenseLicenseInformationTags[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Swagger\Client\Model\InlineResponse2009LicenseLicenseInformationTags[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
