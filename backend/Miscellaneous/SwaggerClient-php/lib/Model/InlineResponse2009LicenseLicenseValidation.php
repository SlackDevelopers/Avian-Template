<?php
/**
 * InlineResponse2009LicenseLicenseValidation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Miscellaneous
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.67
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse2009LicenseLicenseValidation Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2009LicenseLicenseValidation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_9_license_license_validation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'server_urls' => '\Swagger\Client\Model\InlineResponse2009LicenseLicenseValidationServerUrls[]',
        'cloud_workspace_id' => 'string',
        'server_unique_id' => 'string',
        'valid_periods' => '\Swagger\Client\Model\InlineResponse2009LicenseLicenseValidationValidPeriods[]',
        'legal_text_agreement' => '\Swagger\Client\Model\InlineResponse2009LicenseLicenseValidationLegalTextAgreement',
        'statistics_report' => '\Swagger\Client\Model\InlineResponse2009LicenseLicenseValidationStatisticsReport'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'server_urls' => null,
        'cloud_workspace_id' => null,
        'server_unique_id' => null,
        'valid_periods' => null,
        'legal_text_agreement' => null,
        'statistics_report' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'server_urls' => 'serverUrls',
        'cloud_workspace_id' => 'cloudWorkspaceId',
        'server_unique_id' => 'serverUniqueId',
        'valid_periods' => 'validPeriods',
        'legal_text_agreement' => 'legalTextAgreement',
        'statistics_report' => 'statisticsReport'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'server_urls' => 'setServerUrls',
        'cloud_workspace_id' => 'setCloudWorkspaceId',
        'server_unique_id' => 'setServerUniqueId',
        'valid_periods' => 'setValidPeriods',
        'legal_text_agreement' => 'setLegalTextAgreement',
        'statistics_report' => 'setStatisticsReport'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'server_urls' => 'getServerUrls',
        'cloud_workspace_id' => 'getCloudWorkspaceId',
        'server_unique_id' => 'getServerUniqueId',
        'valid_periods' => 'getValidPeriods',
        'legal_text_agreement' => 'getLegalTextAgreement',
        'statistics_report' => 'getStatisticsReport'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['server_urls'] = isset($data['server_urls']) ? $data['server_urls'] : null;
        $this->container['cloud_workspace_id'] = isset($data['cloud_workspace_id']) ? $data['cloud_workspace_id'] : null;
        $this->container['server_unique_id'] = isset($data['server_unique_id']) ? $data['server_unique_id'] : null;
        $this->container['valid_periods'] = isset($data['valid_periods']) ? $data['valid_periods'] : null;
        $this->container['legal_text_agreement'] = isset($data['legal_text_agreement']) ? $data['legal_text_agreement'] : null;
        $this->container['statistics_report'] = isset($data['statistics_report']) ? $data['statistics_report'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets server_urls
     *
     * @return \Swagger\Client\Model\InlineResponse2009LicenseLicenseValidationServerUrls[]
     */
    public function getServerUrls()
    {
        return $this->container['server_urls'];
    }

    /**
     * Sets server_urls
     *
     * @param \Swagger\Client\Model\InlineResponse2009LicenseLicenseValidationServerUrls[] $server_urls server_urls
     *
     * @return $this
     */
    public function setServerUrls($server_urls)
    {
        $this->container['server_urls'] = $server_urls;

        return $this;
    }

    /**
     * Gets cloud_workspace_id
     *
     * @return string
     */
    public function getCloudWorkspaceId()
    {
        return $this->container['cloud_workspace_id'];
    }

    /**
     * Sets cloud_workspace_id
     *
     * @param string $cloud_workspace_id cloud_workspace_id
     *
     * @return $this
     */
    public function setCloudWorkspaceId($cloud_workspace_id)
    {
        $this->container['cloud_workspace_id'] = $cloud_workspace_id;

        return $this;
    }

    /**
     * Gets server_unique_id
     *
     * @return string
     */
    public function getServerUniqueId()
    {
        return $this->container['server_unique_id'];
    }

    /**
     * Sets server_unique_id
     *
     * @param string $server_unique_id server_unique_id
     *
     * @return $this
     */
    public function setServerUniqueId($server_unique_id)
    {
        $this->container['server_unique_id'] = $server_unique_id;

        return $this;
    }

    /**
     * Gets valid_periods
     *
     * @return \Swagger\Client\Model\InlineResponse2009LicenseLicenseValidationValidPeriods[]
     */
    public function getValidPeriods()
    {
        return $this->container['valid_periods'];
    }

    /**
     * Sets valid_periods
     *
     * @param \Swagger\Client\Model\InlineResponse2009LicenseLicenseValidationValidPeriods[] $valid_periods valid_periods
     *
     * @return $this
     */
    public function setValidPeriods($valid_periods)
    {
        $this->container['valid_periods'] = $valid_periods;

        return $this;
    }

    /**
     * Gets legal_text_agreement
     *
     * @return \Swagger\Client\Model\InlineResponse2009LicenseLicenseValidationLegalTextAgreement
     */
    public function getLegalTextAgreement()
    {
        return $this->container['legal_text_agreement'];
    }

    /**
     * Sets legal_text_agreement
     *
     * @param \Swagger\Client\Model\InlineResponse2009LicenseLicenseValidationLegalTextAgreement $legal_text_agreement legal_text_agreement
     *
     * @return $this
     */
    public function setLegalTextAgreement($legal_text_agreement)
    {
        $this->container['legal_text_agreement'] = $legal_text_agreement;

        return $this;
    }

    /**
     * Gets statistics_report
     *
     * @return \Swagger\Client\Model\InlineResponse2009LicenseLicenseValidationStatisticsReport
     */
    public function getStatisticsReport()
    {
        return $this->container['statistics_report'];
    }

    /**
     * Sets statistics_report
     *
     * @param \Swagger\Client\Model\InlineResponse2009LicenseLicenseValidationStatisticsReport $statistics_report statistics_report
     *
     * @return $this
     */
    public function setStatisticsReport($statistics_report)
    {
        $this->container['statistics_report'] = $statistics_report;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
