<?php
/**
 * InlineResponse2009License
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Miscellaneous
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.67
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse2009License Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2009License implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_9_license';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'license' => '\Swagger\Client\Model\InlineResponse2009LicenseLicense',
        'active_modules' => 'string[]',
        'prevented_actions' => '\Swagger\Client\Model\InlineResponse2009LicensePreventedActions',
        'limits' => '\Swagger\Client\Model\InlineResponse2009LicenseLimits',
        'tags' => '\Swagger\Client\Model\InlineResponse2009LicenseLicenseInformationTags[]',
        'trial' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'license' => null,
        'active_modules' => null,
        'prevented_actions' => null,
        'limits' => null,
        'tags' => null,
        'trial' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'license' => 'license',
        'active_modules' => 'activeModules',
        'prevented_actions' => 'preventedActions',
        'limits' => 'limits',
        'tags' => 'tags',
        'trial' => 'trial'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'license' => 'setLicense',
        'active_modules' => 'setActiveModules',
        'prevented_actions' => 'setPreventedActions',
        'limits' => 'setLimits',
        'tags' => 'setTags',
        'trial' => 'setTrial'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'license' => 'getLicense',
        'active_modules' => 'getActiveModules',
        'prevented_actions' => 'getPreventedActions',
        'limits' => 'getLimits',
        'tags' => 'getTags',
        'trial' => 'getTrial'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['license'] = isset($data['license']) ? $data['license'] : null;
        $this->container['active_modules'] = isset($data['active_modules']) ? $data['active_modules'] : null;
        $this->container['prevented_actions'] = isset($data['prevented_actions']) ? $data['prevented_actions'] : null;
        $this->container['limits'] = isset($data['limits']) ? $data['limits'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['trial'] = isset($data['trial']) ? $data['trial'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets license
     *
     * @return \Swagger\Client\Model\InlineResponse2009LicenseLicense
     */
    public function getLicense()
    {
        return $this->container['license'];
    }

    /**
     * Sets license
     *
     * @param \Swagger\Client\Model\InlineResponse2009LicenseLicense $license license
     *
     * @return $this
     */
    public function setLicense($license)
    {
        $this->container['license'] = $license;

        return $this;
    }

    /**
     * Gets active_modules
     *
     * @return string[]
     */
    public function getActiveModules()
    {
        return $this->container['active_modules'];
    }

    /**
     * Sets active_modules
     *
     * @param string[] $active_modules active_modules
     *
     * @return $this
     */
    public function setActiveModules($active_modules)
    {
        $this->container['active_modules'] = $active_modules;

        return $this;
    }

    /**
     * Gets prevented_actions
     *
     * @return \Swagger\Client\Model\InlineResponse2009LicensePreventedActions
     */
    public function getPreventedActions()
    {
        return $this->container['prevented_actions'];
    }

    /**
     * Sets prevented_actions
     *
     * @param \Swagger\Client\Model\InlineResponse2009LicensePreventedActions $prevented_actions prevented_actions
     *
     * @return $this
     */
    public function setPreventedActions($prevented_actions)
    {
        $this->container['prevented_actions'] = $prevented_actions;

        return $this;
    }

    /**
     * Gets limits
     *
     * @return \Swagger\Client\Model\InlineResponse2009LicenseLimits
     */
    public function getLimits()
    {
        return $this->container['limits'];
    }

    /**
     * Sets limits
     *
     * @param \Swagger\Client\Model\InlineResponse2009LicenseLimits $limits limits
     *
     * @return $this
     */
    public function setLimits($limits)
    {
        $this->container['limits'] = $limits;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Swagger\Client\Model\InlineResponse2009LicenseLicenseInformationTags[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Swagger\Client\Model\InlineResponse2009LicenseLicenseInformationTags[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets trial
     *
     * @return bool
     */
    public function getTrial()
    {
        return $this->container['trial'];
    }

    /**
     * Sets trial
     *
     * @param bool $trial trial
     *
     * @return $this
     */
    public function setTrial($trial)
    {
        $this->container['trial'] = $trial;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
