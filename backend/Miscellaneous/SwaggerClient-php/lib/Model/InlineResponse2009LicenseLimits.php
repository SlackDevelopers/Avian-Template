<?php
/**
 * InlineResponse2009LicenseLimits
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Miscellaneous
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.67
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse2009LicenseLimits Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2009LicenseLimits implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_9_license_limits';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'active_users' => '\Swagger\Client\Model\InlineResponse2009LicenseLimitsActiveUsers',
        'guest_users' => '\Swagger\Client\Model\InlineResponse2009LicenseLimitsActiveUsers',
        'private_apps' => '\Swagger\Client\Model\InlineResponse2009LicenseLimitsActiveUsers',
        'marketplace_apps' => '\Swagger\Client\Model\InlineResponse2009LicenseLimitsActiveUsers',
        'monthly_active_contacts' => '\Swagger\Client\Model\InlineResponse2009LicenseLimitsActiveUsers'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'active_users' => null,
        'guest_users' => null,
        'private_apps' => null,
        'marketplace_apps' => null,
        'monthly_active_contacts' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active_users' => 'activeUsers',
        'guest_users' => 'guestUsers',
        'private_apps' => 'privateApps',
        'marketplace_apps' => 'marketplaceApps',
        'monthly_active_contacts' => 'monthlyActiveContacts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active_users' => 'setActiveUsers',
        'guest_users' => 'setGuestUsers',
        'private_apps' => 'setPrivateApps',
        'marketplace_apps' => 'setMarketplaceApps',
        'monthly_active_contacts' => 'setMonthlyActiveContacts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active_users' => 'getActiveUsers',
        'guest_users' => 'getGuestUsers',
        'private_apps' => 'getPrivateApps',
        'marketplace_apps' => 'getMarketplaceApps',
        'monthly_active_contacts' => 'getMonthlyActiveContacts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['active_users'] = isset($data['active_users']) ? $data['active_users'] : null;
        $this->container['guest_users'] = isset($data['guest_users']) ? $data['guest_users'] : null;
        $this->container['private_apps'] = isset($data['private_apps']) ? $data['private_apps'] : null;
        $this->container['marketplace_apps'] = isset($data['marketplace_apps']) ? $data['marketplace_apps'] : null;
        $this->container['monthly_active_contacts'] = isset($data['monthly_active_contacts']) ? $data['monthly_active_contacts'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets active_users
     *
     * @return \Swagger\Client\Model\InlineResponse2009LicenseLimitsActiveUsers
     */
    public function getActiveUsers()
    {
        return $this->container['active_users'];
    }

    /**
     * Sets active_users
     *
     * @param \Swagger\Client\Model\InlineResponse2009LicenseLimitsActiveUsers $active_users active_users
     *
     * @return $this
     */
    public function setActiveUsers($active_users)
    {
        $this->container['active_users'] = $active_users;

        return $this;
    }

    /**
     * Gets guest_users
     *
     * @return \Swagger\Client\Model\InlineResponse2009LicenseLimitsActiveUsers
     */
    public function getGuestUsers()
    {
        return $this->container['guest_users'];
    }

    /**
     * Sets guest_users
     *
     * @param \Swagger\Client\Model\InlineResponse2009LicenseLimitsActiveUsers $guest_users guest_users
     *
     * @return $this
     */
    public function setGuestUsers($guest_users)
    {
        $this->container['guest_users'] = $guest_users;

        return $this;
    }

    /**
     * Gets private_apps
     *
     * @return \Swagger\Client\Model\InlineResponse2009LicenseLimitsActiveUsers
     */
    public function getPrivateApps()
    {
        return $this->container['private_apps'];
    }

    /**
     * Sets private_apps
     *
     * @param \Swagger\Client\Model\InlineResponse2009LicenseLimitsActiveUsers $private_apps private_apps
     *
     * @return $this
     */
    public function setPrivateApps($private_apps)
    {
        $this->container['private_apps'] = $private_apps;

        return $this;
    }

    /**
     * Gets marketplace_apps
     *
     * @return \Swagger\Client\Model\InlineResponse2009LicenseLimitsActiveUsers
     */
    public function getMarketplaceApps()
    {
        return $this->container['marketplace_apps'];
    }

    /**
     * Sets marketplace_apps
     *
     * @param \Swagger\Client\Model\InlineResponse2009LicenseLimitsActiveUsers $marketplace_apps marketplace_apps
     *
     * @return $this
     */
    public function setMarketplaceApps($marketplace_apps)
    {
        $this->container['marketplace_apps'] = $marketplace_apps;

        return $this;
    }

    /**
     * Gets monthly_active_contacts
     *
     * @return \Swagger\Client\Model\InlineResponse2009LicenseLimitsActiveUsers
     */
    public function getMonthlyActiveContacts()
    {
        return $this->container['monthly_active_contacts'];
    }

    /**
     * Sets monthly_active_contacts
     *
     * @param \Swagger\Client\Model\InlineResponse2009LicenseLimitsActiveUsers $monthly_active_contacts monthly_active_contacts
     *
     * @return $this
     */
    public function setMonthlyActiveContacts($monthly_active_contacts)
    {
        $this->container['monthly_active_contacts'] = $monthly_active_contacts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
