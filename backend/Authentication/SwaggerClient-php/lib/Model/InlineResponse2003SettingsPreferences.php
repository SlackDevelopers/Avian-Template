<?php
/**
 * InlineResponse2003SettingsPreferences
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Authentication
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.67
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse2003SettingsPreferences Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2003SettingsPreferences implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_3_settings_preferences';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'enable_auto_away' => 'bool',
        'idle_timeout_limit' => 'int',
        'desktop_notification_duration' => 'int',
        'audio_notifications' => 'string',
        'desktop_notifications' => 'string',
        'mobile_notifications' => 'string',
        'unread_alert' => 'bool',
        'use_emojis' => 'bool',
        'convert_ascii_emoji' => 'bool',
        'auto_image_load' => 'bool',
        'save_mobile_bandwidth' => 'bool',
        'collapse_media_by_default' => 'bool',
        'hide_usernames' => 'bool',
        'hide_roles' => 'bool',
        'hide_flex_tab' => 'bool',
        'hide_avatars' => 'bool',
        'rooms_list_exhibition_mode' => 'string',
        'sidebar_view_mode' => 'string',
        'sidebar_hide_avatar' => 'bool',
        'sidebar_show_unread' => 'bool',
        'sidebar_show_favorites' => 'bool',
        'send_on_enter' => 'string',
        'message_view_mode' => 'int',
        'email_notification_mode' => 'string',
        'room_counter_sidebar' => 'bool',
        'new_room_notification' => 'string',
        'new_message_notification' => 'string',
        'mute_focused_conversations' => 'bool',
        'notifications_sound_volume' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'enable_auto_away' => null,
        'idle_timeout_limit' => null,
        'desktop_notification_duration' => null,
        'audio_notifications' => null,
        'desktop_notifications' => null,
        'mobile_notifications' => null,
        'unread_alert' => null,
        'use_emojis' => null,
        'convert_ascii_emoji' => null,
        'auto_image_load' => null,
        'save_mobile_bandwidth' => null,
        'collapse_media_by_default' => null,
        'hide_usernames' => null,
        'hide_roles' => null,
        'hide_flex_tab' => null,
        'hide_avatars' => null,
        'rooms_list_exhibition_mode' => null,
        'sidebar_view_mode' => null,
        'sidebar_hide_avatar' => null,
        'sidebar_show_unread' => null,
        'sidebar_show_favorites' => null,
        'send_on_enter' => null,
        'message_view_mode' => null,
        'email_notification_mode' => null,
        'room_counter_sidebar' => null,
        'new_room_notification' => null,
        'new_message_notification' => null,
        'mute_focused_conversations' => null,
        'notifications_sound_volume' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enable_auto_away' => 'enableAutoAway',
        'idle_timeout_limit' => 'idleTimeoutLimit',
        'desktop_notification_duration' => 'desktopNotificationDuration',
        'audio_notifications' => 'audioNotifications',
        'desktop_notifications' => 'desktopNotifications',
        'mobile_notifications' => 'mobileNotifications',
        'unread_alert' => 'unreadAlert',
        'use_emojis' => 'useEmojis',
        'convert_ascii_emoji' => 'convertAsciiEmoji',
        'auto_image_load' => 'autoImageLoad',
        'save_mobile_bandwidth' => 'saveMobileBandwidth',
        'collapse_media_by_default' => 'collapseMediaByDefault',
        'hide_usernames' => 'hideUsernames',
        'hide_roles' => 'hideRoles',
        'hide_flex_tab' => 'hideFlexTab',
        'hide_avatars' => 'hideAvatars',
        'rooms_list_exhibition_mode' => 'roomsListExhibitionMode',
        'sidebar_view_mode' => 'sidebarViewMode',
        'sidebar_hide_avatar' => 'sidebarHideAvatar',
        'sidebar_show_unread' => 'sidebarShowUnread',
        'sidebar_show_favorites' => 'sidebarShowFavorites',
        'send_on_enter' => 'sendOnEnter',
        'message_view_mode' => 'messageViewMode',
        'email_notification_mode' => 'emailNotificationMode',
        'room_counter_sidebar' => 'roomCounterSidebar',
        'new_room_notification' => 'newRoomNotification',
        'new_message_notification' => 'newMessageNotification',
        'mute_focused_conversations' => 'muteFocusedConversations',
        'notifications_sound_volume' => 'notificationsSoundVolume'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enable_auto_away' => 'setEnableAutoAway',
        'idle_timeout_limit' => 'setIdleTimeoutLimit',
        'desktop_notification_duration' => 'setDesktopNotificationDuration',
        'audio_notifications' => 'setAudioNotifications',
        'desktop_notifications' => 'setDesktopNotifications',
        'mobile_notifications' => 'setMobileNotifications',
        'unread_alert' => 'setUnreadAlert',
        'use_emojis' => 'setUseEmojis',
        'convert_ascii_emoji' => 'setConvertAsciiEmoji',
        'auto_image_load' => 'setAutoImageLoad',
        'save_mobile_bandwidth' => 'setSaveMobileBandwidth',
        'collapse_media_by_default' => 'setCollapseMediaByDefault',
        'hide_usernames' => 'setHideUsernames',
        'hide_roles' => 'setHideRoles',
        'hide_flex_tab' => 'setHideFlexTab',
        'hide_avatars' => 'setHideAvatars',
        'rooms_list_exhibition_mode' => 'setRoomsListExhibitionMode',
        'sidebar_view_mode' => 'setSidebarViewMode',
        'sidebar_hide_avatar' => 'setSidebarHideAvatar',
        'sidebar_show_unread' => 'setSidebarShowUnread',
        'sidebar_show_favorites' => 'setSidebarShowFavorites',
        'send_on_enter' => 'setSendOnEnter',
        'message_view_mode' => 'setMessageViewMode',
        'email_notification_mode' => 'setEmailNotificationMode',
        'room_counter_sidebar' => 'setRoomCounterSidebar',
        'new_room_notification' => 'setNewRoomNotification',
        'new_message_notification' => 'setNewMessageNotification',
        'mute_focused_conversations' => 'setMuteFocusedConversations',
        'notifications_sound_volume' => 'setNotificationsSoundVolume'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enable_auto_away' => 'getEnableAutoAway',
        'idle_timeout_limit' => 'getIdleTimeoutLimit',
        'desktop_notification_duration' => 'getDesktopNotificationDuration',
        'audio_notifications' => 'getAudioNotifications',
        'desktop_notifications' => 'getDesktopNotifications',
        'mobile_notifications' => 'getMobileNotifications',
        'unread_alert' => 'getUnreadAlert',
        'use_emojis' => 'getUseEmojis',
        'convert_ascii_emoji' => 'getConvertAsciiEmoji',
        'auto_image_load' => 'getAutoImageLoad',
        'save_mobile_bandwidth' => 'getSaveMobileBandwidth',
        'collapse_media_by_default' => 'getCollapseMediaByDefault',
        'hide_usernames' => 'getHideUsernames',
        'hide_roles' => 'getHideRoles',
        'hide_flex_tab' => 'getHideFlexTab',
        'hide_avatars' => 'getHideAvatars',
        'rooms_list_exhibition_mode' => 'getRoomsListExhibitionMode',
        'sidebar_view_mode' => 'getSidebarViewMode',
        'sidebar_hide_avatar' => 'getSidebarHideAvatar',
        'sidebar_show_unread' => 'getSidebarShowUnread',
        'sidebar_show_favorites' => 'getSidebarShowFavorites',
        'send_on_enter' => 'getSendOnEnter',
        'message_view_mode' => 'getMessageViewMode',
        'email_notification_mode' => 'getEmailNotificationMode',
        'room_counter_sidebar' => 'getRoomCounterSidebar',
        'new_room_notification' => 'getNewRoomNotification',
        'new_message_notification' => 'getNewMessageNotification',
        'mute_focused_conversations' => 'getMuteFocusedConversations',
        'notifications_sound_volume' => 'getNotificationsSoundVolume'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['enable_auto_away'] = isset($data['enable_auto_away']) ? $data['enable_auto_away'] : null;
        $this->container['idle_timeout_limit'] = isset($data['idle_timeout_limit']) ? $data['idle_timeout_limit'] : null;
        $this->container['desktop_notification_duration'] = isset($data['desktop_notification_duration']) ? $data['desktop_notification_duration'] : null;
        $this->container['audio_notifications'] = isset($data['audio_notifications']) ? $data['audio_notifications'] : null;
        $this->container['desktop_notifications'] = isset($data['desktop_notifications']) ? $data['desktop_notifications'] : null;
        $this->container['mobile_notifications'] = isset($data['mobile_notifications']) ? $data['mobile_notifications'] : null;
        $this->container['unread_alert'] = isset($data['unread_alert']) ? $data['unread_alert'] : null;
        $this->container['use_emojis'] = isset($data['use_emojis']) ? $data['use_emojis'] : null;
        $this->container['convert_ascii_emoji'] = isset($data['convert_ascii_emoji']) ? $data['convert_ascii_emoji'] : null;
        $this->container['auto_image_load'] = isset($data['auto_image_load']) ? $data['auto_image_load'] : null;
        $this->container['save_mobile_bandwidth'] = isset($data['save_mobile_bandwidth']) ? $data['save_mobile_bandwidth'] : null;
        $this->container['collapse_media_by_default'] = isset($data['collapse_media_by_default']) ? $data['collapse_media_by_default'] : null;
        $this->container['hide_usernames'] = isset($data['hide_usernames']) ? $data['hide_usernames'] : null;
        $this->container['hide_roles'] = isset($data['hide_roles']) ? $data['hide_roles'] : null;
        $this->container['hide_flex_tab'] = isset($data['hide_flex_tab']) ? $data['hide_flex_tab'] : null;
        $this->container['hide_avatars'] = isset($data['hide_avatars']) ? $data['hide_avatars'] : null;
        $this->container['rooms_list_exhibition_mode'] = isset($data['rooms_list_exhibition_mode']) ? $data['rooms_list_exhibition_mode'] : null;
        $this->container['sidebar_view_mode'] = isset($data['sidebar_view_mode']) ? $data['sidebar_view_mode'] : null;
        $this->container['sidebar_hide_avatar'] = isset($data['sidebar_hide_avatar']) ? $data['sidebar_hide_avatar'] : null;
        $this->container['sidebar_show_unread'] = isset($data['sidebar_show_unread']) ? $data['sidebar_show_unread'] : null;
        $this->container['sidebar_show_favorites'] = isset($data['sidebar_show_favorites']) ? $data['sidebar_show_favorites'] : null;
        $this->container['send_on_enter'] = isset($data['send_on_enter']) ? $data['send_on_enter'] : null;
        $this->container['message_view_mode'] = isset($data['message_view_mode']) ? $data['message_view_mode'] : null;
        $this->container['email_notification_mode'] = isset($data['email_notification_mode']) ? $data['email_notification_mode'] : null;
        $this->container['room_counter_sidebar'] = isset($data['room_counter_sidebar']) ? $data['room_counter_sidebar'] : null;
        $this->container['new_room_notification'] = isset($data['new_room_notification']) ? $data['new_room_notification'] : null;
        $this->container['new_message_notification'] = isset($data['new_message_notification']) ? $data['new_message_notification'] : null;
        $this->container['mute_focused_conversations'] = isset($data['mute_focused_conversations']) ? $data['mute_focused_conversations'] : null;
        $this->container['notifications_sound_volume'] = isset($data['notifications_sound_volume']) ? $data['notifications_sound_volume'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets enable_auto_away
     *
     * @return bool
     */
    public function getEnableAutoAway()
    {
        return $this->container['enable_auto_away'];
    }

    /**
     * Sets enable_auto_away
     *
     * @param bool $enable_auto_away enable_auto_away
     *
     * @return $this
     */
    public function setEnableAutoAway($enable_auto_away)
    {
        $this->container['enable_auto_away'] = $enable_auto_away;

        return $this;
    }

    /**
     * Gets idle_timeout_limit
     *
     * @return int
     */
    public function getIdleTimeoutLimit()
    {
        return $this->container['idle_timeout_limit'];
    }

    /**
     * Sets idle_timeout_limit
     *
     * @param int $idle_timeout_limit idle_timeout_limit
     *
     * @return $this
     */
    public function setIdleTimeoutLimit($idle_timeout_limit)
    {
        $this->container['idle_timeout_limit'] = $idle_timeout_limit;

        return $this;
    }

    /**
     * Gets desktop_notification_duration
     *
     * @return int
     */
    public function getDesktopNotificationDuration()
    {
        return $this->container['desktop_notification_duration'];
    }

    /**
     * Sets desktop_notification_duration
     *
     * @param int $desktop_notification_duration desktop_notification_duration
     *
     * @return $this
     */
    public function setDesktopNotificationDuration($desktop_notification_duration)
    {
        $this->container['desktop_notification_duration'] = $desktop_notification_duration;

        return $this;
    }

    /**
     * Gets audio_notifications
     *
     * @return string
     */
    public function getAudioNotifications()
    {
        return $this->container['audio_notifications'];
    }

    /**
     * Sets audio_notifications
     *
     * @param string $audio_notifications audio_notifications
     *
     * @return $this
     */
    public function setAudioNotifications($audio_notifications)
    {
        $this->container['audio_notifications'] = $audio_notifications;

        return $this;
    }

    /**
     * Gets desktop_notifications
     *
     * @return string
     */
    public function getDesktopNotifications()
    {
        return $this->container['desktop_notifications'];
    }

    /**
     * Sets desktop_notifications
     *
     * @param string $desktop_notifications desktop_notifications
     *
     * @return $this
     */
    public function setDesktopNotifications($desktop_notifications)
    {
        $this->container['desktop_notifications'] = $desktop_notifications;

        return $this;
    }

    /**
     * Gets mobile_notifications
     *
     * @return string
     */
    public function getMobileNotifications()
    {
        return $this->container['mobile_notifications'];
    }

    /**
     * Sets mobile_notifications
     *
     * @param string $mobile_notifications mobile_notifications
     *
     * @return $this
     */
    public function setMobileNotifications($mobile_notifications)
    {
        $this->container['mobile_notifications'] = $mobile_notifications;

        return $this;
    }

    /**
     * Gets unread_alert
     *
     * @return bool
     */
    public function getUnreadAlert()
    {
        return $this->container['unread_alert'];
    }

    /**
     * Sets unread_alert
     *
     * @param bool $unread_alert unread_alert
     *
     * @return $this
     */
    public function setUnreadAlert($unread_alert)
    {
        $this->container['unread_alert'] = $unread_alert;

        return $this;
    }

    /**
     * Gets use_emojis
     *
     * @return bool
     */
    public function getUseEmojis()
    {
        return $this->container['use_emojis'];
    }

    /**
     * Sets use_emojis
     *
     * @param bool $use_emojis use_emojis
     *
     * @return $this
     */
    public function setUseEmojis($use_emojis)
    {
        $this->container['use_emojis'] = $use_emojis;

        return $this;
    }

    /**
     * Gets convert_ascii_emoji
     *
     * @return bool
     */
    public function getConvertAsciiEmoji()
    {
        return $this->container['convert_ascii_emoji'];
    }

    /**
     * Sets convert_ascii_emoji
     *
     * @param bool $convert_ascii_emoji convert_ascii_emoji
     *
     * @return $this
     */
    public function setConvertAsciiEmoji($convert_ascii_emoji)
    {
        $this->container['convert_ascii_emoji'] = $convert_ascii_emoji;

        return $this;
    }

    /**
     * Gets auto_image_load
     *
     * @return bool
     */
    public function getAutoImageLoad()
    {
        return $this->container['auto_image_load'];
    }

    /**
     * Sets auto_image_load
     *
     * @param bool $auto_image_load auto_image_load
     *
     * @return $this
     */
    public function setAutoImageLoad($auto_image_load)
    {
        $this->container['auto_image_load'] = $auto_image_load;

        return $this;
    }

    /**
     * Gets save_mobile_bandwidth
     *
     * @return bool
     */
    public function getSaveMobileBandwidth()
    {
        return $this->container['save_mobile_bandwidth'];
    }

    /**
     * Sets save_mobile_bandwidth
     *
     * @param bool $save_mobile_bandwidth save_mobile_bandwidth
     *
     * @return $this
     */
    public function setSaveMobileBandwidth($save_mobile_bandwidth)
    {
        $this->container['save_mobile_bandwidth'] = $save_mobile_bandwidth;

        return $this;
    }

    /**
     * Gets collapse_media_by_default
     *
     * @return bool
     */
    public function getCollapseMediaByDefault()
    {
        return $this->container['collapse_media_by_default'];
    }

    /**
     * Sets collapse_media_by_default
     *
     * @param bool $collapse_media_by_default collapse_media_by_default
     *
     * @return $this
     */
    public function setCollapseMediaByDefault($collapse_media_by_default)
    {
        $this->container['collapse_media_by_default'] = $collapse_media_by_default;

        return $this;
    }

    /**
     * Gets hide_usernames
     *
     * @return bool
     */
    public function getHideUsernames()
    {
        return $this->container['hide_usernames'];
    }

    /**
     * Sets hide_usernames
     *
     * @param bool $hide_usernames hide_usernames
     *
     * @return $this
     */
    public function setHideUsernames($hide_usernames)
    {
        $this->container['hide_usernames'] = $hide_usernames;

        return $this;
    }

    /**
     * Gets hide_roles
     *
     * @return bool
     */
    public function getHideRoles()
    {
        return $this->container['hide_roles'];
    }

    /**
     * Sets hide_roles
     *
     * @param bool $hide_roles hide_roles
     *
     * @return $this
     */
    public function setHideRoles($hide_roles)
    {
        $this->container['hide_roles'] = $hide_roles;

        return $this;
    }

    /**
     * Gets hide_flex_tab
     *
     * @return bool
     */
    public function getHideFlexTab()
    {
        return $this->container['hide_flex_tab'];
    }

    /**
     * Sets hide_flex_tab
     *
     * @param bool $hide_flex_tab hide_flex_tab
     *
     * @return $this
     */
    public function setHideFlexTab($hide_flex_tab)
    {
        $this->container['hide_flex_tab'] = $hide_flex_tab;

        return $this;
    }

    /**
     * Gets hide_avatars
     *
     * @return bool
     */
    public function getHideAvatars()
    {
        return $this->container['hide_avatars'];
    }

    /**
     * Sets hide_avatars
     *
     * @param bool $hide_avatars hide_avatars
     *
     * @return $this
     */
    public function setHideAvatars($hide_avatars)
    {
        $this->container['hide_avatars'] = $hide_avatars;

        return $this;
    }

    /**
     * Gets rooms_list_exhibition_mode
     *
     * @return string
     */
    public function getRoomsListExhibitionMode()
    {
        return $this->container['rooms_list_exhibition_mode'];
    }

    /**
     * Sets rooms_list_exhibition_mode
     *
     * @param string $rooms_list_exhibition_mode rooms_list_exhibition_mode
     *
     * @return $this
     */
    public function setRoomsListExhibitionMode($rooms_list_exhibition_mode)
    {
        $this->container['rooms_list_exhibition_mode'] = $rooms_list_exhibition_mode;

        return $this;
    }

    /**
     * Gets sidebar_view_mode
     *
     * @return string
     */
    public function getSidebarViewMode()
    {
        return $this->container['sidebar_view_mode'];
    }

    /**
     * Sets sidebar_view_mode
     *
     * @param string $sidebar_view_mode sidebar_view_mode
     *
     * @return $this
     */
    public function setSidebarViewMode($sidebar_view_mode)
    {
        $this->container['sidebar_view_mode'] = $sidebar_view_mode;

        return $this;
    }

    /**
     * Gets sidebar_hide_avatar
     *
     * @return bool
     */
    public function getSidebarHideAvatar()
    {
        return $this->container['sidebar_hide_avatar'];
    }

    /**
     * Sets sidebar_hide_avatar
     *
     * @param bool $sidebar_hide_avatar sidebar_hide_avatar
     *
     * @return $this
     */
    public function setSidebarHideAvatar($sidebar_hide_avatar)
    {
        $this->container['sidebar_hide_avatar'] = $sidebar_hide_avatar;

        return $this;
    }

    /**
     * Gets sidebar_show_unread
     *
     * @return bool
     */
    public function getSidebarShowUnread()
    {
        return $this->container['sidebar_show_unread'];
    }

    /**
     * Sets sidebar_show_unread
     *
     * @param bool $sidebar_show_unread sidebar_show_unread
     *
     * @return $this
     */
    public function setSidebarShowUnread($sidebar_show_unread)
    {
        $this->container['sidebar_show_unread'] = $sidebar_show_unread;

        return $this;
    }

    /**
     * Gets sidebar_show_favorites
     *
     * @return bool
     */
    public function getSidebarShowFavorites()
    {
        return $this->container['sidebar_show_favorites'];
    }

    /**
     * Sets sidebar_show_favorites
     *
     * @param bool $sidebar_show_favorites sidebar_show_favorites
     *
     * @return $this
     */
    public function setSidebarShowFavorites($sidebar_show_favorites)
    {
        $this->container['sidebar_show_favorites'] = $sidebar_show_favorites;

        return $this;
    }

    /**
     * Gets send_on_enter
     *
     * @return string
     */
    public function getSendOnEnter()
    {
        return $this->container['send_on_enter'];
    }

    /**
     * Sets send_on_enter
     *
     * @param string $send_on_enter send_on_enter
     *
     * @return $this
     */
    public function setSendOnEnter($send_on_enter)
    {
        $this->container['send_on_enter'] = $send_on_enter;

        return $this;
    }

    /**
     * Gets message_view_mode
     *
     * @return int
     */
    public function getMessageViewMode()
    {
        return $this->container['message_view_mode'];
    }

    /**
     * Sets message_view_mode
     *
     * @param int $message_view_mode message_view_mode
     *
     * @return $this
     */
    public function setMessageViewMode($message_view_mode)
    {
        $this->container['message_view_mode'] = $message_view_mode;

        return $this;
    }

    /**
     * Gets email_notification_mode
     *
     * @return string
     */
    public function getEmailNotificationMode()
    {
        return $this->container['email_notification_mode'];
    }

    /**
     * Sets email_notification_mode
     *
     * @param string $email_notification_mode email_notification_mode
     *
     * @return $this
     */
    public function setEmailNotificationMode($email_notification_mode)
    {
        $this->container['email_notification_mode'] = $email_notification_mode;

        return $this;
    }

    /**
     * Gets room_counter_sidebar
     *
     * @return bool
     */
    public function getRoomCounterSidebar()
    {
        return $this->container['room_counter_sidebar'];
    }

    /**
     * Sets room_counter_sidebar
     *
     * @param bool $room_counter_sidebar room_counter_sidebar
     *
     * @return $this
     */
    public function setRoomCounterSidebar($room_counter_sidebar)
    {
        $this->container['room_counter_sidebar'] = $room_counter_sidebar;

        return $this;
    }

    /**
     * Gets new_room_notification
     *
     * @return string
     */
    public function getNewRoomNotification()
    {
        return $this->container['new_room_notification'];
    }

    /**
     * Sets new_room_notification
     *
     * @param string $new_room_notification new_room_notification
     *
     * @return $this
     */
    public function setNewRoomNotification($new_room_notification)
    {
        $this->container['new_room_notification'] = $new_room_notification;

        return $this;
    }

    /**
     * Gets new_message_notification
     *
     * @return string
     */
    public function getNewMessageNotification()
    {
        return $this->container['new_message_notification'];
    }

    /**
     * Sets new_message_notification
     *
     * @param string $new_message_notification new_message_notification
     *
     * @return $this
     */
    public function setNewMessageNotification($new_message_notification)
    {
        $this->container['new_message_notification'] = $new_message_notification;

        return $this;
    }

    /**
     * Gets mute_focused_conversations
     *
     * @return bool
     */
    public function getMuteFocusedConversations()
    {
        return $this->container['mute_focused_conversations'];
    }

    /**
     * Sets mute_focused_conversations
     *
     * @param bool $mute_focused_conversations mute_focused_conversations
     *
     * @return $this
     */
    public function setMuteFocusedConversations($mute_focused_conversations)
    {
        $this->container['mute_focused_conversations'] = $mute_focused_conversations;

        return $this;
    }

    /**
     * Gets notifications_sound_volume
     *
     * @return int
     */
    public function getNotificationsSoundVolume()
    {
        return $this->container['notifications_sound_volume'];
    }

    /**
     * Sets notifications_sound_volume
     *
     * @param int $notifications_sound_volume notifications_sound_volume
     *
     * @return $this
     */
    public function setNotificationsSoundVolume($notifications_sound_volume)
    {
        $this->container['notifications_sound_volume'] = $notifications_sound_volume;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
