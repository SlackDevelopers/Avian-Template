<?php
/**
 * InlineResponse20011UserServices
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * User Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.67
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse20011UserServices Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20011UserServices implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_11_user_services';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'password' => '\Swagger\Client\Model\InlineResponse20011UserServicesPassword',
        'email2fa' => '\Swagger\Client\Model\InlineResponse20011UserServicesEmail2fa',
        'resume' => '\Swagger\Client\Model\InlineResponse20011UserServicesResume',
        'email' => '\Swagger\Client\Model\InlineResponse20011UserServicesEmail',
        'totp' => '\Swagger\Client\Model\InlineResponse20011UserServicesTotp',
        'password_history' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'password' => null,
        'email2fa' => null,
        'resume' => null,
        'email' => null,
        'totp' => null,
        'password_history' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'password' => 'password',
        'email2fa' => 'email2fa',
        'resume' => 'resume',
        'email' => 'email',
        'totp' => 'totp',
        'password_history' => 'passwordHistory'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'password' => 'setPassword',
        'email2fa' => 'setEmail2fa',
        'resume' => 'setResume',
        'email' => 'setEmail',
        'totp' => 'setTotp',
        'password_history' => 'setPasswordHistory'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'password' => 'getPassword',
        'email2fa' => 'getEmail2fa',
        'resume' => 'getResume',
        'email' => 'getEmail',
        'totp' => 'getTotp',
        'password_history' => 'getPasswordHistory'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['email2fa'] = isset($data['email2fa']) ? $data['email2fa'] : null;
        $this->container['resume'] = isset($data['resume']) ? $data['resume'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['totp'] = isset($data['totp']) ? $data['totp'] : null;
        $this->container['password_history'] = isset($data['password_history']) ? $data['password_history'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets password
     *
     * @return \Swagger\Client\Model\InlineResponse20011UserServicesPassword
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param \Swagger\Client\Model\InlineResponse20011UserServicesPassword $password password
     *
     * @return $this
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets email2fa
     *
     * @return \Swagger\Client\Model\InlineResponse20011UserServicesEmail2fa
     */
    public function getEmail2fa()
    {
        return $this->container['email2fa'];
    }

    /**
     * Sets email2fa
     *
     * @param \Swagger\Client\Model\InlineResponse20011UserServicesEmail2fa $email2fa email2fa
     *
     * @return $this
     */
    public function setEmail2fa($email2fa)
    {
        $this->container['email2fa'] = $email2fa;

        return $this;
    }

    /**
     * Gets resume
     *
     * @return \Swagger\Client\Model\InlineResponse20011UserServicesResume
     */
    public function getResume()
    {
        return $this->container['resume'];
    }

    /**
     * Sets resume
     *
     * @param \Swagger\Client\Model\InlineResponse20011UserServicesResume $resume resume
     *
     * @return $this
     */
    public function setResume($resume)
    {
        $this->container['resume'] = $resume;

        return $this;
    }

    /**
     * Gets email
     *
     * @return \Swagger\Client\Model\InlineResponse20011UserServicesEmail
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param \Swagger\Client\Model\InlineResponse20011UserServicesEmail $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets totp
     *
     * @return \Swagger\Client\Model\InlineResponse20011UserServicesTotp
     */
    public function getTotp()
    {
        return $this->container['totp'];
    }

    /**
     * Sets totp
     *
     * @param \Swagger\Client\Model\InlineResponse20011UserServicesTotp $totp totp
     *
     * @return $this
     */
    public function setTotp($totp)
    {
        $this->container['totp'] = $totp;

        return $this;
    }

    /**
     * Gets password_history
     *
     * @return string[]
     */
    public function getPasswordHistory()
    {
        return $this->container['password_history'];
    }

    /**
     * Sets password_history
     *
     * @param string[] $password_history password_history
     *
     * @return $this
     */
    public function setPasswordHistory($password_history)
    {
        $this->container['password_history'] = $password_history;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
