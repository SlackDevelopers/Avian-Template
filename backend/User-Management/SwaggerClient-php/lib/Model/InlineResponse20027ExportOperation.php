<?php
/**
 * InlineResponse20027ExportOperation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * User Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.67
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse20027ExportOperation Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20027ExportOperation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_27_exportOperation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        '_id' => 'string',
        'created_at' => 'string',
        'user_id' => 'string',
        'room_list' => '\Swagger\Client\Model\InlineResponse20027ExportOperationRoomList[]',
        'status' => 'string',
        'export_path' => 'string',
        'assets_path' => 'string',
        'file_list' => 'object[]',
        'generated_file' => 'string',
        'full_export' => 'bool',
        '_updated_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        '_id' => null,
        'created_at' => null,
        'user_id' => null,
        'room_list' => null,
        'status' => null,
        'export_path' => null,
        'assets_path' => null,
        'file_list' => null,
        'generated_file' => null,
        'full_export' => null,
        '_updated_at' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        '_id' => '_id',
        'created_at' => 'createdAt',
        'user_id' => 'userId',
        'room_list' => 'roomList',
        'status' => 'status',
        'export_path' => 'exportPath',
        'assets_path' => 'assetsPath',
        'file_list' => 'fileList',
        'generated_file' => 'generatedFile',
        'full_export' => 'fullExport',
        '_updated_at' => '_updatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        '_id' => 'setId',
        'created_at' => 'setCreatedAt',
        'user_id' => 'setUserId',
        'room_list' => 'setRoomList',
        'status' => 'setStatus',
        'export_path' => 'setExportPath',
        'assets_path' => 'setAssetsPath',
        'file_list' => 'setFileList',
        'generated_file' => 'setGeneratedFile',
        'full_export' => 'setFullExport',
        '_updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        '_id' => 'getId',
        'created_at' => 'getCreatedAt',
        'user_id' => 'getUserId',
        'room_list' => 'getRoomList',
        'status' => 'getStatus',
        'export_path' => 'getExportPath',
        'assets_path' => 'getAssetsPath',
        'file_list' => 'getFileList',
        'generated_file' => 'getGeneratedFile',
        'full_export' => 'getFullExport',
        '_updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['_id'] = isset($data['_id']) ? $data['_id'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['room_list'] = isset($data['room_list']) ? $data['room_list'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['export_path'] = isset($data['export_path']) ? $data['export_path'] : null;
        $this->container['assets_path'] = isset($data['assets_path']) ? $data['assets_path'] : null;
        $this->container['file_list'] = isset($data['file_list']) ? $data['file_list'] : null;
        $this->container['generated_file'] = isset($data['generated_file']) ? $data['generated_file'] : null;
        $this->container['full_export'] = isset($data['full_export']) ? $data['full_export'] : null;
        $this->container['_updated_at'] = isset($data['_updated_at']) ? $data['_updated_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets _id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['_id'];
    }

    /**
     * Sets _id
     *
     * @param string $_id _id
     *
     * @return $this
     */
    public function setId($_id)
    {
        $this->container['_id'] = $_id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string $user_id user_id
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets room_list
     *
     * @return \Swagger\Client\Model\InlineResponse20027ExportOperationRoomList[]
     */
    public function getRoomList()
    {
        return $this->container['room_list'];
    }

    /**
     * Sets room_list
     *
     * @param \Swagger\Client\Model\InlineResponse20027ExportOperationRoomList[] $room_list room_list
     *
     * @return $this
     */
    public function setRoomList($room_list)
    {
        $this->container['room_list'] = $room_list;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets export_path
     *
     * @return string
     */
    public function getExportPath()
    {
        return $this->container['export_path'];
    }

    /**
     * Sets export_path
     *
     * @param string $export_path export_path
     *
     * @return $this
     */
    public function setExportPath($export_path)
    {
        $this->container['export_path'] = $export_path;

        return $this;
    }

    /**
     * Gets assets_path
     *
     * @return string
     */
    public function getAssetsPath()
    {
        return $this->container['assets_path'];
    }

    /**
     * Sets assets_path
     *
     * @param string $assets_path assets_path
     *
     * @return $this
     */
    public function setAssetsPath($assets_path)
    {
        $this->container['assets_path'] = $assets_path;

        return $this;
    }

    /**
     * Gets file_list
     *
     * @return object[]
     */
    public function getFileList()
    {
        return $this->container['file_list'];
    }

    /**
     * Sets file_list
     *
     * @param object[] $file_list file_list
     *
     * @return $this
     */
    public function setFileList($file_list)
    {
        $this->container['file_list'] = $file_list;

        return $this;
    }

    /**
     * Gets generated_file
     *
     * @return string
     */
    public function getGeneratedFile()
    {
        return $this->container['generated_file'];
    }

    /**
     * Sets generated_file
     *
     * @param string $generated_file generated_file
     *
     * @return $this
     */
    public function setGeneratedFile($generated_file)
    {
        $this->container['generated_file'] = $generated_file;

        return $this;
    }

    /**
     * Gets full_export
     *
     * @return bool
     */
    public function getFullExport()
    {
        return $this->container['full_export'];
    }

    /**
     * Sets full_export
     *
     * @param bool $full_export full_export
     *
     * @return $this
     */
    public function setFullExport($full_export)
    {
        $this->container['full_export'] = $full_export;

        return $this;
    }

    /**
     * Gets _updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['_updated_at'];
    }

    /**
     * Sets _updated_at
     *
     * @param string $_updated_at _updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($_updated_at)
    {
        $this->container['_updated_at'] = $_updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
