<?php
/**
 * InlineResponse20021
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Messaging
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.67
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse20021 Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20021 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_21';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'joined' => 'bool',
        'members' => 'int',
        'unreads' => 'int',
        'unreads_from' => 'string',
        'msgs' => 'int',
        'latest' => 'string',
        'user_mentions' => 'int',
        'success' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'joined' => null,
        'members' => null,
        'unreads' => null,
        'unreads_from' => null,
        'msgs' => null,
        'latest' => null,
        'user_mentions' => null,
        'success' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'joined' => 'joined',
        'members' => 'members',
        'unreads' => 'unreads',
        'unreads_from' => 'unreadsFrom',
        'msgs' => 'msgs',
        'latest' => 'latest',
        'user_mentions' => 'userMentions',
        'success' => 'success'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'joined' => 'setJoined',
        'members' => 'setMembers',
        'unreads' => 'setUnreads',
        'unreads_from' => 'setUnreadsFrom',
        'msgs' => 'setMsgs',
        'latest' => 'setLatest',
        'user_mentions' => 'setUserMentions',
        'success' => 'setSuccess'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'joined' => 'getJoined',
        'members' => 'getMembers',
        'unreads' => 'getUnreads',
        'unreads_from' => 'getUnreadsFrom',
        'msgs' => 'getMsgs',
        'latest' => 'getLatest',
        'user_mentions' => 'getUserMentions',
        'success' => 'getSuccess'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['joined'] = isset($data['joined']) ? $data['joined'] : null;
        $this->container['members'] = isset($data['members']) ? $data['members'] : null;
        $this->container['unreads'] = isset($data['unreads']) ? $data['unreads'] : null;
        $this->container['unreads_from'] = isset($data['unreads_from']) ? $data['unreads_from'] : null;
        $this->container['msgs'] = isset($data['msgs']) ? $data['msgs'] : null;
        $this->container['latest'] = isset($data['latest']) ? $data['latest'] : null;
        $this->container['user_mentions'] = isset($data['user_mentions']) ? $data['user_mentions'] : null;
        $this->container['success'] = isset($data['success']) ? $data['success'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets joined
     *
     * @return bool
     */
    public function getJoined()
    {
        return $this->container['joined'];
    }

    /**
     * Sets joined
     *
     * @param bool $joined joined
     *
     * @return $this
     */
    public function setJoined($joined)
    {
        $this->container['joined'] = $joined;

        return $this;
    }

    /**
     * Gets members
     *
     * @return int
     */
    public function getMembers()
    {
        return $this->container['members'];
    }

    /**
     * Sets members
     *
     * @param int $members members
     *
     * @return $this
     */
    public function setMembers($members)
    {
        $this->container['members'] = $members;

        return $this;
    }

    /**
     * Gets unreads
     *
     * @return int
     */
    public function getUnreads()
    {
        return $this->container['unreads'];
    }

    /**
     * Sets unreads
     *
     * @param int $unreads unreads
     *
     * @return $this
     */
    public function setUnreads($unreads)
    {
        $this->container['unreads'] = $unreads;

        return $this;
    }

    /**
     * Gets unreads_from
     *
     * @return string
     */
    public function getUnreadsFrom()
    {
        return $this->container['unreads_from'];
    }

    /**
     * Sets unreads_from
     *
     * @param string $unreads_from unreads_from
     *
     * @return $this
     */
    public function setUnreadsFrom($unreads_from)
    {
        $this->container['unreads_from'] = $unreads_from;

        return $this;
    }

    /**
     * Gets msgs
     *
     * @return int
     */
    public function getMsgs()
    {
        return $this->container['msgs'];
    }

    /**
     * Sets msgs
     *
     * @param int $msgs msgs
     *
     * @return $this
     */
    public function setMsgs($msgs)
    {
        $this->container['msgs'] = $msgs;

        return $this;
    }

    /**
     * Gets latest
     *
     * @return string
     */
    public function getLatest()
    {
        return $this->container['latest'];
    }

    /**
     * Sets latest
     *
     * @param string $latest latest
     *
     * @return $this
     */
    public function setLatest($latest)
    {
        $this->container['latest'] = $latest;

        return $this;
    }

    /**
     * Gets user_mentions
     *
     * @return int
     */
    public function getUserMentions()
    {
        return $this->container['user_mentions'];
    }

    /**
     * Sets user_mentions
     *
     * @param int $user_mentions user_mentions
     *
     * @return $this
     */
    public function setUserMentions($user_mentions)
    {
        $this->container['user_mentions'] = $user_mentions;

        return $this;
    }

    /**
     * Gets success
     *
     * @return bool
     */
    public function getSuccess()
    {
        return $this->container['success'];
    }

    /**
     * Sets success
     *
     * @param bool $success success
     *
     * @return $this
     */
    public function setSuccess($success)
    {
        $this->container['success'] = $success;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
