<?php
/**
 * Apiv1chatSendMessageMessage
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Messaging
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.67
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Apiv1chatSendMessageMessage Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Apiv1chatSendMessageMessage implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'apiv1chat.sendMessage_message';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        't' => 'string',
        'rid' => 'string',
        'msg' => 'string',
        'alias' => 'string',
        'emoji' => 'string',
        'avatar' => 'string',
        'attachments' => '\Swagger\Client\Model\Apiv1chatSendMessageMessageAttachments[]',
        'tmid' => 'string',
        'tshow' => 'string',
        'blocks' => 'object',
        'custom_fields' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        't' => null,
        'rid' => null,
        'msg' => null,
        'alias' => null,
        'emoji' => null,
        'avatar' => null,
        'attachments' => null,
        'tmid' => null,
        'tshow' => null,
        'blocks' => null,
        'custom_fields' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        't' => 't',
        'rid' => 'rid',
        'msg' => 'msg',
        'alias' => 'alias',
        'emoji' => 'emoji',
        'avatar' => 'avatar',
        'attachments' => 'attachments',
        'tmid' => 'tmid',
        'tshow' => 'tshow',
        'blocks' => 'blocks',
        'custom_fields' => 'customFields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        't' => 'setT',
        'rid' => 'setRid',
        'msg' => 'setMsg',
        'alias' => 'setAlias',
        'emoji' => 'setEmoji',
        'avatar' => 'setAvatar',
        'attachments' => 'setAttachments',
        'tmid' => 'setTmid',
        'tshow' => 'setTshow',
        'blocks' => 'setBlocks',
        'custom_fields' => 'setCustomFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        't' => 'getT',
        'rid' => 'getRid',
        'msg' => 'getMsg',
        'alias' => 'getAlias',
        'emoji' => 'getEmoji',
        'avatar' => 'getAvatar',
        'attachments' => 'getAttachments',
        'tmid' => 'getTmid',
        'tshow' => 'getTshow',
        'blocks' => 'getBlocks',
        'custom_fields' => 'getCustomFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['t'] = isset($data['t']) ? $data['t'] : null;
        $this->container['rid'] = isset($data['rid']) ? $data['rid'] : null;
        $this->container['msg'] = isset($data['msg']) ? $data['msg'] : null;
        $this->container['alias'] = isset($data['alias']) ? $data['alias'] : null;
        $this->container['emoji'] = isset($data['emoji']) ? $data['emoji'] : null;
        $this->container['avatar'] = isset($data['avatar']) ? $data['avatar'] : null;
        $this->container['attachments'] = isset($data['attachments']) ? $data['attachments'] : null;
        $this->container['tmid'] = isset($data['tmid']) ? $data['tmid'] : null;
        $this->container['tshow'] = isset($data['tshow']) ? $data['tshow'] : null;
        $this->container['blocks'] = isset($data['blocks']) ? $data['blocks'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['rid'] === null) {
            $invalidProperties[] = "'rid' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets t
     *
     * @return string
     */
    public function getT()
    {
        return $this->container['t'];
    }

    /**
     * Sets t
     *
     * @param string $t The message type e.g. e2e
     *
     * @return $this
     */
    public function setT($t)
    {
        $this->container['t'] = $t;

        return $this;
    }

    /**
     * Gets rid
     *
     * @return string
     */
    public function getRid()
    {
        return $this->container['rid'];
    }

    /**
     * Sets rid
     *
     * @param string $rid The room ID where the message is to be sent.
     *
     * @return $this
     */
    public function setRid($rid)
    {
        $this->container['rid'] = $rid;

        return $this;
    }

    /**
     * Gets msg
     *
     * @return string
     */
    public function getMsg()
    {
        return $this->container['msg'];
    }

    /**
     * Sets msg
     *
     * @param string $msg The message text to send, it is optional because of attachments.
     *
     * @return $this
     */
    public function setMsg($msg)
    {
        $this->container['msg'] = $msg;

        return $this;
    }

    /**
     * Gets alias
     *
     * @return string
     */
    public function getAlias()
    {
        return $this->container['alias'];
    }

    /**
     * Sets alias
     *
     * @param string $alias This will cause the message's name to appear as the given alias, but your username will still be displayed. Requires the `impersonate-other-user` permission
     *
     * @return $this
     */
    public function setAlias($alias)
    {
        $this->container['alias'] = $alias;

        return $this;
    }

    /**
     * Gets emoji
     *
     * @return string
     */
    public function getEmoji()
    {
        return $this->container['emoji'];
    }

    /**
     * Sets emoji
     *
     * @param string $emoji If provided, the avatar will be displayed as the emoji.
     *
     * @return $this
     */
    public function setEmoji($emoji)
    {
        $this->container['emoji'] = $emoji;

        return $this;
    }

    /**
     * Gets avatar
     *
     * @return string
     */
    public function getAvatar()
    {
        return $this->container['avatar'];
    }

    /**
     * Sets avatar
     *
     * @param string $avatar If provided, the avatar will be displayed as the provided image url. Requires the  `impersonate-other-user` permission.
     *
     * @return $this
     */
    public function setAvatar($avatar)
    {
        $this->container['avatar'] = $avatar;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \Swagger\Client\Model\Apiv1chatSendMessageMessageAttachments[]
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \Swagger\Client\Model\Apiv1chatSendMessageMessageAttachments[] $attachments The attachment is an array of objects with any of the following properties. One attachment can have many sections, including: * General * Author Information * Title Information * Image * Audio * Video * Table/Fields
     *
     * @return $this
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets tmid
     *
     * @return string
     */
    public function getTmid()
    {
        return $this->container['tmid'];
    }

    /**
     * Sets tmid
     *
     * @param string $tmid The message ID to create a thread.
     *
     * @return $this
     */
    public function setTmid($tmid)
    {
        $this->container['tmid'] = $tmid;

        return $this;
    }

    /**
     * Gets tshow
     *
     * @return string
     */
    public function getTshow()
    {
        return $this->container['tshow'];
    }

    /**
     * Sets tshow
     *
     * @param string $tshow Used when replying in a thread. Message will be sent in channel also if value is true
     *
     * @return $this
     */
    public function setTshow($tshow)
    {
        $this->container['tshow'] = $tshow;

        return $this;
    }

    /**
     * Gets blocks
     *
     * @return object
     */
    public function getBlocks()
    {
        return $this->container['blocks'];
    }

    /**
     * Sets blocks
     *
     * @param object $blocks A message block is an array of objects with any of the following properties. Blocks can have many sections: - type - text - fields
     *
     * @return $this
     */
    public function setBlocks($blocks)
    {
        $this->container['blocks'] = $blocks;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return object
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param object $custom_fields You can add custom fields for messages. For example, set priorities for messages.  You must enable this option and define the validation in the workspace settings. See the <a href='https://docs.rocket.chat/use-rocket.chat/workspace-administration/settings/message' target='_blank'>Message</a> settings for further information.
     *
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
