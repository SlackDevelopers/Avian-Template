<?php
/**
 * Apiv1chatSendMessageMessageAttachments
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Messaging
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.67
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Apiv1chatSendMessageMessageAttachments Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Apiv1chatSendMessageMessageAttachments implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'apiv1chat.sendMessage_message_attachments';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'audio_url' => 'string',
        'author_icon' => 'string',
        'author_link' => 'string',
        'author_name' => 'string',
        'collapsed' => 'bool',
        'color' => 'string',
        'fields' => '\Swagger\Client\Model\Apiv1chatPostMessageFields[]',
        'image_url' => 'string',
        'message_link' => 'string',
        'text' => 'string',
        'thumb_url' => 'string',
        'title' => 'string',
        'title_link' => 'string',
        'title_link_download' => 'bool',
        'ts' => 'string',
        'video_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'audio_url' => null,
        'author_icon' => null,
        'author_link' => null,
        'author_name' => null,
        'collapsed' => null,
        'color' => null,
        'fields' => null,
        'image_url' => null,
        'message_link' => null,
        'text' => null,
        'thumb_url' => null,
        'title' => null,
        'title_link' => null,
        'title_link_download' => null,
        'ts' => null,
        'video_url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'audio_url' => 'audio_url',
        'author_icon' => 'author_icon',
        'author_link' => 'author_link',
        'author_name' => 'author_name',
        'collapsed' => 'collapsed',
        'color' => 'color',
        'fields' => 'fields',
        'image_url' => 'image_url',
        'message_link' => 'message_link',
        'text' => 'text',
        'thumb_url' => 'thumb_url',
        'title' => 'title',
        'title_link' => 'title_link',
        'title_link_download' => 'title_link_download',
        'ts' => 'ts',
        'video_url' => 'video_url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'audio_url' => 'setAudioUrl',
        'author_icon' => 'setAuthorIcon',
        'author_link' => 'setAuthorLink',
        'author_name' => 'setAuthorName',
        'collapsed' => 'setCollapsed',
        'color' => 'setColor',
        'fields' => 'setFields',
        'image_url' => 'setImageUrl',
        'message_link' => 'setMessageLink',
        'text' => 'setText',
        'thumb_url' => 'setThumbUrl',
        'title' => 'setTitle',
        'title_link' => 'setTitleLink',
        'title_link_download' => 'setTitleLinkDownload',
        'ts' => 'setTs',
        'video_url' => 'setVideoUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'audio_url' => 'getAudioUrl',
        'author_icon' => 'getAuthorIcon',
        'author_link' => 'getAuthorLink',
        'author_name' => 'getAuthorName',
        'collapsed' => 'getCollapsed',
        'color' => 'getColor',
        'fields' => 'getFields',
        'image_url' => 'getImageUrl',
        'message_link' => 'getMessageLink',
        'text' => 'getText',
        'thumb_url' => 'getThumbUrl',
        'title' => 'getTitle',
        'title_link' => 'getTitleLink',
        'title_link_download' => 'getTitleLinkDownload',
        'ts' => 'getTs',
        'video_url' => 'getVideoUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['audio_url'] = isset($data['audio_url']) ? $data['audio_url'] : null;
        $this->container['author_icon'] = isset($data['author_icon']) ? $data['author_icon'] : null;
        $this->container['author_link'] = isset($data['author_link']) ? $data['author_link'] : null;
        $this->container['author_name'] = isset($data['author_name']) ? $data['author_name'] : null;
        $this->container['collapsed'] = isset($data['collapsed']) ? $data['collapsed'] : null;
        $this->container['color'] = isset($data['color']) ? $data['color'] : null;
        $this->container['fields'] = isset($data['fields']) ? $data['fields'] : null;
        $this->container['image_url'] = isset($data['image_url']) ? $data['image_url'] : null;
        $this->container['message_link'] = isset($data['message_link']) ? $data['message_link'] : null;
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
        $this->container['thumb_url'] = isset($data['thumb_url']) ? $data['thumb_url'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['title_link'] = isset($data['title_link']) ? $data['title_link'] : null;
        $this->container['title_link_download'] = isset($data['title_link_download']) ? $data['title_link_download'] : null;
        $this->container['ts'] = isset($data['ts']) ? $data['ts'] : null;
        $this->container['video_url'] = isset($data['video_url']) ? $data['video_url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets audio_url
     *
     * @return string
     */
    public function getAudioUrl()
    {
        return $this->container['audio_url'];
    }

    /**
     * Sets audio_url
     *
     * @param string $audio_url Audio file to attach. See <a href='https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio' target='_blank'>HTML audio element</a> for information.
     *
     * @return $this
     */
    public function setAudioUrl($audio_url)
    {
        $this->container['audio_url'] = $audio_url;

        return $this;
    }

    /**
     * Gets author_icon
     *
     * @return string
     */
    public function getAuthorIcon()
    {
        return $this->container['author_icon'];
    }

    /**
     * Sets author_icon
     *
     * @param string $author_icon Displays a tiny icon to the left of the author's name.
     *
     * @return $this
     */
    public function setAuthorIcon($author_icon)
    {
        $this->container['author_icon'] = $author_icon;

        return $this;
    }

    /**
     * Gets author_link
     *
     * @return string
     */
    public function getAuthorLink()
    {
        return $this->container['author_link'];
    }

    /**
     * Sets author_link
     *
     * @param string $author_link Providing this makes the author name clickable and points to this link.
     *
     * @return $this
     */
    public function setAuthorLink($author_link)
    {
        $this->container['author_link'] = $author_link;

        return $this;
    }

    /**
     * Gets author_name
     *
     * @return string
     */
    public function getAuthorName()
    {
        return $this->container['author_name'];
    }

    /**
     * Sets author_name
     *
     * @param string $author_name Name of the author.
     *
     * @return $this
     */
    public function setAuthorName($author_name)
    {
        $this->container['author_name'] = $author_name;

        return $this;
    }

    /**
     * Gets collapsed
     *
     * @return bool
     */
    public function getCollapsed()
    {
        return $this->container['collapsed'];
    }

    /**
     * Sets collapsed
     *
     * @param bool $collapsed Causes the image, audio, and video sections to be displayed as collapsed when set to true.
     *
     * @return $this
     */
    public function setCollapsed($collapsed)
    {
        $this->container['collapsed'] = $collapsed;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string $color See <a href='https://developer.mozilla.org/en-US/docs/Web/CSS/background-color' target='_blank'>background-css</a> for the supported format.
     *
     * @return $this
     */
    public function setColor($color)
    {
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets fields
     *
     * @return \Swagger\Client\Model\Apiv1chatPostMessageFields[]
     */
    public function getFields()
    {
        return $this->container['fields'];
    }

    /**
     * Sets fields
     *
     * @param \Swagger\Client\Model\Apiv1chatPostMessageFields[] $fields fields
     *
     * @return $this
     */
    public function setFields($fields)
    {
        $this->container['fields'] = $fields;

        return $this;
    }

    /**
     * Gets image_url
     *
     * @return string
     */
    public function getImageUrl()
    {
        return $this->container['image_url'];
    }

    /**
     * Sets image_url
     *
     * @param string $image_url The image to display, will be big and easy to see.
     *
     * @return $this
     */
    public function setImageUrl($image_url)
    {
        $this->container['image_url'] = $image_url;

        return $this;
    }

    /**
     * Gets message_link
     *
     * @return string
     */
    public function getMessageLink()
    {
        return $this->container['message_link'];
    }

    /**
     * Sets message_link
     *
     * @param string $message_link Only applicable if the `ts` parameter is provided, as it makes the time clickable to this link.
     *
     * @return $this
     */
    public function setMessageLink($message_link)
    {
        $this->container['message_link'] = $message_link;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string $text The text to display for this attachment, it is different than the message's text.
     *
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets thumb_url
     *
     * @return string
     */
    public function getThumbUrl()
    {
        return $this->container['thumb_url'];
    }

    /**
     * Sets thumb_url
     *
     * @param string $thumb_url An image that displays to the left of the text, looks better when this is relatively small.
     *
     * @return $this
     */
    public function setThumbUrl($thumb_url)
    {
        $this->container['thumb_url'] = $thumb_url;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title Title to display for this attachment, displays under the author.
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets title_link
     *
     * @return string
     */
    public function getTitleLink()
    {
        return $this->container['title_link'];
    }

    /**
     * Sets title_link
     *
     * @param string $title_link Providing this makes the title clickable, pointing to this link.
     *
     * @return $this
     */
    public function setTitleLink($title_link)
    {
        $this->container['title_link'] = $title_link;

        return $this;
    }

    /**
     * Gets title_link_download
     *
     * @return bool
     */
    public function getTitleLinkDownload()
    {
        return $this->container['title_link_download'];
    }

    /**
     * Sets title_link_download
     *
     * @param bool $title_link_download When this is true, a download icon appears and clicking this saves the link to file.
     *
     * @return $this
     */
    public function setTitleLinkDownload($title_link_download)
    {
        $this->container['title_link_download'] = $title_link_download;

        return $this;
    }

    /**
     * Gets ts
     *
     * @return string
     */
    public function getTs()
    {
        return $this->container['ts'];
    }

    /**
     * Sets ts
     *
     * @param string $ts Displays the time next to the text portion.
     *
     * @return $this
     */
    public function setTs($ts)
    {
        $this->container['ts'] = $ts;

        return $this;
    }

    /**
     * Gets video_url
     *
     * @return string
     */
    public function getVideoUrl()
    {
        return $this->container['video_url'];
    }

    /**
     * Sets video_url
     *
     * @param string $video_url Video file to attach. See the <a href='https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video' target='blank'>HTML video element</a> for information.
     *
     * @return $this
     */
    public function setVideoUrl($video_url)
    {
        $this->container['video_url'] = $video_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
