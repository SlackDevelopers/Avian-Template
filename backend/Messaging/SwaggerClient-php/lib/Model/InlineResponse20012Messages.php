<?php
/**
 * InlineResponse20012Messages
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Messaging
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.67
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse20012Messages Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20012Messages implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_12_messages';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        '_id' => 'string',
        't' => 'string',
        'rid' => 'string',
        'ts' => 'string',
        'msg' => 'string',
        'u' => '\Swagger\Client\Model\InlineResponse2009U',
        'groupable' => 'bool',
        'drid' => 'string',
        '_updated_at' => 'string',
        'dcount' => 'int',
        'dlm' => 'string',
        'starred' => '\Swagger\Client\Model\InlineResponse2005Messages[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        '_id' => null,
        't' => null,
        'rid' => null,
        'ts' => null,
        'msg' => null,
        'u' => null,
        'groupable' => null,
        'drid' => null,
        '_updated_at' => null,
        'dcount' => null,
        'dlm' => null,
        'starred' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        '_id' => '_id',
        't' => 't',
        'rid' => 'rid',
        'ts' => 'ts',
        'msg' => 'msg',
        'u' => 'u',
        'groupable' => 'groupable',
        'drid' => 'drid',
        '_updated_at' => '_updatedAt',
        'dcount' => 'dcount',
        'dlm' => 'dlm',
        'starred' => 'starred'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        '_id' => 'setId',
        't' => 'setT',
        'rid' => 'setRid',
        'ts' => 'setTs',
        'msg' => 'setMsg',
        'u' => 'setU',
        'groupable' => 'setGroupable',
        'drid' => 'setDrid',
        '_updated_at' => 'setUpdatedAt',
        'dcount' => 'setDcount',
        'dlm' => 'setDlm',
        'starred' => 'setStarred'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        '_id' => 'getId',
        't' => 'getT',
        'rid' => 'getRid',
        'ts' => 'getTs',
        'msg' => 'getMsg',
        'u' => 'getU',
        'groupable' => 'getGroupable',
        'drid' => 'getDrid',
        '_updated_at' => 'getUpdatedAt',
        'dcount' => 'getDcount',
        'dlm' => 'getDlm',
        'starred' => 'getStarred'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['_id'] = isset($data['_id']) ? $data['_id'] : null;
        $this->container['t'] = isset($data['t']) ? $data['t'] : null;
        $this->container['rid'] = isset($data['rid']) ? $data['rid'] : null;
        $this->container['ts'] = isset($data['ts']) ? $data['ts'] : null;
        $this->container['msg'] = isset($data['msg']) ? $data['msg'] : null;
        $this->container['u'] = isset($data['u']) ? $data['u'] : null;
        $this->container['groupable'] = isset($data['groupable']) ? $data['groupable'] : null;
        $this->container['drid'] = isset($data['drid']) ? $data['drid'] : null;
        $this->container['_updated_at'] = isset($data['_updated_at']) ? $data['_updated_at'] : null;
        $this->container['dcount'] = isset($data['dcount']) ? $data['dcount'] : null;
        $this->container['dlm'] = isset($data['dlm']) ? $data['dlm'] : null;
        $this->container['starred'] = isset($data['starred']) ? $data['starred'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets _id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['_id'];
    }

    /**
     * Sets _id
     *
     * @param string $_id _id
     *
     * @return $this
     */
    public function setId($_id)
    {
        $this->container['_id'] = $_id;

        return $this;
    }

    /**
     * Gets t
     *
     * @return string
     */
    public function getT()
    {
        return $this->container['t'];
    }

    /**
     * Sets t
     *
     * @param string $t t
     *
     * @return $this
     */
    public function setT($t)
    {
        $this->container['t'] = $t;

        return $this;
    }

    /**
     * Gets rid
     *
     * @return string
     */
    public function getRid()
    {
        return $this->container['rid'];
    }

    /**
     * Sets rid
     *
     * @param string $rid rid
     *
     * @return $this
     */
    public function setRid($rid)
    {
        $this->container['rid'] = $rid;

        return $this;
    }

    /**
     * Gets ts
     *
     * @return string
     */
    public function getTs()
    {
        return $this->container['ts'];
    }

    /**
     * Sets ts
     *
     * @param string $ts ts
     *
     * @return $this
     */
    public function setTs($ts)
    {
        $this->container['ts'] = $ts;

        return $this;
    }

    /**
     * Gets msg
     *
     * @return string
     */
    public function getMsg()
    {
        return $this->container['msg'];
    }

    /**
     * Sets msg
     *
     * @param string $msg msg
     *
     * @return $this
     */
    public function setMsg($msg)
    {
        $this->container['msg'] = $msg;

        return $this;
    }

    /**
     * Gets u
     *
     * @return \Swagger\Client\Model\InlineResponse2009U
     */
    public function getU()
    {
        return $this->container['u'];
    }

    /**
     * Sets u
     *
     * @param \Swagger\Client\Model\InlineResponse2009U $u u
     *
     * @return $this
     */
    public function setU($u)
    {
        $this->container['u'] = $u;

        return $this;
    }

    /**
     * Gets groupable
     *
     * @return bool
     */
    public function getGroupable()
    {
        return $this->container['groupable'];
    }

    /**
     * Sets groupable
     *
     * @param bool $groupable groupable
     *
     * @return $this
     */
    public function setGroupable($groupable)
    {
        $this->container['groupable'] = $groupable;

        return $this;
    }

    /**
     * Gets drid
     *
     * @return string
     */
    public function getDrid()
    {
        return $this->container['drid'];
    }

    /**
     * Sets drid
     *
     * @param string $drid drid
     *
     * @return $this
     */
    public function setDrid($drid)
    {
        $this->container['drid'] = $drid;

        return $this;
    }

    /**
     * Gets _updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['_updated_at'];
    }

    /**
     * Sets _updated_at
     *
     * @param string $_updated_at _updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($_updated_at)
    {
        $this->container['_updated_at'] = $_updated_at;

        return $this;
    }

    /**
     * Gets dcount
     *
     * @return int
     */
    public function getDcount()
    {
        return $this->container['dcount'];
    }

    /**
     * Sets dcount
     *
     * @param int $dcount dcount
     *
     * @return $this
     */
    public function setDcount($dcount)
    {
        $this->container['dcount'] = $dcount;

        return $this;
    }

    /**
     * Gets dlm
     *
     * @return string
     */
    public function getDlm()
    {
        return $this->container['dlm'];
    }

    /**
     * Sets dlm
     *
     * @param string $dlm dlm
     *
     * @return $this
     */
    public function setDlm($dlm)
    {
        $this->container['dlm'] = $dlm;

        return $this;
    }

    /**
     * Gets starred
     *
     * @return \Swagger\Client\Model\InlineResponse2005Messages[]
     */
    public function getStarred()
    {
        return $this->container['starred'];
    }

    /**
     * Sets starred
     *
     * @param \Swagger\Client\Model\InlineResponse2005Messages[] $starred starred
     *
     * @return $this
     */
    public function setStarred($starred)
    {
        $this->container['starred'] = $starred;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
