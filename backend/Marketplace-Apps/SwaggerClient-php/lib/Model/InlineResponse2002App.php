<?php
/**
 * InlineResponse2002App
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketplace Apps
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.67
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse2002App Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2002App implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_2_app';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'version' => 'string',
        'required_api_version' => 'string',
        'icon_file' => 'string',
        'author' => '\Swagger\Client\Model\InlineResponse2002AppAuthor',
        'name' => 'string',
        'name_slug' => 'string',
        'class_file' => 'string',
        'description' => 'string',
        'implements' => 'object[]',
        'icon_file_content' => 'string',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'version' => null,
        'required_api_version' => null,
        'icon_file' => null,
        'author' => null,
        'name' => null,
        'name_slug' => null,
        'class_file' => null,
        'description' => null,
        'implements' => null,
        'icon_file_content' => null,
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'version' => 'version',
        'required_api_version' => 'requiredApiVersion',
        'icon_file' => 'iconFile',
        'author' => 'author',
        'name' => 'name',
        'name_slug' => 'nameSlug',
        'class_file' => 'classFile',
        'description' => 'description',
        'implements' => 'implements',
        'icon_file_content' => 'iconFileContent',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'version' => 'setVersion',
        'required_api_version' => 'setRequiredApiVersion',
        'icon_file' => 'setIconFile',
        'author' => 'setAuthor',
        'name' => 'setName',
        'name_slug' => 'setNameSlug',
        'class_file' => 'setClassFile',
        'description' => 'setDescription',
        'implements' => 'setImplements',
        'icon_file_content' => 'setIconFileContent',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'version' => 'getVersion',
        'required_api_version' => 'getRequiredApiVersion',
        'icon_file' => 'getIconFile',
        'author' => 'getAuthor',
        'name' => 'getName',
        'name_slug' => 'getNameSlug',
        'class_file' => 'getClassFile',
        'description' => 'getDescription',
        'implements' => 'getImplements',
        'icon_file_content' => 'getIconFileContent',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['required_api_version'] = isset($data['required_api_version']) ? $data['required_api_version'] : null;
        $this->container['icon_file'] = isset($data['icon_file']) ? $data['icon_file'] : null;
        $this->container['author'] = isset($data['author']) ? $data['author'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['name_slug'] = isset($data['name_slug']) ? $data['name_slug'] : null;
        $this->container['class_file'] = isset($data['class_file']) ? $data['class_file'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['implements'] = isset($data['implements']) ? $data['implements'] : null;
        $this->container['icon_file_content'] = isset($data['icon_file_content']) ? $data['icon_file_content'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets required_api_version
     *
     * @return string
     */
    public function getRequiredApiVersion()
    {
        return $this->container['required_api_version'];
    }

    /**
     * Sets required_api_version
     *
     * @param string $required_api_version required_api_version
     *
     * @return $this
     */
    public function setRequiredApiVersion($required_api_version)
    {
        $this->container['required_api_version'] = $required_api_version;

        return $this;
    }

    /**
     * Gets icon_file
     *
     * @return string
     */
    public function getIconFile()
    {
        return $this->container['icon_file'];
    }

    /**
     * Sets icon_file
     *
     * @param string $icon_file icon_file
     *
     * @return $this
     */
    public function setIconFile($icon_file)
    {
        $this->container['icon_file'] = $icon_file;

        return $this;
    }

    /**
     * Gets author
     *
     * @return \Swagger\Client\Model\InlineResponse2002AppAuthor
     */
    public function getAuthor()
    {
        return $this->container['author'];
    }

    /**
     * Sets author
     *
     * @param \Swagger\Client\Model\InlineResponse2002AppAuthor $author author
     *
     * @return $this
     */
    public function setAuthor($author)
    {
        $this->container['author'] = $author;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets name_slug
     *
     * @return string
     */
    public function getNameSlug()
    {
        return $this->container['name_slug'];
    }

    /**
     * Sets name_slug
     *
     * @param string $name_slug name_slug
     *
     * @return $this
     */
    public function setNameSlug($name_slug)
    {
        $this->container['name_slug'] = $name_slug;

        return $this;
    }

    /**
     * Gets class_file
     *
     * @return string
     */
    public function getClassFile()
    {
        return $this->container['class_file'];
    }

    /**
     * Sets class_file
     *
     * @param string $class_file class_file
     *
     * @return $this
     */
    public function setClassFile($class_file)
    {
        $this->container['class_file'] = $class_file;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets implements
     *
     * @return object[]
     */
    public function getImplements()
    {
        return $this->container['implements'];
    }

    /**
     * Sets implements
     *
     * @param object[] $implements implements
     *
     * @return $this
     */
    public function setImplements($implements)
    {
        $this->container['implements'] = $implements;

        return $this;
    }

    /**
     * Gets icon_file_content
     *
     * @return string
     */
    public function getIconFileContent()
    {
        return $this->container['icon_file_content'];
    }

    /**
     * Sets icon_file_content
     *
     * @param string $icon_file_content icon_file_content
     *
     * @return $this
     */
    public function setIconFileContent($icon_file_content)
    {
        $this->container['icon_file_content'] = $icon_file_content;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
