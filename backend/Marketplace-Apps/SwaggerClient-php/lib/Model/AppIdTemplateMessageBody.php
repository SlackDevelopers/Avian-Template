<?php
/**
 * AppIdTemplateMessageBody
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketplace Apps
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.67
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AppIdTemplateMessageBody Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AppIdTemplateMessageBody implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'appId_templateMessage_body';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'phone_numbers' => 'string[]',
        'connected_whats_app_no' => 'string',
        'target_agent' => 'string',
        'target_department' => 'string',
        'template' => '\Swagger\Client\Model\ApiappspublicappIdtemplateMessageTemplate'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'phone_numbers' => null,
        'connected_whats_app_no' => null,
        'target_agent' => null,
        'target_department' => null,
        'template' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'phone_numbers' => 'phoneNumbers',
        'connected_whats_app_no' => 'connectedWhatsAppNo',
        'target_agent' => 'targetAgent',
        'target_department' => 'targetDepartment',
        'template' => 'template'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'phone_numbers' => 'setPhoneNumbers',
        'connected_whats_app_no' => 'setConnectedWhatsAppNo',
        'target_agent' => 'setTargetAgent',
        'target_department' => 'setTargetDepartment',
        'template' => 'setTemplate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'phone_numbers' => 'getPhoneNumbers',
        'connected_whats_app_no' => 'getConnectedWhatsAppNo',
        'target_agent' => 'getTargetAgent',
        'target_department' => 'getTargetDepartment',
        'template' => 'getTemplate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['phone_numbers'] = isset($data['phone_numbers']) ? $data['phone_numbers'] : null;
        $this->container['connected_whats_app_no'] = isset($data['connected_whats_app_no']) ? $data['connected_whats_app_no'] : null;
        $this->container['target_agent'] = isset($data['target_agent']) ? $data['target_agent'] : null;
        $this->container['target_department'] = isset($data['target_department']) ? $data['target_department'] : null;
        $this->container['template'] = isset($data['template']) ? $data['template'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['phone_numbers'] === null) {
            $invalidProperties[] = "'phone_numbers' can't be null";
        }
        if ($this->container['connected_whats_app_no'] === null) {
            $invalidProperties[] = "'connected_whats_app_no' can't be null";
        }
        if ($this->container['template'] === null) {
            $invalidProperties[] = "'template' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets phone_numbers
     *
     * @return string[]
     */
    public function getPhoneNumbers()
    {
        return $this->container['phone_numbers'];
    }

    /**
     * Sets phone_numbers
     *
     * @param string[] $phone_numbers Recipient WhatsApp IDs where you want to send the template message. You can validate a WhatsApp id from <a href=\"https://developers.facebook.com/docs/whatsapp/on-premises/reference/contacts\" target=\"_blank\">here</a>.
     *
     * @return $this
     */
    public function setPhoneNumbers($phone_numbers)
    {
        $this->container['phone_numbers'] = $phone_numbers;

        return $this;
    }

    /**
     * Gets connected_whats_app_no
     *
     * @return string
     */
    public function getConnectedWhatsAppNo()
    {
        return $this->container['connected_whats_app_no'];
    }

    /**
     * Sets connected_whats_app_no
     *
     * @param string $connected_whats_app_no The WhatsApp Number from which you want to send this template message. The WhatsApp number connected to your workspace via the app.
     *
     * @return $this
     */
    public function setConnectedWhatsAppNo($connected_whats_app_no)
    {
        $this->container['connected_whats_app_no'] = $connected_whats_app_no;

        return $this;
    }

    /**
     * Gets target_agent
     *
     * @return string
     */
    public function getTargetAgent()
    {
        return $this->container['target_agent'];
    }

    /**
     * Sets target_agent
     *
     * @param string $target_agent Username of the agent you want to transfer the chat to when the WhatsApp user replies.
     *
     * @return $this
     */
    public function setTargetAgent($target_agent)
    {
        $this->container['target_agent'] = $target_agent;

        return $this;
    }

    /**
     * Gets target_department
     *
     * @return string
     */
    public function getTargetDepartment()
    {
        return $this->container['target_department'];
    }

    /**
     * Sets target_department
     *
     * @param string $target_department Department name or ID where you want to transfer the chat to when the WhatsApp user replies.
     *
     * @return $this
     */
    public function setTargetDepartment($target_department)
    {
        $this->container['target_department'] = $target_department;

        return $this;
    }

    /**
     * Gets template
     *
     * @return \Swagger\Client\Model\ApiappspublicappIdtemplateMessageTemplate
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     *
     * @param \Swagger\Client\Model\ApiappspublicappIdtemplateMessageTemplate $template template
     *
     * @return $this
     */
    public function setTemplate($template)
    {
        $this->container['template'] = $template;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
